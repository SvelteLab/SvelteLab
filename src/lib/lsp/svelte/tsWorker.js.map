{"version":3,"sources":["../../../../../svelte-language-server-web/src/tsWorker.ts","../../../../../svelte-language-server-web/src/typescript-language-server/server.ts","../../../../../svelte-language-server-web/src/typescript-language-server/documents/utils.ts","../../../../../svelte-language-server-web/src/typescript-language-server/documents/WritableDocument.ts","../../../../../svelte-language-server-web/src/typescript-language-server/lib/semanticTokenLegend.ts"],"names":["init_Buffer","init_process","init_typescript","import_vscode_languageserver_protocol","import_browser","init_fs","init_vfs","clamp","num","min","max","positionAt","offset","text","lineOffsets","getLineOffsets","low","high","mid","lineOffset","line","offsetAt","position","nextLineOffset","isLineStart","ch","getTextInRange","range","ReadableDocument","WritableDocument","start","end","content","init_path","getSemanticTokenLegends","tokenModifiers","tsModifier","legend","tokenTypes","tokenType","scriptElementKindToCompletionItemKind","kind","typescript_default","displayPartsToString","displayParts","displayPart","tagToString","tag","tagLabel","paramName","rest","r","_textSpanToRange","model","span","p1","p2","Document","_uri","languageId","version","currentDir","matchFiles","createServer","connection","docs","env","fileVersions","projectVersion","getScriptSnapshot","fileName","contents","VFS","getCompilerOptions","compilerOptions","compilerHost","host","message","_readdirSync","key","filename","_realpathSync","path","encoding","extensions","excludes","includes","depth","args","v","debounce","syncFiles","handleFSSync","name","_normalizePath","updateFile","filePath","autocompleteAtPosition","pos","params","result","entry","infoAtPosition","lintSystem","SyntacticDiagnostics","SemanticDiagnostic","SuggestionDiagnostics","diagnostics","acc","messagesErrors","messageList","getMessage","loop","item","severity","dirname","throttleAsync","textDocument","sourceDoc","info","documentation","tags","transformHoverResultToHtml","worker","conn","TypeScriptWorker","BaseWorker"],"mappings":"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","sourcesContent":["import \"./prelude\";\nimport \"./global_patches\";\nimport { BaseWorker } from \"./baseWorker\";\nimport { createServer } from \"./typescript-language-server/server\";\n\nimport {\n\tBrowserMessageReader,\n\tBrowserMessageWriter,\n\tcreateConnection,\n} from \"vscode-languageserver/browser\";\n\nconst worker = globalThis as unknown as DedicatedWorkerGlobalScope;\n\nconst conn = createConnection(\n\tnew BrowserMessageReader(worker),\n\tnew BrowserMessageWriter(worker),\n);\n/**\n * This is the entry point for the TypeScript Language Server Web Worker.\n * It will wait for a message containing any config files (package.json, tsconfig.json, etc)\n * from the main thread, and then start the server.\n *\n * @example\n * Creating the Language Server module:\n * ```ts\n * // worker.ts\n * import { TypeScriptWorker } from \"svelte-language-server-web\";\n *\n * export default TypeScriptWorker();\n *\n * ```\n *\n * @example\n * Using the worker:\n * ```ts\n * // main.ts\n *\n * const tsWorker = new Worker(new URL(\"./worker.ts\", import.meta.url), { type: 'module' });\n *\n * ```\n */\nexport const TypeScriptWorker = () =>\n\tBaseWorker(createServer, conn, \"TypeScript\");\n","/**\n * This TypeScript module implements a language server for providing features such as code completion,\n * diagnostics, hover information, and more for TypeScript and JavaScript files. It utilizes the\n * \"vscode-languageserver\" protocol and integrates with the TypeScript language service.\n *\n * Overview:\n * - Imports necessary dependencies and modules for various functionalities.\n * - Defines a \"Document\" class to manage text documents and their content.\n * - Implements helper functions for converting TypeScript element kinds, display parts, and JSDoc tags.\n * - Entry point: \"createServer\" function initializes the language server's capabilities and event listeners.\n * - Language service is set up using the \"createLanguageService\" function with custom hosts and compiler options.\n * - Listens for initialization, open, change, completion, and hover events from the client.\n * - Performs syntax and semantic analysis to generate diagnostics for displayed issues.\n * - Integrates with the TypeScript language service for code completion, quick info, and diagnostics.\n * - Establishes connection, handles requests, and listens for events using the \"vscode-languageserver\" library.\n */\n\nimport ts from \"typescript\";\nimport {\n  CompletionItemKind,\n  CompletionList,\n  DiagnosticSeverity,\n} from \"vscode-languageserver-protocol\";\nimport {\n  Diagnostic,\n  Connection,\n  TextDocumentSyncKind,\n  Range,\n  CompletionParams,\n} from \"vscode-languageserver/browser\";\n\nimport { handleFSSync, syncFiles } from \"./../features/workspace\";\nimport { TextDocument } from \"vscode-languageserver-textdocument\";\nimport {\n  readdirSync,\n  // @ts-expect-error\n  normalizePath,\n  realpathSync,\n} from \"fs\";\nimport {\n  debounce,\n  throttle,\n  throttleAsync,\n  transformHoverResultToHtml,\n} from \"../utils\";\nimport { VFS } from \"src/vfs\";\nimport { getTextInRange } from \"./documents/utils\";\nimport { WritableDocument } from \"./documents/WritableDocument\";\nimport { basename, dirname, join } from \"path\";\nimport { FileType } from \"vscode-html-languageservice\";\nimport { URI } from \"vscode-uri\";\nimport { getSemanticTokenLegends } from \"./lib/semanticTokenLegend\";\n\nexport function scriptElementKindToCompletionItemKind(\n  kind: ts.ScriptElementKind\n): CompletionItemKind {\n  switch (kind) {\n    case ts.ScriptElementKind.primitiveType:\n    case ts.ScriptElementKind.keyword:\n      return CompletionItemKind.Keyword;\n    case ts.ScriptElementKind.constElement:\n      return CompletionItemKind.Constant;\n    case ts.ScriptElementKind.letElement:\n    case ts.ScriptElementKind.variableElement:\n    case ts.ScriptElementKind.localVariableElement:\n    case ts.ScriptElementKind.alias:\n      return CompletionItemKind.Variable;\n    case ts.ScriptElementKind.memberVariableElement:\n    case ts.ScriptElementKind.memberGetAccessorElement:\n    case ts.ScriptElementKind.memberSetAccessorElement:\n      return CompletionItemKind.Field;\n    case ts.ScriptElementKind.functionElement:\n      return CompletionItemKind.Function;\n    case ts.ScriptElementKind.memberFunctionElement:\n    case ts.ScriptElementKind.constructSignatureElement:\n    case ts.ScriptElementKind.callSignatureElement:\n    case ts.ScriptElementKind.indexSignatureElement:\n      return CompletionItemKind.Method;\n    case ts.ScriptElementKind.enumElement:\n      return CompletionItemKind.Enum;\n    case ts.ScriptElementKind.moduleElement:\n    case ts.ScriptElementKind.externalModuleName:\n      return CompletionItemKind.Module;\n    case ts.ScriptElementKind.classElement:\n    case ts.ScriptElementKind.typeElement:\n      return CompletionItemKind.Class;\n    case ts.ScriptElementKind.interfaceElement:\n      return CompletionItemKind.Interface;\n    case ts.ScriptElementKind.warning:\n    case ts.ScriptElementKind.scriptElement:\n      return CompletionItemKind.File;\n    case ts.ScriptElementKind.directory:\n      return CompletionItemKind.Folder;\n    case ts.ScriptElementKind.string:\n      return CompletionItemKind.Constant;\n  }\n  return CompletionItemKind.Property;\n}\n\nfunction displayPartsToString(\n  displayParts: ts.SymbolDisplayPart[] | undefined\n): string {\n  if (displayParts) {\n    return displayParts.map((displayPart) => displayPart.text).join(\"\");\n  }\n  return \"\";\n}\n\nfunction tagToString(tag: ts.JSDocTagInfo): string {\n  let tagLabel = `*@${tag.name}*`;\n  if (tag.name === \"param\" && tag.text) {\n    const [paramName, ...rest] = tag.text;\n    tagLabel += `\\`${paramName.text}\\``;\n    if (rest.length > 0) tagLabel += ` — ${rest.map((r) => r.text).join(\" \")}`;\n  } else if (Array.isArray(tag.text)) {\n    tagLabel += ` — ${tag.text.map((r) => r.text).join(\" \")}`;\n  } else if (tag.text) {\n    tagLabel += ` — ${tag.text}`;\n  }\n  return tagLabel;\n}\nfunction _textSpanToRange(model: TextDocument, span: ts.TextSpan): Range {\n  let p1 = model.positionAt(span.start);\n  let p2 = model.positionAt(span.start + span.length);\n  return { start: p1, end: p2 };\n}\n\nclass Document extends WritableDocument {\n  constructor(\n    private readonly _uri: string,\n    public languageId: string,\n    public version: number,\n    public content: string\n  ) {\n    super();\n  }\n\n  public get uri(): string {\n    return this._uri;\n  }\n\n  public getFilePath(): string {\n    return this.uri.replace(\"file:///\", \"/\");\n  }\n\n  public getText(range?: Range): string {\n    return range ? getTextInRange(range, this.content) : this.content;\n  }\n\n  public getURL(): string {\n    return new URL(this.uri).toString();\n  }\n\n  public setText(text: string): void {\n    this.content = text;\n  }\n}\n\nlet currentDir = \"/\";\n\nconst matchFiles: (\n  path: string,\n  extensions: readonly string[] | undefined,\n  excludes: readonly string[] | undefined,\n  includes: readonly string[] | undefined,\n  useCaseSensitiveFileNames: boolean,\n  currentDirectory: string,\n  depth: number | undefined,\n  getFileSystemEntries: (path: string) => {\n    files: readonly string[];\n    directories: readonly string[];\n  },\n  realpath: (path: string) => string\n) => string[] = (ts as any).matchFiles;\n\n// from: https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/web/webServer.ts#L491\nfunction getAccessibleFileSystemEntries(path: string): {\n  files: readonly string[];\n  directories: readonly string[];\n} {\n  const uri = path;\n  let entries: [string, FileType][] = [];\n  const files: string[] = [];\n  const directories: string[] = [];\n  try {\n    entries = VFS.readDirectoryRaw(uri);\n  } catch (_e) {\n    try {\n      entries = VFS.readDirectoryRaw(\n        URI.file(join(uri, \"node-modules\")).toString()\n      );\n    } catch (_e) {}\n  }\n  for (const [entry, type] of entries) {\n    // This is necessary because on some file system node fails to exclude\n    // '.' and '..'. See https://github.com/nodejs/node/issues/4002\n    if (entry === \".\" || entry === \"..\") {\n      continue;\n    }\n\n    if (type === FileType.File) {\n      files.push(entry);\n    } else if (type === FileType.Directory) {\n      directories.push(entry);\n    }\n  }\n  files.sort();\n  directories.sort();\n  return { files, directories };\n}\nexport const createServer = ({ connection }: { connection: Connection }) => {\n  const docs: Record<string, WritableDocument> = {};\n\n  const createLanguageService = () => {\n    var fileVersions = new Map();\n\n    let projectVersion = 0;\n\n    function getScriptSnapshot(fileName) {\n      var contents = VFS.readFile(fileName, \"utf-8\");\n\n      if (contents) {\n        return ts.ScriptSnapshot.fromString(contents.toString());\n      }\n\n      return;\n    }\n\n    const getCompilerOptions = () => {\n      return ts.parseJsonConfigFileContent(\n        ts.readConfigFile(\"/tsconfig.json\", ts.sys.readFile).config,\n        ts.sys,\n        \"/\",\n        {\n          allowJs: true,\n          baseUrl: \".\",\n          allowNonTsExtensions: true,\n          target: ts.ScriptTarget.Latest,\n          noEmit: true,\n          declaration: false,\n          skipLibCheck: true,\n        },\n        \"/tsconfig.json\"\n      );\n    };\n\n    const compilerOptions: ts.CompilerOptions = {\n      ...getCompilerOptions().options,\n      allowJs: true,\n      baseUrl: \".\",\n      allowNonTsExtensions: true,\n      target: ts.ScriptTarget.Latest,\n      noEmit: true,\n      declaration: false,\n      skipLibCheck: true,\n    };\n\n    const compilerHost = ts.createCompilerHost(compilerOptions);\n\n    // const originalEmit = compilerHost(compilerHost);\n    const host: ts.LanguageServiceHost = {\n      log: (message) => console.debug(`[ts] ${message}`),\n      getCompilationSettings: () => getCompilerOptions().options,\n      getScriptFileNames() {\n        return Array.from(readdirSync(\"/\")).filter(\n          (key) =>\n            !key.includes(\"/node_modules/\") &&\n            (key.endsWith(\".ts\") ||\n              key.endsWith(\".tsx\") ||\n              key.endsWith(\".js\") ||\n              key.endsWith(\".jsx\") ||\n              key.endsWith(\".js\"))\n        );\n      },\n      getCompilerHost() {\n        return compilerHost;\n      },\n      writeFile: (filename, content) => {\n        ts.sys.writeFile(filename, content, false);\n        VFS.writeFile(filename, content);\n        compilerHost.writeFile(filename, content, false);\n      },\n      realpath: realpathSync,\n      getScriptVersion: function getScriptVersion(fileName) {\n        return fileVersions.get(fileName) || \"0\";\n      },\n\n      getScriptSnapshot,\n      getCurrentDirectory() {\n        return currentDir;\n      },\n      getDefaultLibFileName: ts.getDefaultLibFilePath,\n      fileExists: VFS.fileExists.bind(VFS),\n      readFile: (path, encoding) => VFS.readFile(path, encoding).toString(),\n      readDirectory(\n        path: string,\n        extensions?: readonly string[],\n        excludes?: readonly string[],\n        includes?: readonly string[],\n        depth?: number\n      ): string[] {\n        return compilerHost.readDirectory(\n          path,\n          extensions,\n          excludes,\n          includes,\n          depth\n        );\n      },\n      getDirectories: (...args) => {\n        return VFS.getDirectories(...args).filter(\n          (v) => !v.includes(\"/node_modules/\")\n        );\n      },\n      useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames,\n      getScriptKind: function getSnapshot(fileName: string) {\n        const ext = fileName.split(\".\").pop();\n        switch (ext.toLowerCase()) {\n          case ts.Extension.Js:\n            return ts.ScriptKind.JS;\n          case ts.Extension.Jsx:\n            return ts.ScriptKind.JSX;\n          case ts.Extension.Ts:\n            return ts.ScriptKind.TS;\n          case ts.Extension.Tsx:\n            return ts.ScriptKind.TSX;\n          case ts.Extension.Json:\n            return ts.ScriptKind.JSON;\n          default:\n            return ts.ScriptKind.Unknown;\n        }\n      },\n      resolveModuleNameLiterals: compilerHost.resolveModuleNameLiterals,\n\n      getProjectVersion: () => projectVersion.toString(),\n      getNewLine: () => ts.sys.newLine,\n    };\n\n    let languageService = ts.createLanguageService(host);\n    type LanguageServiceWithFileMethods = ts.LanguageService & {\n      updateFile: (fileName: string, content: string) => void;\n      createFile: (fileName: string, content: string) => void;\n    };\n    const mod: LanguageServiceWithFileMethods = {\n      ...languageService,\n      updateFile: function (\n        this: LanguageServiceWithFileMethods,\n        fileName: string,\n        content: string\n      ) {\n        return this.createFile(fileName, content);\n      },\n      createFile: function (\n        this: LanguageServiceWithFileMethods,\n        fileName: string,\n        content: string\n      ) {\n        fileVersions.set(fileName, (fileVersions.get(fileName) || 0) + 1);\n        VFS.writeFile(fileName, content);\n        compilerHost.writeFile(fileName, content, false);\n        projectVersion++;\n        debounce(() => syncFiles(fileName, content), 100);\n      },\n    };\n\n    return mod;\n  };\n\n  let env = createLanguageService();\n  handleFSSync((name, contents) => {\n    env.updateFile(normalizePath(name), contents);\n  });\n  globalThis.localStorage = globalThis.localStorage ?? ({} as Storage);\n\n  connection.onInitialize(() => {\n    return {\n      capabilities: {\n        textDocumentSync: {\n          openClose: true,\n          change: TextDocumentSyncKind.Full,\n          save: {\n            includeText: false,\n          },\n        },\n        workspaceSymbolProvider: {\n          workDoneProgress: true,\n        },\n        documentFormattingProvider: true,\n        completionProvider: {\n          resolveProvider: true,\n          completionItem: { labelDetailsSupport: true },\n          workDoneProgress: true,\n          triggerCharacters: [\n            \".\",\n            '\"',\n            \"'\",\n            \"`\",\n            \"/\",\n            \"@\",\n            \"<\",\n\n            // Emmet\n            \">\",\n            \"*\",\n            \"#\",\n            \"$\",\n            \"+\",\n            \"^\",\n            \"(\",\n            \"[\",\n            \"@\",\n            \"-\",\n            // No whitespace because\n            // it makes for weird/too many completions\n            // of other completion providers\n\n            // Svelte\n            \":\",\n            \"|\",\n          ],\n        },\n        signatureHelpProvider: {\n          triggerCharacters: [\"(\", \",\", \"<\"],\n          retriggerCharacters: [\")\"],\n        },\n        semanticTokensProvider: {\n          legend: getSemanticTokenLegends(),\n          range: true,\n          full: true,\n        },\n\n        referencesProvider: true,\n        selectionRangeProvider: true,\n        linkedEditingRangeProvider: true,\n        implementationProvider: true,\n        typeDefinitionProvider: true,\n        inlayHintProvider: true,\n        callHierarchyProvider: true,\n        hoverProvider: true,\n      },\n    };\n  });\n\n  // await createTsSystem({}, \"\", new Map<string, string>([]));\n  function updateFile(filePath: string, content: string) {\n    env.updateFile(filePath, content);\n  }\n\n  function autocompleteAtPosition(\n    pos: number,\n    filePath: string,\n    params: CompletionParams\n  ): CompletionList {\n    const result = env.getCompletionsAtPosition(filePath, pos, {\n      includeCompletionsForImportStatements: true,\n      includeCompletionsForModuleExports: true,\n      triggerKind: params.context.triggerKind,\n      includeCompletionsWithInsertText: true,\n      includePackageJsonAutoImports: \"on\",\n      includeCompletionsWithSnippetText: true,\n      useLabelDetailsInCompletionEntries: true,\n      allowIncompleteCompletions: false,\n    });\n    return {\n      items: result.entries\n        .filter((v) => v !== null && v !== undefined)\n        .map((entry) => {\n          return {\n            ...entry,\n            label: entry.name,\n            kind: scriptElementKindToCompletionItemKind(entry.kind),\n          };\n        }),\n      isIncomplete: result.isIncomplete,\n    };\n  }\n\n  function infoAtPosition(pos: number, filePath: string) {\n    const result = env.getQuickInfoAtPosition(filePath, pos);\n\n    return result;\n  }\n\n  function lintSystem(filePath: string) {\n    if (!env) return;\n\n    const SyntacticDiagnostics = env.getSyntacticDiagnostics(filePath);\n    const SemanticDiagnostic = env.getSemanticDiagnostics(filePath);\n    const SuggestionDiagnostics = env.getSuggestionDiagnostics(filePath);\n\n    const diagnostics: Diagnostic[] = ([] as ts.DiagnosticWithLocation[])\n      .concat(SyntacticDiagnostics, SemanticDiagnostic, SuggestionDiagnostics)\n      .reduce((acc, result) => {\n        type ErrorMessageObj = {\n          messageText: string;\n          next?: ErrorMessageObj[];\n        };\n        type ErrorMessage = ErrorMessageObj | string;\n\n        const messagesErrors = (message: ErrorMessage): string[] => {\n          if (typeof message === \"string\") return [message];\n\n          const messageList: string[] = [];\n          const getMessage = (loop: ErrorMessageObj) => {\n            messageList.push(loop.messageText);\n\n            if (loop.next) {\n              loop.next.forEach((item) => {\n                getMessage(item);\n              });\n            }\n          };\n\n          getMessage(message);\n\n          return messageList;\n        };\n\n        const severity: Diagnostic[\"severity\"][] = [\n          DiagnosticSeverity.Warning,\n          DiagnosticSeverity.Error,\n          DiagnosticSeverity.Information,\n          DiagnosticSeverity.Hint,\n        ];\n\n        messagesErrors(result.messageText).forEach((message) => {\n          acc.push({\n            range: _textSpanToRange(docs[`file://${filePath}`], result),\n            message,\n            source: result?.source || \"ts\",\n            severity: severity[result.category],\n            // actions: codeActions as any as Diagnostic[\"actions\"]\n          });\n        });\n\n        return acc;\n      }, [] as Diagnostic[]);\n\n    // return { items: diagnostics };\n    connection.sendDiagnostics({ uri: `file://${filePath}`, diagnostics });\n  }\n\n  connection.onDidOpenTextDocument((params) => {\n    const filePath = normalizePath(params.textDocument.uri);\n    const content = params.textDocument.text;\n\n    if (!docs[params.textDocument.uri]) {\n      docs[params.textDocument.uri] = new Document(\n        params.textDocument.uri,\n        params.textDocument.languageId,\n        params.textDocument.version,\n        content\n      );\n    }\n    currentDir = dirname(filePath);\n    updateFile(filePath, content);\n    lintSystem(filePath);\n    syncFiles(filePath, content);\n  });\n\n  connection.onDidChangeTextDocument((params) => {\n    const filePath = normalizePath(params.textDocument.uri);\n    const content = params.contentChanges[0].text;\n    docs[params.textDocument.uri].update(content, 0, content.length);\n    docs[params.textDocument.uri].version++;\n\n    if (currentDir !== dirname(filePath)) {\n      currentDir = dirname(filePath);\n    }\n    updateFile(filePath, content);\n    lintSystem(filePath);\n\n    syncFiles(filePath, content);\n  });\n\n  connection.onCompletion((params) => {\n    const filePath = normalizePath(params.textDocument.uri);\n\n    return autocompleteAtPosition(\n      docs[params.textDocument.uri].offsetAt(params.position),\n      filePath,\n      params\n    );\n  });\n\n  connection.onHover(\n    throttleAsync(async ({ textDocument, position }) => {\n      const filePath = normalizePath(textDocument.uri);\n\n      const sourceDoc = docs[textDocument.uri];\n\n      const info = infoAtPosition(sourceDoc.offsetAt(position), filePath);\n\n      if (!info) {\n        return;\n      }\n\n      const documentation = displayPartsToString(info.documentation);\n      const tags = info.tags\n        ? info.tags.map((tag) => tagToString(tag)).join(\"  \\n\\n\")\n        : \"\";\n      const contents = displayPartsToString(info.displayParts);\n      return transformHoverResultToHtml({\n        range: _textSpanToRange(docs[textDocument.uri], info.textSpan),\n        contents: [\n          {\n            language: \"typescript\",\n            value: \"```typescript\\n\" + contents + \"\\n```\\n\",\n          },\n          {\n            language: \"typescript\",\n\n            value: documentation + (tags ? \"\\n\\n\" + tags : \"\"),\n          },\n        ],\n      });\n    }, 1000)\n  );\n\n  connection.listen();\n};\n","import { Position, Range } from \"vscode-languageserver-protocol\";\n\nconst clamp = (num: number, min: number, max: number) =>\n\tMath.min(Math.max(num, min), max);\n\n/**\n * Get the line and character based on the offset\n * @param offset The index of the position\n * @param text The text for which the position should be retrived\n * @param lineOffsets number Array with offsets for each line. Computed if not given\n */\nexport function positionAt(\n\toffset: number,\n\ttext: string,\n\tlineOffsets = getLineOffsets(text),\n): Position {\n\toffset = clamp(offset, 0, text.length);\n\n\tlet low = 0;\n\tlet high = lineOffsets.length;\n\tif (high === 0) {\n\t\treturn Position.create(0, offset);\n\t}\n\n\twhile (low <= high) {\n\t\tconst mid = Math.floor((low + high) / 2);\n\t\tconst lineOffset = lineOffsets[mid];\n\n\t\tif (lineOffset === offset) {\n\t\t\treturn Position.create(mid, 0);\n\t\t} else if (offset > lineOffset) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\n\t// low is the least x for which the line offset is larger than the current offset\n\t// or array.length if no line offset is larger than the current offset\n\tconst line = low - 1;\n\treturn Position.create(line, offset - lineOffsets[line]);\n}\n\n/**\n * Get the offset of the line and character position\n * @param position Line and character position\n * @param text The text for which the offset should be retrived\n * @param lineOffsets number Array with offsets for each line. Computed if not given\n */\nexport function offsetAt(\n\tposition: Position,\n\ttext: string,\n\tlineOffsets = getLineOffsets(text),\n): number {\n\tif (position.line >= lineOffsets.length) {\n\t\treturn text.length;\n\t} else if (position.line < 0) {\n\t\treturn 0;\n\t}\n\n\tconst lineOffset = lineOffsets[position.line];\n\tconst nextLineOffset =\n\t\tposition.line + 1 < lineOffsets.length\n\t\t\t? lineOffsets[position.line + 1]\n\t\t\t: text.length;\n\n\treturn clamp(nextLineOffset, lineOffset, lineOffset + position.character);\n}\n\nexport function getLineOffsets(text: string) {\n\tconst lineOffsets = [];\n\tlet isLineStart = true;\n\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (isLineStart) {\n\t\t\tlineOffsets.push(i);\n\t\t\tisLineStart = false;\n\t\t}\n\t\tconst ch = text.charAt(i);\n\t\tisLineStart = ch === \"\\r\" || ch === \"\\n\";\n\t\tif (ch === \"\\r\" && i + 1 < text.length && text.charAt(i + 1) === \"\\n\") {\n\t\t\ti++;\n\t\t}\n\t}\n\n\tif (isLineStart && text.length > 0) {\n\t\tlineOffsets.push(text.length);\n\t}\n\n\treturn lineOffsets;\n}\n\nexport function getTextInRange(range: Range, text: string) {\n\treturn text.substring(offsetAt(range.start, text), offsetAt(range.end, text));\n}\n","import {\n\tPosition,\n\tRange,\n\tTextDocument,\n} from \"vscode-languageserver-textdocument\";\nimport { getLineOffsets, offsetAt, positionAt } from \"./utils\";\n\n/**\n * Represents a textual document.\n */\nexport abstract class ReadableDocument implements TextDocument {\n\t/**\n\t * Get the text content of the document\n\t */\n\tabstract getText(range?: Range): string;\n\n\t/**\n\t * Returns the url of the document\n\t */\n\tabstract getURL(): string;\n\n\t/**\n\t * Returns the file path if the url scheme is file\n\t */\n\tabstract getFilePath(): string | null;\n\n\t/**\n\t * Current version of the document.\n\t */\n\tpublic version = 0;\n\n\t/**\n\t * Should be cleared when there's an update to the text\n\t */\n\tprotected lineOffsets?: number[];\n\n\t/**\n\t * Get the length of the document's content\n\t */\n\tgetTextLength(): number {\n\t\treturn this.getText().length;\n\t}\n\n\t/**\n\t * Get the line and character based on the offset\n\t * @param offset The index of the position\n\t */\n\tpositionAt(offset: number): Position {\n\t\treturn positionAt(offset, this.getText(), this.getLineOffsets());\n\t}\n\n\t/**\n\t * Get the index of the line and character position\n\t * @param position Line and character position\n\t */\n\toffsetAt(position: Position): number {\n\t\treturn offsetAt(position, this.getText(), this.getLineOffsets());\n\t}\n\n\tprivate getLineOffsets() {\n\t\tif (!this.lineOffsets) {\n\t\t\tthis.lineOffsets = getLineOffsets(this.getText());\n\t\t}\n\t\treturn this.lineOffsets;\n\t}\n\n\t/**\n\t * Implements TextDocument\n\t */\n\tget uri(): string {\n\t\treturn this.getURL();\n\t}\n\n\tget lineCount(): number {\n\t\treturn this.getText().split(/\\r?\\n/).length;\n\t}\n\n\tabstract languageId: string;\n}\n\n/**\n * Represents a textual document that can be manipulated.\n */\nexport abstract class WritableDocument extends ReadableDocument {\n\t/**\n\t * Set the text content of the document.\n\t * Implementers should set `lineOffsets` to `undefined` here.\n\t * @param text The new text content\n\t */\n\tabstract setText(text: string): void;\n\n\t/**\n\t * Update the text between two positions.\n\t * @param text The new text slice\n\t * @param start Start offset of the new text\n\t * @param end End offset of the new text\n\t */\n\tupdate(text: string, start: number, end: number): void {\n\t\tthis.lineOffsets = undefined;\n\t\tconst content = this.getText();\n\t\tthis.setText(content.slice(0, start) + text + content.slice(end));\n\t}\n}\n","import {\n\tSemanticTokensLegend,\n\tSemanticTokenModifiers,\n\tSemanticTokenTypes,\n} from \"vscode-languageserver/browser\";\n/**\n * extended from https://github.com/microsoft/TypeScript/blob/35c8df04ad959224fad9037e340c1e50f0540a49/src/services/classifier2020.ts#L9\n * so that we don't have to map it into our own legend\n */\nexport const enum TokenType {\n\tclass,\n\tenum,\n\tinterface,\n\tnamespace,\n\ttypeParameter,\n\ttype,\n\tparameter,\n\tvariable,\n\tenumMember,\n\tproperty,\n\tfunction,\n\tmember,\n\n\t// svelte\n\tevent,\n}\n\n/**\n * adopted from https://github.com/microsoft/TypeScript/blob/35c8df04ad959224fad9037e340c1e50f0540a49/src/services/classifier2020.ts#L13\n * so that we don't have to map it into our own legend\n */\nexport const enum TokenModifier {\n\tdeclaration,\n\tstatic,\n\tasync,\n\treadonly,\n\tdefaultLibrary,\n\tlocal,\n}\n\nexport function getSemanticTokenLegends(): SemanticTokensLegend {\n\tconst tokenModifiers: string[] = [];\n\n\t(\n\t\t[\n\t\t\t[TokenModifier.declaration, SemanticTokenModifiers.declaration],\n\t\t\t[TokenModifier.static, SemanticTokenModifiers.static],\n\t\t\t[TokenModifier.async, SemanticTokenModifiers.async],\n\t\t\t[TokenModifier.readonly, SemanticTokenModifiers.readonly],\n\t\t\t[TokenModifier.defaultLibrary, SemanticTokenModifiers.defaultLibrary],\n\t\t\t[TokenModifier.local, \"local\"],\n\t\t] as const\n\t).forEach(([tsModifier, legend]) => (tokenModifiers[tsModifier] = legend));\n\n\tconst tokenTypes: string[] = [];\n\n\t(\n\t\t[\n\t\t\t[TokenType.class, SemanticTokenTypes.class],\n\t\t\t[TokenType.enum, SemanticTokenTypes.enum],\n\t\t\t[TokenType.interface, SemanticTokenTypes.interface],\n\t\t\t[TokenType.namespace, SemanticTokenTypes.namespace],\n\t\t\t[TokenType.typeParameter, SemanticTokenTypes.typeParameter],\n\t\t\t[TokenType.type, SemanticTokenTypes.type],\n\t\t\t[TokenType.parameter, SemanticTokenTypes.parameter],\n\t\t\t[TokenType.variable, SemanticTokenTypes.variable],\n\t\t\t[TokenType.enumMember, SemanticTokenTypes.enumMember],\n\t\t\t[TokenType.property, SemanticTokenTypes.property],\n\t\t\t[TokenType.function, SemanticTokenTypes.function],\n\n\t\t\t// member is renamed to method in vscode codebase to match LSP default\n\t\t\t[TokenType.member, SemanticTokenTypes.method],\n\t\t\t[TokenType.event, SemanticTokenTypes.event],\n\t\t] as const\n\t).forEach(([tokenType, legend]) => (tokenTypes[tokenType] = legend));\n\n\treturn {\n\t\ttokenModifiers,\n\t\ttokenTypes,\n\t};\n}\n"]}