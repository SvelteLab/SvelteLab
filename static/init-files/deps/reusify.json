{"directory":{".coveralls.yml":{"file":{"contents":"repo_token: yIxhFqtaaz5iGVYfie9mODehFYogm8S8L\n"}},".travis.yml":{"file":{"contents":"language: node_js\nsudo: false\n\nnode_js:\n  - 9\n  - 8\n  - 7\n  - 6\n  - 5\n  - 4\n  - 4.0\n  - iojs-v3\n  - iojs-v2\n  - iojs-v1\n  - 0.12\n  - 0.10\n\ncache:\n  directories:\n    - node_modules\n\nafter_script:\n- npm run coverage\n\nnotifications:\n  email:\n    on_success: never\n    on_failure: always\n"}},"benchmarks":{"directory":{"createNoCodeFunction.js":{"file":{"contents":"'use strict'\n\nvar fib = require('./fib')\nvar max = 100000000\nvar start = Date.now()\n\n// create a funcion with the typical error\n// pattern, that delegates the heavy load\n// to something else\nfunction createNoCodeFunction () {\n  /* eslint no-constant-condition: \"off\" */\n  var num = 100\n\n  ;(function () {\n    if (null) {\n      // do nothing\n    } else {\n      fib(num)\n    }\n  })()\n}\n\nfor (var i = 0; i < max; i++) {\n  createNoCodeFunction()\n}\n\nvar time = Date.now() - start\nconsole.log('Total time', time)\nconsole.log('Total iterations', max)\nconsole.log('Iteration/s', max / time * 1000)\n"}},"fib.js":{"file":{"contents":"'use strict'\n\nfunction fib (num) {\n  var fib = []\n\n  fib[0] = 0\n  fib[1] = 1\n  for (var i = 2; i <= num; i++) {\n    fib[i] = fib[i - 2] + fib[i - 1]\n  }\n}\n\nmodule.exports = fib\n"}},"reuseNoCodeFunction.js":{"file":{"contents":"'use strict'\n\nvar reusify = require('../')\nvar fib = require('./fib')\nvar instance = reusify(MyObject)\nvar max = 100000000\nvar start = Date.now()\n\nfunction reuseNoCodeFunction () {\n  var obj = instance.get()\n  obj.num = 100\n  obj.func()\n  obj.num = 0\n  instance.release(obj)\n}\n\nfunction MyObject () {\n  this.next = null\n  var that = this\n  this.num = 0\n  this.func = function () {\n    /* eslint no-constant-condition: \"off\" */\n    if (null) {\n      // do nothing\n    } else {\n      fib(that.num)\n    }\n  }\n}\n\nfor (var i = 0; i < max; i++) {\n  reuseNoCodeFunction()\n}\n\nvar time = Date.now() - start\nconsole.log('Total time', time)\nconsole.log('Total iterations', max)\nconsole.log('Iteration/s', max / time * 1000)\n"}}}},"LICENSE":{"file":{"contents":"The MIT License (MIT)\n\nCopyright (c) 2015 Matteo Collina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"}},"package.json":{"file":{"contents":"{\n  \"name\": \"reusify\",\n  \"version\": \"1.0.4\",\n  \"description\": \"Reuse objects and functions with style\",\n  \"main\": \"reusify.js\",\n  \"scripts\": {\n    \"lint\": \"standard\",\n    \"test\": \"tape test.js | faucet\",\n    \"istanbul\": \"istanbul cover tape test.js\",\n    \"coverage\": \"npm run istanbul; cat coverage/lcov.info | coveralls\"\n  },\n  \"pre-commit\": [\n    \"lint\",\n    \"test\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/mcollina/reusify.git\"\n  },\n  \"keywords\": [\n    \"reuse\",\n    \"object\",\n    \"performance\",\n    \"function\",\n    \"fast\"\n  ],\n  \"author\": \"Matteo Collina <hello@matteocollina.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mcollina/reusify/issues\"\n  },\n  \"homepage\": \"https://github.com/mcollina/reusify#readme\",\n  \"engines\": {\n    \"node\": \">=0.10.0\",\n    \"iojs\": \">=1.0.0\"\n  },\n  \"devDependencies\": {\n    \"coveralls\": \"^2.13.3\",\n    \"faucet\": \"0.0.1\",\n    \"istanbul\": \"^0.4.5\",\n    \"pre-commit\": \"^1.2.2\",\n    \"standard\": \"^10.0.3\",\n    \"tape\": \"^4.8.0\"\n  }\n}\n"}},"README.md":{"file":{"contents":"# reusify\n\n[![npm version][npm-badge]][npm-url]\n[![Build Status][travis-badge]][travis-url]\n[![Coverage Status][coveralls-badge]][coveralls-url]\n\nReuse your objects and functions for maximum speed. This technique will\nmake any function run ~10% faster. You call your functions a\nlot, and it adds up quickly in hot code paths.\n\n```\n$ node benchmarks/createNoCodeFunction.js\nTotal time 53133\nTotal iterations 100000000\nIteration/s 1882069.5236482036\n\n$ node benchmarks/reuseNoCodeFunction.js\nTotal time 50617\nTotal iterations 100000000\nIteration/s 1975620.838848608\n```\n\nThe above benchmark uses fibonacci to simulate a real high-cpu load.\nThe actual numbers might differ for your use case, but the difference\nshould not.\n\nThe benchmark was taken using Node v6.10.0.\n\nThis library was extracted from\n[fastparallel](http://npm.im/fastparallel).\n\n## Example\n\n```js\nvar reusify = require('reusify')\nvar fib = require('reusify/benchmarks/fib')\nvar instance = reusify(MyObject)\n\n// get an object from the cache,\n// or creates a new one when cache is empty\nvar obj = instance.get()\n\n// set the state\nobj.num = 100\nobj.func()\n\n// reset the state.\n// if the state contains any external object\n// do not use delete operator (it is slow)\n// prefer set them to null\nobj.num = 0\n\n// store an object in the cache\ninstance.release(obj)\n\nfunction MyObject () {\n  // you need to define this property\n  // so V8 can compile MyObject into an\n  // hidden class\n  this.next = null\n  this.num = 0\n\n  var that = this\n\n  // this function is never reallocated,\n  // so it can be optimized by V8\n  this.func = function () {\n    if (null) {\n      // do nothing\n    } else {\n      // calculates fibonacci\n      fib(that.num)\n    }\n  }\n}\n```\n\nThe above example was intended for synchronous code, let's see async:\n```js\nvar reusify = require('reusify')\nvar instance = reusify(MyObject)\n\nfor (var i = 0; i < 100; i++) {\n  getData(i, console.log)\n}\n\nfunction getData (value, cb) {\n  var obj = instance.get()\n\n  obj.value = value\n  obj.cb = cb\n  obj.run()\n}\n\nfunction MyObject () {\n  this.next = null\n  this.value = null\n\n  var that = this\n\n  this.run = function () {\n    asyncOperation(that.value, that.handle)\n  }\n\n  this.handle = function (err, result) {\n    that.cb(err, result)\n    that.value = null\n    that.cb = null\n    instance.release(that)\n  }\n}\n```\n\nAlso note how in the above examples, the code, that consumes an istance of `MyObject`,\nreset the state to initial condition, just before storing it in the cache.\nThat's needed so that every subsequent request for an instance from the cache,\ncould get a clean instance.\n\n## Why\n\nIt is faster because V8 doesn't have to collect all the functions you\ncreate. On a short-lived benchmark, it is as fast as creating the\nnested function, but on a longer time frame it creates less\npressure on the garbage collector.\n\n## Other examples\nIf you want to see some complex example, checkout [middie](https://github.com/fastify/middie) and [steed](https://github.com/mcollina/steed).\n\n## Acknowledgements\n\nThanks to [Trevor Norris](https://github.com/trevnorris) for\ngetting me down the rabbit hole of performance, and thanks to [Mathias\nBuss](http://github.com/mafintosh) for suggesting me to share this\ntrick.\n\n## License\n\nMIT\n\n[npm-badge]: https://badge.fury.io/js/reusify.svg\n[npm-url]: https://badge.fury.io/js/reusify\n[travis-badge]: https://api.travis-ci.org/mcollina/reusify.svg\n[travis-url]: https://travis-ci.org/mcollina/reusify\n[coveralls-badge]: https://coveralls.io/repos/mcollina/reusify/badge.svg?branch=master&service=github\n[coveralls-url]:  https://coveralls.io/github/mcollina/reusify?branch=master\n"}},"reusify.js":{"file":{"contents":"'use strict'\n\nfunction reusify (Constructor) {\n  var head = new Constructor()\n  var tail = head\n\n  function get () {\n    var current = head\n\n    if (current.next) {\n      head = current.next\n    } else {\n      head = new Constructor()\n      tail = head\n    }\n\n    current.next = null\n\n    return current\n  }\n\n  function release (obj) {\n    tail.next = obj\n    tail = obj\n  }\n\n  return {\n    get: get,\n    release: release\n  }\n}\n\nmodule.exports = reusify\n"}},"test.js":{"file":{"contents":"'use strict'\n\nvar test = require('tape')\nvar reusify = require('./')\n\ntest('reuse objects', function (t) {\n  t.plan(6)\n\n  function MyObject () {\n    t.pass('constructor called')\n    this.next = null\n  }\n\n  var instance = reusify(MyObject)\n  var obj = instance.get()\n\n  t.notEqual(obj, instance.get(), 'two instance created')\n  t.notOk(obj.next, 'next must be null')\n\n  instance.release(obj)\n\n  // the internals keeps a hot copy ready for reuse\n  // putting this one back in the queue\n  instance.release(instance.get())\n\n  // comparing the old one with the one we got\n  // never do this in real code, after release you\n  // should never reuse that instance\n  t.equal(obj, instance.get(), 'instance must be reused')\n})\n\ntest('reuse more than 2 objects', function (t) {\n  function MyObject () {\n    t.pass('constructor called')\n    this.next = null\n  }\n\n  var instance = reusify(MyObject)\n  var obj = instance.get()\n  var obj2 = instance.get()\n  var obj3 = instance.get()\n\n  t.notOk(obj.next, 'next must be null')\n  t.notOk(obj2.next, 'next must be null')\n  t.notOk(obj3.next, 'next must be null')\n\n  t.notEqual(obj, obj2)\n  t.notEqual(obj, obj3)\n  t.notEqual(obj3, obj2)\n\n  instance.release(obj)\n  instance.release(obj2)\n  instance.release(obj3)\n\n  // skip one\n  instance.get()\n\n  var obj4 = instance.get()\n  var obj5 = instance.get()\n  var obj6 = instance.get()\n\n  t.equal(obj4, obj)\n  t.equal(obj5, obj2)\n  t.equal(obj6, obj3)\n  t.end()\n})\n"}}}}