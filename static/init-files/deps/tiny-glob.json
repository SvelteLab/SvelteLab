{"directory":{"index.d.ts":{"file":{"contents":"type Options = {\n  cwd?: string;\n  dot?: boolean;\n  absolute?: boolean;\n  filesOnly?: boolean;\n  flush?: boolean;\n};\n\ntype FilePath = string;\n\ndeclare function glob(str: string, opts?: Options): Promise<FilePath[]>;\n\nexport = glob;\n"}},"index.js":{"file":{"contents":"const fs = require('fs');\nconst globrex = require('globrex');\nconst { promisify } = require('util');\nconst globalyzer = require('globalyzer');\nconst { join, resolve, relative } = require('path');\nconst isHidden = /(^|[\\\\\\/])\\.[^\\\\\\/\\.]/g;\nconst readdir = promisify(fs.readdir);\nconst stat = promisify(fs.stat);\nlet CACHE = {};\n\nasync function walk(output, prefix, lexer, opts, dirname='', level=0) {\n  const rgx = lexer.segments[level];\n  const dir = resolve(opts.cwd, prefix, dirname);\n  const files = await readdir(dir);\n  const { dot, filesOnly } = opts;\n\n  let i=0, len=files.length, file;\n  let fullpath, relpath, stats, isMatch;\n\n  for (; i < len; i++) {\n    fullpath = join(dir, file=files[i]);\n    relpath = dirname ? join(dirname, file) : file;\n    if (!dot && isHidden.test(relpath)) continue;\n    isMatch = lexer.regex.test(relpath);\n\n    if ((stats=CACHE[relpath]) === void 0) {\n      CACHE[relpath] = stats = fs.lstatSync(fullpath);\n    }\n\n    if (!stats.isDirectory()) {\n      isMatch && output.push(relative(opts.cwd, fullpath));\n      continue;\n    }\n\n    if (rgx && !rgx.test(file)) continue;\n    !filesOnly && isMatch && output.push(join(prefix, relpath));\n\n    await walk(output, prefix, lexer, opts, relpath, rgx && rgx.toString() !== lexer.globstar && level + 1);\n  }\n}\n\n/**\n * Find files using bash-like globbing.\n * All paths are normalized compared to node-glob.\n * @param {String} str Glob string\n * @param {String} [options.cwd='.'] Current working directory\n * @param {Boolean} [options.dot=false] Include dotfile matches\n * @param {Boolean} [options.absolute=false] Return absolute paths\n * @param {Boolean} [options.filesOnly=false] Do not include folders if true\n * @param {Boolean} [options.flush=false] Reset cache object\n * @returns {Array} array containing matching files\n */\nmodule.exports = async function (str, opts={}) {\n  if (!str) return [];\n\n  let glob = globalyzer(str);\n\n  opts.cwd = opts.cwd || '.';\n\n  if (!glob.isGlob) {\n    try {\n      let resolved = resolve(opts.cwd, str);\n      let dirent = await stat(resolved);\n      if (opts.filesOnly && !dirent.isFile()) return [];\n\n      return opts.absolute ? [resolved] : [str];\n    } catch (err) {\n      if (err.code != 'ENOENT') throw err;\n\n      return [];\n    }\n  }\n\n  if (opts.flush) CACHE = {};\n\n  let matches = [];\n  const { path } = globrex(glob.glob, { filepath:true, globstar:true, extended:true });\n\n  path.globstar = path.globstar.toString();\n  await walk(matches, glob.base, path, opts, '.', 0);\n\n  return opts.absolute ? matches.map(x => resolve(opts.cwd, x)) : matches;\n};\n"}},"license":{"file":{"contents":"MIT License\n\nCopyright (c) 2018 Terkel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"}},"package.json":{"file":{"contents":"{\n  \"name\": \"tiny-glob\",\n  \"version\": \"0.2.9\",\n  \"description\": \"Tiny and extremely fast globbing\",\n  \"repository\": \"terkelg/tiny-glob\",\n  \"types\": \"index.d.ts\",\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"Terkel Gjervig\",\n    \"email\": \"terkel@terkel.com\",\n    \"url\": \"https://terkel.com\"\n  },\n  \"files\": [\n    \"*.js\",\n    \"*.d.ts\"\n  ],\n  \"scripts\": {\n    \"bench\": \"node bench\",\n    \"test\": \"tape test/*.js | tap-spec\"\n  },\n  \"dependencies\": {\n    \"globalyzer\": \"0.1.0\",\n    \"globrex\": \"^0.1.2\"\n  },\n  \"devDependencies\": {\n    \"tap-spec\": \"^5.0.0\",\n    \"tape\": \"^5.0.1\"\n  },\n  \"keywords\": [\n    \"glob\",\n    \"globbing\",\n    \"patterns\",\n    \"wildcard\",\n    \"pattern-matching\",\n    \"expansion\"\n  ]\n}\n"}},"readme.md":{"file":{"contents":"<p align=\"center\">\n  <img src=\"https://github.com/terkelg/tiny-glob/raw/master/tiny-glob.png\" alt=\"Tiny Glob\" width=\"450\" />\n</p>\n\n<h1 align=\"center\">tiny glob</h1>\n\n<p align=\"center\">\n  <a href=\"https://npmjs.org/package/tiny-glob\">\n    <img src=\"https://img.shields.io/npm/v/tiny-glob.svg\" alt=\"version\" />\n  </a>\n  <a href=\"https://github.com/terkelg/tiny-glob/actions\">\n    <img src=\"https://github.com/terkelg/tiny-glob/actions/workflows/ci.yml/badge.svg\" alt=\"CI\" />\n  </a>\n  <a href=\"https://npmjs.org/package/tiny-glob\">\n    <img src=\"https://img.shields.io/npm/dm/tiny-glob.svg\" alt=\"downloads\" />\n  </a>\n  <a href=\"https://packagephobia.now.sh/result?p=tiny-glob\">\n    <img src=\"https://packagephobia.now.sh/badge?p=tiny-glob\" alt=\"install size\" />\n  </a>\n</p>\n\n<p align=\"center\"><b>Tiny and extremely fast library to match files and folders using glob patterns.</b></p>\n\n<br />\n\n\n\"Globs\" is the common name for a specific type of pattern used to match files and folders. It's the patterns you type when you do stuff like `ls *.js` in your shell or put `src/*` in a `.gitignore` file. When used to match filenames, it's sometimes called a \"wildcard\".\n\n\n## Install\n\n```\nnpm install tiny-glob\n```\n\n\n## Core Features\n\n- 🔥 **extremely fast:** ~350% faster than [node-glob](https://github.com/isaacs/node-glob) and ~230% faster than [fast-glob](https://github.com/mrmlnc/fast-glob)\n- 💪 **powerful:** supports advanced globbing patterns (`ExtGlob`)\n- 📦 **tiny**: only ~45 LOC with 2 small dependencies\n- 👫 **friendly**: simple and easy to use api\n- 🎭 **cross-platform**: supports both unix and windows\n\n\n## Usage\n\n```js\nconst glob = require('tiny-glob');\n\n(async function(){\n    let files = await glob('src/*/*.{js,md}');\n    // => [ ... ] array of matching files\n})();\n```\n\n\n## API\n\n\n### glob(str, options)\n\nType: `function`<br>\nReturns: `Array`\n\nReturn array of matching files and folders\nThis function is `async` and returns a promise.\n\n#### str\n\nType: `String`\n\nThe glob pattern to match against.\n> **OBS**: Please only use forward-slashes in glob expressions. Even on [windows](#windows)\n\n#### options.cwd\n\nType: `String`<br>\nDefault: `'.'`\n\nChange default working directory.\n\n#### options.dot\n\nType: `Boolean`<br>\nDefault: `false`\n\nAllow patterns to match filenames or directories that begin with a period (`.`).\n\n#### options.absolute\n\nType: `Boolean`<br>\nDefault: `false`\n\nReturn matches as absolute paths.\n\n#### options.filesOnly\n\nType: `Boolean`<br>\nDefault: `false`\n\nSkip directories and return matched files only.\n\n#### options.flush\n\nType: `Boolean`<br>\nDefault: `false`\n\nFlush the internal cache object.\n\n\n## Windows\n\nThough Windows may use `/`, `\\`, or `\\\\` as path separators, you can **only** use forward-slashes (`/`) when specifying glob expressions. Any back-slashes (`\\`) will be interpreted as escape characters instead of path separators.\n\nThis is common across many glob-based modules; see [`node-glob`](https://github.com/isaacs/node-glob#windows) for corroboration.\n\n\n## Benchmarks\n\n```\nglob x 13,405 ops/sec ±1.80% (85 runs sampled)\nfast-glob x 25,745 ops/sec ±2.76% (59 runs sampled)\ntiny-glob x 102,658 ops/sec ±0.79% (91 runs sampled)\nFastest is tiny-glob\n┌───────────┬─────────────────────────┬─────────────┬────────────────┐\n│ Name      │ Mean time               │ Ops/sec     │ Diff           │\n├───────────┼─────────────────────────┼─────────────┼────────────────┤\n│ glob      │ 0.00007459990597268128  │ 13,404.843  │ N/A            │\n├───────────┼─────────────────────────┼─────────────┼────────────────┤\n│ fast-glob │ 0.000038842529587611705 │ 25,744.976  │ 92.06% faster  │\n├───────────┼─────────────────────────┼─────────────┼────────────────┤\n│ tiny-glob │ 0.00000974110141018254  │ 102,657.796 │ 298.75% faster │\n└───────────┴─────────────────────────┴─────────────┴────────────────┘\n```\n\n## Advanced Globbing\n\nLearn more about advanced globbing\n\n - [Greg's Wiki](https://mywiki.wooledge.org/glob)\n - [Bash Extended Globbing](https://www.linuxjournal.com/content/bash-extended-globbing)\n\n\n## License\n\nMIT © [Terkel Gjervig](https://terkel.com)\n"}},"sync.d.ts":{"file":{"contents":"type Options = {\n  cwd?: string;\n  dot?: boolean;\n  absolute?: boolean;\n  filesOnly?: boolean;\n  flush?: boolean;\n};\n\ntype FilePath = string;\n\ndeclare function glob(str: string, opts?: Options): FilePath[];\n\nexport = glob;\n"}},"sync.js":{"file":{"contents":"const fs = require('fs');\nconst globrex = require('globrex');\nconst globalyzer = require('globalyzer');\nconst { join, resolve, relative } = require('path');\nconst isHidden = /(^|[\\\\\\/])\\.[^\\\\\\/\\.]/g;\n\nlet CACHE = {};\n\nfunction walk(output, prefix, lexer, opts, dirname='', level=0) {\n  const rgx = lexer.segments[level];\n  const dir = resolve(opts.cwd, prefix, dirname);\n  const files = fs.readdirSync(dir);\n  const { dot, filesOnly } = opts;\n\n  let i=0, len=files.length, file;\n  let fullpath, relpath, stats, isMatch;\n\n  for (; i < len; i++) {\n    fullpath = join(dir, file=files[i]);\n    relpath = dirname ? join(dirname, file) : file;\n    if (!dot && isHidden.test(relpath)) continue;\n    isMatch = lexer.regex.test(relpath);\n\n    if ((stats=CACHE[relpath]) === void 0) {\n      CACHE[relpath] = stats = fs.lstatSync(fullpath);\n    }\n\n    if (!stats.isDirectory()) {\n      isMatch && output.push(relative(opts.cwd, fullpath));\n      continue;\n    }\n\n    if (rgx && !rgx.test(file)) continue;\n    !filesOnly && isMatch && output.push(join(prefix, relpath));\n\n    walk(output, prefix, lexer, opts, relpath, rgx && rgx.toString() !== lexer.globstar && level + 1);\n  }\n}\n\n/**\n * Find files using bash-like globbing.\n * All paths are normalized compared to node-glob.\n * @param {String} str Glob string\n * @param {String} [options.cwd='.'] Current working directory\n * @param {Boolean} [options.dot=false] Include dotfile matches\n * @param {Boolean} [options.absolute=false] Return absolute paths\n * @param {Boolean} [options.filesOnly=false] Do not include folders if true\n * @param {Boolean} [options.flush=false] Reset cache object\n * @returns {Array} array containing matching files\n */\nmodule.exports = function (str, opts={}) {\n  if (!str) return [];\n\n  let glob = globalyzer(str);\n\n  opts.cwd = opts.cwd || '.';\n\n  if (!glob.isGlob) {\n    try {\n      let resolved = resolve(opts.cwd, str);\n      let dirent = fs.statSync(resolved);\n      if (opts.filesOnly && !dirent.isFile()) return [];\n\n      return opts.absolute ? [resolved] : [str];\n    } catch (err) {\n      if (err.code != 'ENOENT') throw err;\n\n      return [];\n    }\n  }\n\n  if (opts.flush) CACHE = {};\n\n  let matches = [];\n  const { path } = globrex(glob.glob, { filepath:true, globstar:true, extended:true });\n\n  path.globstar = path.globstar.toString();\n  walk(matches, glob.base, path, opts, '.', 0);\n\n  return opts.absolute ? matches.map(x => resolve(opts.cwd, x)) : matches;\n};\n"}}}}