{"directory":{"index.d.ts":{"file":{"contents":"declare namespace callsites {\n\tinterface CallSite {\n\t\t/**\n\t\tReturns the value of `this`.\n\t\t*/\n\t\tgetThis(): unknown | undefined;\n\n\t\t/**\n\t\tReturns the type of `this` as a string. This is the name of the function stored in the constructor field of `this`, if available, otherwise the object's `[[Class]]` internal property.\n\t\t*/\n\t\tgetTypeName(): string | null;\n\n\t\t/**\n\t\tReturns the current function.\n\t\t*/\n\t\tgetFunction(): Function | undefined;\n\n\t\t/**\n\t\tReturns the name of the current function, typically its `name` property. If a name property is not available an attempt will be made to try to infer a name from the function's context.\n\t\t*/\n\t\tgetFunctionName(): string | null;\n\n\t\t/**\n\t\tReturns the name of the property of `this` or one of its prototypes that holds the current function.\n\t\t*/\n\t\tgetMethodName(): string | undefined;\n\n\t\t/**\n\t\tReturns the name of the script if this function was defined in a script.\n\t\t*/\n\t\tgetFileName(): string | null;\n\n\t\t/**\n\t\tReturns the current line number if this function was defined in a script.\n\t\t*/\n\t\tgetLineNumber(): number | null;\n\n\t\t/**\n\t\tReturns the current column number if this function was defined in a script.\n\t\t*/\n\t\tgetColumnNumber(): number | null;\n\n\t\t/**\n\t\tReturns a string representing the location where `eval` was called if this function was created using a call to `eval`.\n\t\t*/\n\t\tgetEvalOrigin(): string | undefined;\n\n\t\t/**\n\t\tReturns `true` if this is a top-level invocation, that is, if it's a global object.\n\t\t*/\n\t\tisToplevel(): boolean;\n\n\t\t/**\n\t\tReturns `true` if this call takes place in code defined by a call to `eval`.\n\t\t*/\n\t\tisEval(): boolean;\n\n\t\t/**\n\t\tReturns `true` if this call is in native V8 code.\n\t\t*/\n\t\tisNative(): boolean;\n\n\t\t/**\n\t\tReturns `true` if this is a constructor call.\n\t\t*/\n\t\tisConstructor(): boolean;\n\t}\n}\n\ndeclare const callsites: {\n\t/**\n\tGet callsites from the V8 stack trace API.\n\n\t@returns An array of `CallSite` objects.\n\n\t@example\n\t```\n\timport callsites = require('callsites');\n\n\tfunction unicorn() {\n\t\tconsole.log(callsites()[0].getFileName());\n\t\t//=> '/Users/sindresorhus/dev/callsites/test.js'\n\t}\n\n\tunicorn();\n\t```\n\t*/\n\t(): callsites.CallSite[];\n\n\t// TODO: Remove this for the next major release, refactor the whole definition to:\n\t// declare function callsites(): callsites.CallSite[];\n\t// export = callsites;\n\tdefault: typeof callsites;\n};\n\nexport = callsites;\n"}},"index.js":{"file":{"contents":"'use strict';\n\nconst callsites = () => {\n\tconst _prepareStackTrace = Error.prepareStackTrace;\n\tError.prepareStackTrace = (_, stack) => stack;\n\tconst stack = new Error().stack.slice(1);\n\tError.prepareStackTrace = _prepareStackTrace;\n\treturn stack;\n};\n\nmodule.exports = callsites;\n// TODO: Remove this for the next major release\nmodule.exports.default = callsites;\n"}},"license":{"file":{"contents":"MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"}},"package.json":{"file":{"contents":"{\n\t\"name\": \"callsites\",\n\t\"version\": \"3.1.0\",\n\t\"description\": \"Get callsites from the V8 stack trace API\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/callsites\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"sindresorhus.com\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=6\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"xo && ava && tsd\"\n\t},\n\t\"files\": [\n\t\t\"index.js\",\n\t\t\"index.d.ts\"\n\t],\n\t\"keywords\": [\n\t\t\"stacktrace\",\n\t\t\"v8\",\n\t\t\"callsite\",\n\t\t\"callsites\",\n\t\t\"stack\",\n\t\t\"trace\",\n\t\t\"function\",\n\t\t\"file\",\n\t\t\"line\",\n\t\t\"debug\"\n\t],\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.4.1\",\n\t\t\"tsd\": \"^0.7.2\",\n\t\t\"xo\": \"^0.24.0\"\n\t}\n}\n"}},"readme.md":{"file":{"contents":"# callsites [![Build Status](https://travis-ci.org/sindresorhus/callsites.svg?branch=master)](https://travis-ci.org/sindresorhus/callsites)\n\n> Get callsites from the [V8 stack trace API](https://v8.dev/docs/stack-trace-api)\n\n\n## Install\n\n```\n$ npm install callsites\n```\n\n\n## Usage\n\n```js\nconst callsites = require('callsites');\n\nfunction unicorn() {\n\tconsole.log(callsites()[0].getFileName());\n\t//=> '/Users/sindresorhus/dev/callsites/test.js'\n}\n\nunicorn();\n```\n\n\n## API\n\nReturns an array of callsite objects with the following methods:\n\n- `getThis`: returns the value of `this`.\n- `getTypeName`: returns the type of `this` as a string. This is the name of the function stored in the constructor field of `this`, if available, otherwise the object's `[[Class]]` internal property.\n- `getFunction`: returns the current function.\n- `getFunctionName`: returns the name of the current function, typically its `name` property. If a name property is not available an attempt will be made to try to infer a name from the function's context.\n- `getMethodName`: returns the name of the property of `this` or one of its prototypes that holds the current function.\n- `getFileName`: if this function was defined in a script returns the name of the script.\n- `getLineNumber`: if this function was defined in a script returns the current line number.\n- `getColumnNumber`: if this function was defined in a script returns the current column number\n- `getEvalOrigin`: if this function was created using a call to `eval` returns a string representing the location where `eval` was called.\n- `isToplevel`: is this a top-level invocation, that is, is this the global object?\n- `isEval`: does this call take place in code defined by a call to `eval`?\n- `isNative`: is this call in native V8 code?\n- `isConstructor`: is this a constructor call?\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n"}}}}