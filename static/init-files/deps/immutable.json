{"directory":{"dist":{"directory":{"immutable.d.ts":{"file":{"contents":"/**\n * Immutable data encourages pure functions (data-in, data-out) and lends itself\n * to much simpler application development and enabling techniques from\n * functional programming such as lazy evaluation.\n *\n * While designed to bring these powerful functional concepts to JavaScript, it\n * presents an Object-Oriented API familiar to Javascript engineers and closely\n * mirroring that of Array, Map, and Set. It is easy and efficient to convert to\n * and from plain Javascript types.\n *\n * ## How to read these docs\n *\n * In order to better explain what kinds of values the Immutable.js API expects\n * and produces, this documentation is presented in a statically typed dialect of\n * JavaScript (like [Flow][] or [TypeScript][]). You *don't need* to use these\n * type checking tools in order to use Immutable.js, however becoming familiar\n * with their syntax will help you get a deeper understanding of this API.\n *\n * **A few examples and how to read them.**\n *\n * All methods describe the kinds of data they accept and the kinds of data\n * they return. For example a function which accepts two numbers and returns\n * a number would look like this:\n *\n * ```js\n * sum(first: number, second: number): number\n * ```\n *\n * Sometimes, methods can accept different kinds of data or return different\n * kinds of data, and this is described with a *type variable*, which is\n * typically in all-caps. For example, a function which always returns the same\n * kind of data it was provided would look like this:\n *\n * ```js\n * identity<T>(value: T): T\n * ```\n *\n * Type variables are defined with classes and referred to in methods. For\n * example, a class that holds onto a value for you might look like this:\n *\n * ```js\n * class Box<T> {\n *   constructor(value: T)\n *   getValue(): T\n * }\n * ```\n *\n * In order to manipulate Immutable data, methods that we're used to affecting\n * a Collection instead return a new Collection of the same type. The type\n * `this` refers to the same kind of class. For example, a List which returns\n * new Lists when you `push` a value onto it might look like:\n *\n * ```js\n * class List<T> {\n *   push(value: T): this\n * }\n * ```\n *\n * Many methods in Immutable.js accept values which implement the JavaScript\n * [Iterable][] protocol, and might appear like `Iterable<string>` for something\n * which represents sequence of strings. Typically in JavaScript we use plain\n * Arrays (`[]`) when an Iterable is expected, but also all of the Immutable.js\n * collections are iterable themselves!\n *\n * For example, to get a value deep within a structure of data, we might use\n * `getIn` which expects an `Iterable` path:\n *\n * ```\n * getIn(path: Iterable<string | number>): unknown\n * ```\n *\n * To use this method, we could pass an array: `data.getIn([ \"key\", 2 ])`.\n *\n *\n * Note: All examples are presented in the modern [ES2015][] version of\n * JavaScript. Use tools like Babel to support older browsers.\n *\n * For example:\n *\n * ```js\n * // ES2015\n * const mappedFoo = foo.map(x => x * x);\n * // ES5\n * var mappedFoo = foo.map(function (x) { return x * x; });\n * ```\n *\n * [ES2015]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\n * [TypeScript]: https://www.typescriptlang.org/\n * [Flow]: https://flowtype.org/\n * [Iterable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n */\n\ndeclare namespace Immutable {\n  /**\n   * @ignore\n   *\n   * Used to convert deeply all immutable types to a plain TS type.\n   * Using `unknown` on object instead of recursive call as we have a circular reference issue\n   */\n  export type DeepCopy<T> = T extends Record<infer R>\n    ? // convert Record to DeepCopy plain JS object\n      {\n        [key in keyof R]: R[key] extends object ? unknown : R[key];\n      }\n    : T extends Collection.Keyed<infer KeyedKey, infer V>\n    ? // convert KeyedCollection to DeepCopy plain JS object\n      {\n        [key in KeyedKey extends string | number | symbol\n          ? KeyedKey\n          : string]: V extends object ? unknown : V;\n      }\n    : // convert IndexedCollection or Immutable.Set to DeepCopy plain JS array\n    T extends Collection<infer _, infer V>\n    ? Array<V extends object ? unknown : V>\n    : T extends string | number // Iterable scalar types : should be kept as is\n    ? T\n    : T extends Iterable<infer V> // Iterable are converted to plain JS array\n    ? Array<V extends object ? unknown : V>\n    : T extends object // plain JS object are converted deeply\n    ? {\n        [ObjectKey in keyof T]: T[ObjectKey] extends object\n          ? unknown\n          : T[ObjectKey];\n      }\n    : // other case : should be kept as is\n      T;\n\n  /**\n   * Lists are ordered indexed dense collections, much like a JavaScript\n   * Array.\n   *\n   * Lists are immutable and fully persistent with O(log32 N) gets and sets,\n   * and O(1) push and pop.\n   *\n   * Lists implement Deque, with efficient addition and removal from both the\n   * end (`push`, `pop`) and beginning (`unshift`, `shift`).\n   *\n   * Unlike a JavaScript Array, there is no distinction between an\n   * \"unset\" index and an index set to `undefined`. `List#forEach` visits all\n   * indices from 0 to size, regardless of whether they were explicitly defined.\n   */\n  namespace List {\n    /**\n     * True if the provided value is a List\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable');\n     * List.isList([]); // false\n     * List.isList(List()); // true\n     * ```\n     */\n    function isList(maybeList: unknown): maybeList is List<unknown>;\n\n    /**\n     * Creates a new List containing `values`.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable');\n     * List.of(1, 2, 3, 4)\n     * // List [ 1, 2, 3, 4 ]\n     * ```\n     *\n     * Note: Values are not altered or converted in any way.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable');\n     * List.of({x:1}, 2, [3], 4)\n     * // List [ { x: 1 }, 2, [ 3 ], 4 ]\n     * ```\n     */\n    function of<T>(...values: Array<T>): List<T>;\n  }\n\n  /**\n   * Create a new immutable List containing the values of the provided\n   * collection-like.\n   *\n   * Note: `List` is a factory function and not a class, and does not use the\n   * `new` keyword during construction.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { List, Set } = require('immutable')\n   *\n   * const emptyList = List()\n   * // List []\n   *\n   * const plainArray = [ 1, 2, 3, 4 ]\n   * const listFromPlainArray = List(plainArray)\n   * // List [ 1, 2, 3, 4 ]\n   *\n   * const plainSet = Set([ 1, 2, 3, 4 ])\n   * const listFromPlainSet = List(plainSet)\n   * // List [ 1, 2, 3, 4 ]\n   *\n   * const arrayIterator = plainArray[Symbol.iterator]()\n   * const listFromCollectionArray = List(arrayIterator)\n   * // List [ 1, 2, 3, 4 ]\n   *\n   * listFromPlainArray.equals(listFromCollectionArray) // true\n   * listFromPlainSet.equals(listFromCollectionArray) // true\n   * listFromPlainSet.equals(listFromPlainArray) // true\n   * ```\n   */\n  function List<T>(collection?: Iterable<T> | ArrayLike<T>): List<T>;\n\n  interface List<T> extends Collection.Indexed<T> {\n    /**\n     * The number of items in this List.\n     */\n    readonly size: number;\n\n    // Persistent changes\n\n    /**\n     * Returns a new List which includes `value` at `index`. If `index` already\n     * exists in this List, it will be replaced.\n     *\n     * `index` may be a negative number, which indexes back from the end of the\n     * List. `v.set(-1, \"value\")` sets the last item in the List.\n     *\n     * If `index` larger than `size`, the returned List's `size` will be large\n     * enough to include the `index`.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * const originalList = List([ 0 ]);\n     * // List [ 0 ]\n     * originalList.set(1, 1);\n     * // List [ 0, 1 ]\n     * originalList.set(0, 'overwritten');\n     * // List [ \"overwritten\" ]\n     * originalList.set(2, 2);\n     * // List [ 0, undefined, 2 ]\n     *\n     * List().set(50000, 'value').size;\n     * // 50001\n     * ```\n     *\n     * Note: `set` can be used in `withMutations`.\n     */\n    set(index: number, value: T): List<T>;\n\n    /**\n     * Returns a new List which excludes this `index` and with a size 1 less\n     * than this List. Values at indices above `index` are shifted down by 1 to\n     * fill the position.\n     *\n     * This is synonymous with `list.splice(index, 1)`.\n     *\n     * `index` may be a negative number, which indexes back from the end of the\n     * List. `v.delete(-1)` deletes the last item in the List.\n     *\n     * Note: `delete` cannot be safely used in IE8\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * List([ 0, 1, 2, 3, 4 ]).delete(0);\n     * // List [ 1, 2, 3, 4 ]\n     * ```\n     *\n     * Since `delete()` re-indexes values, it produces a complete copy, which\n     * has `O(N)` complexity.\n     *\n     * Note: `delete` *cannot* be used in `withMutations`.\n     *\n     * @alias remove\n     */\n    delete(index: number): List<T>;\n    remove(index: number): List<T>;\n\n    /**\n     * Returns a new List with `value` at `index` with a size 1 more than this\n     * List. Values at indices above `index` are shifted over by 1.\n     *\n     * This is synonymous with `list.splice(index, 0, value)`.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * List([ 0, 1, 2, 3, 4 ]).insert(6, 5)\n     * // List [ 0, 1, 2, 3, 4, 5 ]\n     * ```\n     *\n     * Since `insert()` re-indexes values, it produces a complete copy, which\n     * has `O(N)` complexity.\n     *\n     * Note: `insert` *cannot* be used in `withMutations`.\n     */\n    insert(index: number, value: T): List<T>;\n\n    /**\n     * Returns a new List with 0 size and no values in constant time.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * List([ 1, 2, 3, 4 ]).clear()\n     * // List []\n     * ```\n     *\n     * Note: `clear` can be used in `withMutations`.\n     */\n    clear(): List<T>;\n\n    /**\n     * Returns a new List with the provided `values` appended, starting at this\n     * List's `size`.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * List([ 1, 2, 3, 4 ]).push(5)\n     * // List [ 1, 2, 3, 4, 5 ]\n     * ```\n     *\n     * Note: `push` can be used in `withMutations`.\n     */\n    push(...values: Array<T>): List<T>;\n\n    /**\n     * Returns a new List with a size ones less than this List, excluding\n     * the last index in this List.\n     *\n     * Note: this differs from `Array#pop` because it returns a new\n     * List rather than the removed value. Use `last()` to get the last value\n     * in this List.\n     *\n     * ```js\n     * List([ 1, 2, 3, 4 ]).pop()\n     * // List[ 1, 2, 3 ]\n     * ```\n     *\n     * Note: `pop` can be used in `withMutations`.\n     */\n    pop(): List<T>;\n\n    /**\n     * Returns a new List with the provided `values` prepended, shifting other\n     * values ahead to higher indices.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * List([ 2, 3, 4]).unshift(1);\n     * // List [ 1, 2, 3, 4 ]\n     * ```\n     *\n     * Note: `unshift` can be used in `withMutations`.\n     */\n    unshift(...values: Array<T>): List<T>;\n\n    /**\n     * Returns a new List with a size ones less than this List, excluding\n     * the first index in this List, shifting all other values to a lower index.\n     *\n     * Note: this differs from `Array#shift` because it returns a new\n     * List rather than the removed value. Use `first()` to get the first\n     * value in this List.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * List([ 0, 1, 2, 3, 4 ]).shift();\n     * // List [ 1, 2, 3, 4 ]\n     * ```\n     *\n     * Note: `shift` can be used in `withMutations`.\n     */\n    shift(): List<T>;\n\n    /**\n     * Returns a new List with an updated value at `index` with the return\n     * value of calling `updater` with the existing value, or `notSetValue` if\n     * `index` was not set. If called with a single argument, `updater` is\n     * called with the List itself.\n     *\n     * `index` may be a negative number, which indexes back from the end of the\n     * List. `v.update(-1)` updates the last item in the List.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * const list = List([ 'a', 'b', 'c' ])\n     * const result = list.update(2, val => val.toUpperCase())\n     * // List [ \"a\", \"b\", \"C\" ]\n     * ```\n     *\n     * This can be very useful as a way to \"chain\" a normal function into a\n     * sequence of methods. RxJS calls this \"let\" and lodash calls it \"thru\".\n     *\n     * For example, to sum a List after mapping and filtering:\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * function sum(collection) {\n     *   return collection.reduce((sum, x) => sum + x, 0)\n     * }\n     *\n     * List([ 1, 2, 3 ])\n     *   .map(x => x + 1)\n     *   .filter(x => x % 2 === 0)\n     *   .update(sum)\n     * // 6\n     * ```\n     *\n     * Note: `update(index)` can be used in `withMutations`.\n     *\n     * @see `Map#update`\n     */\n    update(index: number, notSetValue: T, updater: (value: T) => T): this;\n    update(index: number, updater: (value: T | undefined) => T): this;\n    update<R>(updater: (value: this) => R): R;\n\n    /**\n     * Returns a new List with size `size`. If `size` is less than this\n     * List's size, the new List will exclude values at the higher indices.\n     * If `size` is greater than this List's size, the new List will have\n     * undefined values for the newly available indices.\n     *\n     * When building a new List and the final size is known up front, `setSize`\n     * used in conjunction with `withMutations` may result in the more\n     * performant construction.\n     */\n    setSize(size: number): List<T>;\n\n    // Deep persistent changes\n\n    /**\n     * Returns a new List having set `value` at this `keyPath`. If any keys in\n     * `keyPath` do not exist, a new immutable Map will be created at that key.\n     *\n     * Index numbers are used as keys to determine the path to follow in\n     * the List.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable')\n     * const list = List([ 0, 1, 2, List([ 3, 4 ])])\n     * list.setIn([3, 0], 999);\n     * // List [ 0, 1, 2, List [ 999, 4 ] ]\n     * ```\n     *\n     * Plain JavaScript Object or Arrays may be nested within an Immutable.js\n     * Collection, and setIn() can update those values as well, treating them\n     * immutably by creating new copies of those values with the changes applied.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable')\n     * const list = List([ 0, 1, 2, { plain: 'object' }])\n     * list.setIn([3, 'plain'], 'value');\n     * // List([ 0, 1, 2, { plain: 'value' }])\n     * ```\n     *\n     * Note: `setIn` can be used in `withMutations`.\n     */\n    setIn(keyPath: Iterable<unknown>, value: unknown): this;\n\n    /**\n     * Returns a new List having removed the value at this `keyPath`. If any\n     * keys in `keyPath` do not exist, no change will occur.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable')\n     * const list = List([ 0, 1, 2, List([ 3, 4 ])])\n     * list.deleteIn([3, 0]);\n     * // List [ 0, 1, 2, List [ 4 ] ]\n     * ```\n     *\n     * Plain JavaScript Object or Arrays may be nested within an Immutable.js\n     * Collection, and removeIn() can update those values as well, treating them\n     * immutably by creating new copies of those values with the changes applied.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable')\n     * const list = List([ 0, 1, 2, { plain: 'object' }])\n     * list.removeIn([3, 'plain']);\n     * // List([ 0, 1, 2, {}])\n     * ```\n     *\n     * Note: `deleteIn` *cannot* be safely used in `withMutations`.\n     *\n     * @alias removeIn\n     */\n    deleteIn(keyPath: Iterable<unknown>): this;\n    removeIn(keyPath: Iterable<unknown>): this;\n\n    /**\n     * Note: `updateIn` can be used in `withMutations`.\n     *\n     * @see `Map#updateIn`\n     */\n    updateIn(\n      keyPath: Iterable<unknown>,\n      notSetValue: unknown,\n      updater: (value: unknown) => unknown\n    ): this;\n    updateIn(\n      keyPath: Iterable<unknown>,\n      updater: (value: unknown) => unknown\n    ): this;\n\n    /**\n     * Note: `mergeIn` can be used in `withMutations`.\n     *\n     * @see `Map#mergeIn`\n     */\n    mergeIn(keyPath: Iterable<unknown>, ...collections: Array<unknown>): this;\n\n    /**\n     * Note: `mergeDeepIn` can be used in `withMutations`.\n     *\n     * @see `Map#mergeDeepIn`\n     */\n    mergeDeepIn(\n      keyPath: Iterable<unknown>,\n      ...collections: Array<unknown>\n    ): this;\n\n    // Transient changes\n\n    /**\n     * Note: Not all methods can be safely used on a mutable collection or within\n     * `withMutations`! Check the documentation for each method to see if it\n     * allows being used in `withMutations`.\n     *\n     * @see `Map#withMutations`\n     */\n    withMutations(mutator: (mutable: this) => unknown): this;\n\n    /**\n     * An alternative API for withMutations()\n     *\n     * Note: Not all methods can be safely used on a mutable collection or within\n     * `withMutations`! Check the documentation for each method to see if it\n     * allows being used in `withMutations`.\n     *\n     * @see `Map#asMutable`\n     */\n    asMutable(): this;\n\n    /**\n     * @see `Map#wasAltered`\n     */\n    wasAltered(): boolean;\n\n    /**\n     * @see `Map#asImmutable`\n     */\n    asImmutable(): this;\n\n    // Sequence algorithms\n\n    /**\n     * Returns a new List with other values or collections concatenated to this one.\n     *\n     * Note: `concat` can be used in `withMutations`.\n     *\n     * @alias merge\n     */\n    concat<C>(...valuesOrCollections: Array<Iterable<C> | C>): List<T | C>;\n    merge<C>(...collections: Array<Iterable<C>>): List<T | C>;\n\n    /**\n     * Returns a new List with values passed through a\n     * `mapper` function.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * List([ 1, 2 ]).map(x => 10 * x)\n     * // List [ 10, 20 ]\n     * ```\n     */\n    map<M>(\n      mapper: (value: T, key: number, iter: this) => M,\n      context?: unknown\n    ): List<M>;\n\n    /**\n     * Flat-maps the List, returning a new List.\n     *\n     * Similar to `list.map(...).flatten(true)`.\n     */\n    flatMap<M>(\n      mapper: (value: T, key: number, iter: this) => Iterable<M>,\n      context?: unknown\n    ): List<M>;\n\n    /**\n     * Returns a new List with only the values for which the `predicate`\n     * function returns true.\n     *\n     * Note: `filter()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filter<F extends T>(\n      predicate: (value: T, index: number, iter: this) => value is F,\n      context?: unknown\n    ): List<F>;\n    filter(\n      predicate: (value: T, index: number, iter: this) => unknown,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new List with the values for which the `predicate`\n     * function returns false and another for which is returns true.\n     */\n    partition<F extends T, C>(\n      predicate: (this: C, value: T, index: number, iter: this) => value is F,\n      context?: C\n    ): [List<T>, List<F>];\n    partition<C>(\n      predicate: (this: C, value: T, index: number, iter: this) => unknown,\n      context?: C\n    ): [this, this];\n\n    /**\n     * Returns a List \"zipped\" with the provided collection.\n     *\n     * Like `zipWith`, but using the default `zipper`: creating an `Array`.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * const a = List([ 1, 2, 3 ]);\n     * const b = List([ 4, 5, 6 ]);\n     * const c = a.zip(b); // List [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\n     * ```\n     */\n    zip<U>(other: Collection<unknown, U>): List<[T, U]>;\n    zip<U, V>(\n      other: Collection<unknown, U>,\n      other2: Collection<unknown, V>\n    ): List<[T, U, V]>;\n    zip(...collections: Array<Collection<unknown, unknown>>): List<unknown>;\n\n    /**\n     * Returns a List \"zipped\" with the provided collections.\n     *\n     * Unlike `zip`, `zipAll` continues zipping until the longest collection is\n     * exhausted. Missing values from shorter collections are filled with `undefined`.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * const a = List([ 1, 2 ]);\n     * const b = List([ 3, 4, 5 ]);\n     * const c = a.zipAll(b); // List [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]\n     * ```\n     *\n     * Note: Since zipAll will return a collection as large as the largest\n     * input, some results may contain undefined values. TypeScript cannot\n     * account for these without cases (as of v2.5).\n     */\n    zipAll<U>(other: Collection<unknown, U>): List<[T, U]>;\n    zipAll<U, V>(\n      other: Collection<unknown, U>,\n      other2: Collection<unknown, V>\n    ): List<[T, U, V]>;\n    zipAll(...collections: Array<Collection<unknown, unknown>>): List<unknown>;\n\n    /**\n     * Returns a List \"zipped\" with the provided collections by using a\n     * custom `zipper` function.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { List } = require('immutable');\" }\n     * -->\n     * ```js\n     * const a = List([ 1, 2, 3 ]);\n     * const b = List([ 4, 5, 6 ]);\n     * const c = a.zipWith((a, b) => a + b, b);\n     * // List [ 5, 7, 9 ]\n     * ```\n     */\n    zipWith<U, Z>(\n      zipper: (value: T, otherValue: U) => Z,\n      otherCollection: Collection<unknown, U>\n    ): List<Z>;\n    zipWith<U, V, Z>(\n      zipper: (value: T, otherValue: U, thirdValue: V) => Z,\n      otherCollection: Collection<unknown, U>,\n      thirdCollection: Collection<unknown, V>\n    ): List<Z>;\n    zipWith<Z>(\n      zipper: (...values: Array<unknown>) => Z,\n      ...collections: Array<Collection<unknown, unknown>>\n    ): List<Z>;\n  }\n\n  /**\n   * Immutable Map is an unordered Collection.Keyed of (key, value) pairs with\n   * `O(log32 N)` gets and `O(log32 N)` persistent sets.\n   *\n   * Iteration order of a Map is undefined, however is stable. Multiple\n   * iterations of the same Map will iterate in the same order.\n   *\n   * Map's keys can be of any type, and use `Immutable.is` to determine key\n   * equality. This allows the use of any value (including NaN) as a key.\n   *\n   * Because `Immutable.is` returns equality based on value semantics, and\n   * Immutable collections are treated as values, any Immutable collection may\n   * be used as a key.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { Map, List } = require('immutable');\n   * Map().set(List([ 1 ]), 'listofone').get(List([ 1 ]));\n   * // 'listofone'\n   * ```\n   *\n   * Any JavaScript object may be used as a key, however strict identity is used\n   * to evaluate key equality. Two similar looking objects will represent two\n   * different keys.\n   *\n   * Implemented by a hash-array mapped trie.\n   */\n  namespace Map {\n    /**\n     * True if the provided value is a Map\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * Map.isMap({}) // false\n     * Map.isMap(Map()) // true\n     * ```\n     */\n    function isMap(maybeMap: unknown): maybeMap is Map<unknown, unknown>;\n\n    /**\n     * Creates a new Map from alternating keys and values\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * Map.of(\n     *   'key', 'value',\n     *   'numerical value', 3,\n     *    0, 'numerical key'\n     * )\n     * // Map { 0: \"numerical key\", \"key\": \"value\", \"numerical value\": 3 }\n     * ```\n     *\n     * @deprecated Use Map([ [ 'k', 'v' ] ]) or Map({ k: 'v' })\n     */\n    function of(...keyValues: Array<unknown>): Map<unknown, unknown>;\n  }\n\n  /**\n   * Creates a new Immutable Map.\n   *\n   * Created with the same key value pairs as the provided Collection.Keyed or\n   * JavaScript Object or expects a Collection of [K, V] tuple entries.\n   *\n   * Note: `Map` is a factory function and not a class, and does not use the\n   * `new` keyword during construction.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { Map } = require('immutable')\n   * Map({ key: \"value\" })\n   * Map([ [ \"key\", \"value\" ] ])\n   * ```\n   *\n   * Keep in mind, when using JS objects to construct Immutable Maps, that\n   * JavaScript Object properties are always strings, even if written in a\n   * quote-less shorthand, while Immutable Maps accept keys of any type.\n   *\n   * <!-- runkit:activate\n   *      { \"preamble\": \"const { Map } = require('immutable');\" }\n   * -->\n   * ```js\n   * let obj = { 1: \"one\" }\n   * Object.keys(obj) // [ \"1\" ]\n   * assert.equal(obj[\"1\"], obj[1]) // \"one\" === \"one\"\n   *\n   * let map = Map(obj)\n   * assert.notEqual(map.get(\"1\"), map.get(1)) // \"one\" !== undefined\n   * ```\n   *\n   * Property access for JavaScript Objects first converts the key to a string,\n   * but since Immutable Map keys can be of any type the argument to `get()` is\n   * not altered.\n   */\n  function Map<K, V>(collection?: Iterable<[K, V]>): Map<K, V>;\n  function Map<V>(obj: { [key: string]: V }): Map<string, V>;\n  function Map<K extends string | symbol, V>(obj: { [P in K]?: V }): Map<K, V>;\n\n  interface Map<K, V> extends Collection.Keyed<K, V> {\n    /**\n     * The number of entries in this Map.\n     */\n    readonly size: number;\n\n    // Persistent changes\n\n    /**\n     * Returns a new Map also containing the new key, value pair. If an equivalent\n     * key already exists in this Map, it will be replaced.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const originalMap = Map()\n     * const newerMap = originalMap.set('key', 'value')\n     * const newestMap = newerMap.set('key', 'newer value')\n     *\n     * originalMap\n     * // Map {}\n     * newerMap\n     * // Map { \"key\": \"value\" }\n     * newestMap\n     * // Map { \"key\": \"newer value\" }\n     * ```\n     *\n     * Note: `set` can be used in `withMutations`.\n     */\n    set(key: K, value: V): this;\n\n    /**\n     * Returns a new Map which excludes this `key`.\n     *\n     * Note: `delete` cannot be safely used in IE8, but is provided to mirror\n     * the ES6 collection API.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const originalMap = Map({\n     *   key: 'value',\n     *   otherKey: 'other value'\n     * })\n     * // Map { \"key\": \"value\", \"otherKey\": \"other value\" }\n     * originalMap.delete('otherKey')\n     * // Map { \"key\": \"value\" }\n     * ```\n     *\n     * Note: `delete` can be used in `withMutations`.\n     *\n     * @alias remove\n     */\n    delete(key: K): this;\n    remove(key: K): this;\n\n    /**\n     * Returns a new Map which excludes the provided `keys`.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const names = Map({ a: \"Aaron\", b: \"Barry\", c: \"Connor\" })\n     * names.deleteAll([ 'a', 'c' ])\n     * // Map { \"b\": \"Barry\" }\n     * ```\n     *\n     * Note: `deleteAll` can be used in `withMutations`.\n     *\n     * @alias removeAll\n     */\n    deleteAll(keys: Iterable<K>): this;\n    removeAll(keys: Iterable<K>): this;\n\n    /**\n     * Returns a new Map containing no keys or values.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * Map({ key: 'value' }).clear()\n     * // Map {}\n     * ```\n     *\n     * Note: `clear` can be used in `withMutations`.\n     */\n    clear(): this;\n\n    /**\n     * Returns a new Map having updated the value at this `key` with the return\n     * value of calling `updater` with the existing value.\n     *\n     * Similar to: `map.set(key, updater(map.get(key)))`.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const aMap = Map({ key: 'value' })\n     * const newMap = aMap.update('key', value => value + value)\n     * // Map { \"key\": \"valuevalue\" }\n     * ```\n     *\n     * This is most commonly used to call methods on collections within a\n     * structure of data. For example, in order to `.push()` onto a nested `List`,\n     * `update` and `push` can be used together:\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map, List } = require('immutable');\" }\n     * -->\n     * ```js\n     * const aMap = Map({ nestedList: List([ 1, 2, 3 ]) })\n     * const newMap = aMap.update('nestedList', list => list.push(4))\n     * // Map { \"nestedList\": List [ 1, 2, 3, 4 ] }\n     * ```\n     *\n     * When a `notSetValue` is provided, it is provided to the `updater`\n     * function when the value at the key does not exist in the Map.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable');\" }\n     * -->\n     * ```js\n     * const aMap = Map({ key: 'value' })\n     * const newMap = aMap.update('noKey', 'no value', value => value + value)\n     * // Map { \"key\": \"value\", \"noKey\": \"no valueno value\" }\n     * ```\n     *\n     * However, if the `updater` function returns the same value it was called\n     * with, then no change will occur. This is still true if `notSetValue`\n     * is provided.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable');\" }\n     * -->\n     * ```js\n     * const aMap = Map({ apples: 10 })\n     * const newMap = aMap.update('oranges', 0, val => val)\n     * // Map { \"apples\": 10 }\n     * assert.strictEqual(newMap, map);\n     * ```\n     *\n     * For code using ES2015 or later, using `notSetValue` is discourged in\n     * favor of function parameter default values. This helps to avoid any\n     * potential confusion with identify functions as described above.\n     *\n     * The previous example behaves differently when written with default values:\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable');\" }\n     * -->\n     * ```js\n     * const aMap = Map({ apples: 10 })\n     * const newMap = aMap.update('oranges', (val = 0) => val)\n     * // Map { \"apples\": 10, \"oranges\": 0 }\n     * ```\n     *\n     * If no key is provided, then the `updater` function return value is\n     * returned as well.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable');\" }\n     * -->\n     * ```js\n     * const aMap = Map({ key: 'value' })\n     * const result = aMap.update(aMap => aMap.get('key'))\n     * // \"value\"\n     * ```\n     *\n     * This can be very useful as a way to \"chain\" a normal function into a\n     * sequence of methods. RxJS calls this \"let\" and lodash calls it \"thru\".\n     *\n     * For example, to sum the values in a Map\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable');\" }\n     * -->\n     * ```js\n     * function sum(collection) {\n     *   return collection.reduce((sum, x) => sum + x, 0)\n     * }\n     *\n     * Map({ x: 1, y: 2, z: 3 })\n     *   .map(x => x + 1)\n     *   .filter(x => x % 2 === 0)\n     *   .update(sum)\n     * // 6\n     * ```\n     *\n     * Note: `update(key)` can be used in `withMutations`.\n     */\n    update(key: K, notSetValue: V, updater: (value: V) => V): this;\n    update(key: K, updater: (value: V | undefined) => V): this;\n    update<R>(updater: (value: this) => R): R;\n\n    /**\n     * Returns a new Map resulting from merging the provided Collections\n     * (or JS objects) into this Map. In other words, this takes each entry of\n     * each collection and sets it on this Map.\n     *\n     * Note: Values provided to `merge` are shallowly converted before being\n     * merged. No nested values are altered.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const one = Map({ a: 10, b: 20, c: 30 })\n     * const two = Map({ b: 40, a: 50, d: 60 })\n     * one.merge(two) // Map { \"a\": 50, \"b\": 40, \"c\": 30, \"d\": 60 }\n     * two.merge(one) // Map { \"b\": 20, \"a\": 10, \"d\": 60, \"c\": 30 }\n     * ```\n     *\n     * Note: `merge` can be used in `withMutations`.\n     *\n     * @alias concat\n     */\n    merge<KC, VC>(\n      ...collections: Array<Iterable<[KC, VC]>>\n    ): Map<K | KC, V | VC>;\n    merge<C>(\n      ...collections: Array<{ [key: string]: C }>\n    ): Map<K | string, V | C>;\n    concat<KC, VC>(\n      ...collections: Array<Iterable<[KC, VC]>>\n    ): Map<K | KC, V | VC>;\n    concat<C>(\n      ...collections: Array<{ [key: string]: C }>\n    ): Map<K | string, V | C>;\n\n    /**\n     * Like `merge()`, `mergeWith()` returns a new Map resulting from merging\n     * the provided Collections (or JS objects) into this Map, but uses the\n     * `merger` function for dealing with conflicts.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const one = Map({ a: 10, b: 20, c: 30 })\n     * const two = Map({ b: 40, a: 50, d: 60 })\n     * one.mergeWith((oldVal, newVal) => oldVal / newVal, two)\n     * // { \"a\": 0.2, \"b\": 0.5, \"c\": 30, \"d\": 60 }\n     * two.mergeWith((oldVal, newVal) => oldVal / newVal, one)\n     * // { \"b\": 2, \"a\": 5, \"d\": 60, \"c\": 30 }\n     * ```\n     *\n     * Note: `mergeWith` can be used in `withMutations`.\n     */\n    mergeWith(\n      merger: (oldVal: V, newVal: V, key: K) => V,\n      ...collections: Array<Iterable<[K, V]> | { [key: string]: V }>\n    ): this;\n\n    /**\n     * Like `merge()`, but when two compatible collections are encountered with\n     * the same key, it merges them as well, recursing deeply through the nested\n     * data. Two collections are considered to be compatible (and thus will be\n     * merged together) if they both fall into one of three categories: keyed\n     * (e.g., `Map`s, `Record`s, and objects), indexed (e.g., `List`s and\n     * arrays), or set-like (e.g., `Set`s). If they fall into separate\n     * categories, `mergeDeep` will replace the existing collection with the\n     * collection being merged in. This behavior can be customized by using\n     * `mergeDeepWith()`.\n     *\n     * Note: Indexed and set-like collections are merged using\n     * `concat()`/`union()` and therefore do not recurse.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const one = Map({ a: Map({ x: 10, y: 10 }), b: Map({ x: 20, y: 50 }) })\n     * const two = Map({ a: Map({ x: 2 }), b: Map({ y: 5 }), c: Map({ z: 3 }) })\n     * one.mergeDeep(two)\n     * // Map {\n     * //   \"a\": Map { \"x\": 2, \"y\": 10 },\n     * //   \"b\": Map { \"x\": 20, \"y\": 5 },\n     * //   \"c\": Map { \"z\": 3 }\n     * // }\n     * ```\n     *\n     * Note: `mergeDeep` can be used in `withMutations`.\n     */\n    mergeDeep(\n      ...collections: Array<Iterable<[K, V]> | { [key: string]: V }>\n    ): this;\n\n    /**\n     * Like `mergeDeep()`, but when two non-collections or incompatible\n     * collections are encountered at the same key, it uses the `merger`\n     * function to determine the resulting value. Collections are considered\n     * incompatible if they fall into separate categories between keyed,\n     * indexed, and set-like.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const one = Map({ a: Map({ x: 10, y: 10 }), b: Map({ x: 20, y: 50 }) })\n     * const two = Map({ a: Map({ x: 2 }), b: Map({ y: 5 }), c: Map({ z: 3 }) })\n     * one.mergeDeepWith((oldVal, newVal) => oldVal / newVal, two)\n     * // Map {\n     * //   \"a\": Map { \"x\": 5, \"y\": 10 },\n     * //   \"b\": Map { \"x\": 20, \"y\": 10 },\n     * //   \"c\": Map { \"z\": 3 }\n     * // }\n     * ```\n     *\n     * Note: `mergeDeepWith` can be used in `withMutations`.\n     */\n    mergeDeepWith(\n      merger: (oldVal: unknown, newVal: unknown, key: unknown) => unknown,\n      ...collections: Array<Iterable<[K, V]> | { [key: string]: V }>\n    ): this;\n\n    // Deep persistent changes\n\n    /**\n     * Returns a new Map having set `value` at this `keyPath`. If any keys in\n     * `keyPath` do not exist, a new immutable Map will be created at that key.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const originalMap = Map({\n     *   subObject: Map({\n     *     subKey: 'subvalue',\n     *     subSubObject: Map({\n     *       subSubKey: 'subSubValue'\n     *     })\n     *   })\n     * })\n     *\n     * const newMap = originalMap.setIn(['subObject', 'subKey'], 'ha ha!')\n     * // Map {\n     * //   \"subObject\": Map {\n     * //     \"subKey\": \"ha ha!\",\n     * //     \"subSubObject\": Map { \"subSubKey\": \"subSubValue\" }\n     * //   }\n     * // }\n     *\n     * const newerMap = originalMap.setIn(\n     *   ['subObject', 'subSubObject', 'subSubKey'],\n     *   'ha ha ha!'\n     * )\n     * // Map {\n     * //   \"subObject\": Map {\n     * //     \"subKey\": \"subvalue\",\n     * //     \"subSubObject\": Map { \"subSubKey\": \"ha ha ha!\" }\n     * //   }\n     * // }\n     * ```\n     *\n     * Plain JavaScript Object or Arrays may be nested within an Immutable.js\n     * Collection, and setIn() can update those values as well, treating them\n     * immutably by creating new copies of those values with the changes applied.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const originalMap = Map({\n     *   subObject: {\n     *     subKey: 'subvalue',\n     *     subSubObject: {\n     *       subSubKey: 'subSubValue'\n     *     }\n     *   }\n     * })\n     *\n     * originalMap.setIn(['subObject', 'subKey'], 'ha ha!')\n     * // Map {\n     * //   \"subObject\": {\n     * //     subKey: \"ha ha!\",\n     * //     subSubObject: { subSubKey: \"subSubValue\" }\n     * //   }\n     * // }\n     * ```\n     *\n     * If any key in the path exists but cannot be updated (such as a primitive\n     * like number or a custom Object like Date), an error will be thrown.\n     *\n     * Note: `setIn` can be used in `withMutations`.\n     */\n    setIn(keyPath: Iterable<unknown>, value: unknown): this;\n\n    /**\n     * Returns a new Map having removed the value at this `keyPath`. If any keys\n     * in `keyPath` do not exist, no change will occur.\n     *\n     * Note: `deleteIn` can be used in `withMutations`.\n     *\n     * @alias removeIn\n     */\n    deleteIn(keyPath: Iterable<unknown>): this;\n    removeIn(keyPath: Iterable<unknown>): this;\n\n    /**\n     * Returns a new Map having applied the `updater` to the entry found at the\n     * keyPath.\n     *\n     * This is most commonly used to call methods on collections nested within a\n     * structure of data. For example, in order to `.push()` onto a nested `List`,\n     * `updateIn` and `push` can be used together:\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map, List } = require('immutable')\n     * const map = Map({ inMap: Map({ inList: List([ 1, 2, 3 ]) }) })\n     * const newMap = map.updateIn(['inMap', 'inList'], list => list.push(4))\n     * // Map { \"inMap\": Map { \"inList\": List [ 1, 2, 3, 4 ] } }\n     * ```\n     *\n     * If any keys in `keyPath` do not exist, new Immutable `Map`s will\n     * be created at those keys. If the `keyPath` does not already contain a\n     * value, the `updater` function will be called with `notSetValue`, if\n     * provided, otherwise `undefined`.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable')\" }\n     * -->\n     * ```js\n     * const map = Map({ a: Map({ b: Map({ c: 10 }) }) })\n     * const newMap = map.updateIn(['a', 'b', 'c'], val => val * 2)\n     * // Map { \"a\": Map { \"b\": Map { \"c\": 20 } } }\n     * ```\n     *\n     * If the `updater` function returns the same value it was called with, then\n     * no change will occur. This is still true if `notSetValue` is provided.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable')\" }\n     * -->\n     * ```js\n     * const map = Map({ a: Map({ b: Map({ c: 10 }) }) })\n     * const newMap = map.updateIn(['a', 'b', 'x'], 100, val => val)\n     * // Map { \"a\": Map { \"b\": Map { \"c\": 10 } } }\n     * assert.strictEqual(newMap, aMap)\n     * ```\n     *\n     * For code using ES2015 or later, using `notSetValue` is discourged in\n     * favor of function parameter default values. This helps to avoid any\n     * potential confusion with identify functions as described above.\n     *\n     * The previous example behaves differently when written with default values:\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable')\" }\n     * -->\n     * ```js\n     * const map = Map({ a: Map({ b: Map({ c: 10 }) }) })\n     * const newMap = map.updateIn(['a', 'b', 'x'], (val = 100) => val)\n     * // Map { \"a\": Map { \"b\": Map { \"c\": 10, \"x\": 100 } } }\n     * ```\n     *\n     * Plain JavaScript Object or Arrays may be nested within an Immutable.js\n     * Collection, and updateIn() can update those values as well, treating them\n     * immutably by creating new copies of those values with the changes applied.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Map } = require('immutable')\" }\n     * -->\n     * ```js\n     * const map = Map({ a: { b: { c: 10 } } })\n     * const newMap = map.updateIn(['a', 'b', 'c'], val => val * 2)\n     * // Map { \"a\": { b: { c: 20 } } }\n     * ```\n     *\n     * If any key in the path exists but cannot be updated (such as a primitive\n     * like number or a custom Object like Date), an error will be thrown.\n     *\n     * Note: `updateIn` can be used in `withMutations`.\n     */\n    updateIn(\n      keyPath: Iterable<unknown>,\n      notSetValue: unknown,\n      updater: (value: unknown) => unknown\n    ): this;\n    updateIn(\n      keyPath: Iterable<unknown>,\n      updater: (value: unknown) => unknown\n    ): this;\n\n    /**\n     * A combination of `updateIn` and `merge`, returning a new Map, but\n     * performing the merge at a point arrived at by following the keyPath.\n     * In other words, these two lines are equivalent:\n     *\n     * ```js\n     * map.updateIn(['a', 'b', 'c'], abc => abc.merge(y))\n     * map.mergeIn(['a', 'b', 'c'], y)\n     * ```\n     *\n     * Note: `mergeIn` can be used in `withMutations`.\n     */\n    mergeIn(keyPath: Iterable<unknown>, ...collections: Array<unknown>): this;\n\n    /**\n     * A combination of `updateIn` and `mergeDeep`, returning a new Map, but\n     * performing the deep merge at a point arrived at by following the keyPath.\n     * In other words, these two lines are equivalent:\n     *\n     * ```js\n     * map.updateIn(['a', 'b', 'c'], abc => abc.mergeDeep(y))\n     * map.mergeDeepIn(['a', 'b', 'c'], y)\n     * ```\n     *\n     * Note: `mergeDeepIn` can be used in `withMutations`.\n     */\n    mergeDeepIn(\n      keyPath: Iterable<unknown>,\n      ...collections: Array<unknown>\n    ): this;\n\n    // Transient changes\n\n    /**\n     * Every time you call one of the above functions, a new immutable Map is\n     * created. If a pure function calls a number of these to produce a final\n     * return value, then a penalty on performance and memory has been paid by\n     * creating all of the intermediate immutable Maps.\n     *\n     * If you need to apply a series of mutations to produce a new immutable\n     * Map, `withMutations()` creates a temporary mutable copy of the Map which\n     * can apply mutations in a highly performant manner. In fact, this is\n     * exactly how complex mutations like `merge` are done.\n     *\n     * As an example, this results in the creation of 2, not 4, new Maps:\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const map1 = Map()\n     * const map2 = map1.withMutations(map => {\n     *   map.set('a', 1).set('b', 2).set('c', 3)\n     * })\n     * assert.equal(map1.size, 0)\n     * assert.equal(map2.size, 3)\n     * ```\n     *\n     * Note: Not all methods can be used on a mutable collection or within\n     * `withMutations`! Read the documentation for each method to see if it\n     * is safe to use in `withMutations`.\n     */\n    withMutations(mutator: (mutable: this) => unknown): this;\n\n    /**\n     * Another way to avoid creation of intermediate Immutable maps is to create\n     * a mutable copy of this collection. Mutable copies *always* return `this`,\n     * and thus shouldn't be used for equality. Your function should never return\n     * a mutable copy of a collection, only use it internally to create a new\n     * collection.\n     *\n     * If possible, use `withMutations` to work with temporary mutable copies as\n     * it provides an easier to use API and considers many common optimizations.\n     *\n     * Note: if the collection is already mutable, `asMutable` returns itself.\n     *\n     * Note: Not all methods can be used on a mutable collection or within\n     * `withMutations`! Read the documentation for each method to see if it\n     * is safe to use in `withMutations`.\n     *\n     * @see `Map#asImmutable`\n     */\n    asMutable(): this;\n\n    /**\n     * Returns true if this is a mutable copy (see `asMutable()`) and mutative\n     * alterations have been applied.\n     *\n     * @see `Map#asMutable`\n     */\n    wasAltered(): boolean;\n\n    /**\n     * The yin to `asMutable`'s yang. Because it applies to mutable collections,\n     * this operation is *mutable* and may return itself (though may not\n     * return itself, i.e. if the result is an empty collection). Once\n     * performed, the original mutable copy must no longer be mutated since it\n     * may be the immutable result.\n     *\n     * If possible, use `withMutations` to work with temporary mutable copies as\n     * it provides an easier to use API and considers many common optimizations.\n     *\n     * @see `Map#asMutable`\n     */\n    asImmutable(): this;\n\n    // Sequence algorithms\n\n    /**\n     * Returns a new Map with values passed through a\n     * `mapper` function.\n     *\n     *     Map({ a: 1, b: 2 }).map(x => 10 * x)\n     *     // Map { a: 10, b: 20 }\n     */\n    map<M>(\n      mapper: (value: V, key: K, iter: this) => M,\n      context?: unknown\n    ): Map<K, M>;\n\n    /**\n     * @see Collection.Keyed.mapKeys\n     */\n    mapKeys<M>(\n      mapper: (key: K, value: V, iter: this) => M,\n      context?: unknown\n    ): Map<M, V>;\n\n    /**\n     * @see Collection.Keyed.mapEntries\n     */\n    mapEntries<KM, VM>(\n      mapper: (\n        entry: [K, V],\n        index: number,\n        iter: this\n      ) => [KM, VM] | undefined,\n      context?: unknown\n    ): Map<KM, VM>;\n\n    /**\n     * Flat-maps the Map, returning a new Map.\n     *\n     * Similar to `data.map(...).flatten(true)`.\n     */\n    flatMap<KM, VM>(\n      mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n      context?: unknown\n    ): Map<KM, VM>;\n\n    /**\n     * Returns a new Map with only the entries for which the `predicate`\n     * function returns true.\n     *\n     * Note: `filter()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filter<F extends V>(\n      predicate: (value: V, key: K, iter: this) => value is F,\n      context?: unknown\n    ): Map<K, F>;\n    filter(\n      predicate: (value: V, key: K, iter: this) => unknown,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new Map with the values for which the `predicate`\n     * function returns false and another for which is returns true.\n     */\n    partition<F extends V, C>(\n      predicate: (this: C, value: V, key: K, iter: this) => value is F,\n      context?: C\n    ): [Map<K, V>, Map<K, F>];\n    partition<C>(\n      predicate: (this: C, value: V, key: K, iter: this) => unknown,\n      context?: C\n    ): [this, this];\n\n    /**\n     * @see Collection.Keyed.flip\n     */\n    flip(): Map<V, K>;\n  }\n\n  /**\n   * A type of Map that has the additional guarantee that the iteration order of\n   * entries will be the order in which they were set().\n   *\n   * The iteration behavior of OrderedMap is the same as native ES6 Map and\n   * JavaScript Object.\n   *\n   * Note that `OrderedMap` are more expensive than non-ordered `Map` and may\n   * consume more memory. `OrderedMap#set` is amortized O(log32 N), but not\n   * stable.\n   */\n  namespace OrderedMap {\n    /**\n     * True if the provided value is an OrderedMap.\n     */\n    function isOrderedMap(\n      maybeOrderedMap: unknown\n    ): maybeOrderedMap is OrderedMap<unknown, unknown>;\n  }\n\n  /**\n   * Creates a new Immutable OrderedMap.\n   *\n   * Created with the same key value pairs as the provided Collection.Keyed or\n   * JavaScript Object or expects a Collection of [K, V] tuple entries.\n   *\n   * The iteration order of key-value pairs provided to this constructor will\n   * be preserved in the OrderedMap.\n   *\n   *     let newOrderedMap = OrderedMap({key: \"value\"})\n   *     let newOrderedMap = OrderedMap([[\"key\", \"value\"]])\n   *\n   * Note: `OrderedMap` is a factory function and not a class, and does not use\n   * the `new` keyword during construction.\n   */\n  function OrderedMap<K, V>(collection?: Iterable<[K, V]>): OrderedMap<K, V>;\n  function OrderedMap<V>(obj: { [key: string]: V }): OrderedMap<string, V>;\n\n  interface OrderedMap<K, V> extends Map<K, V> {\n    /**\n     * The number of entries in this OrderedMap.\n     */\n    readonly size: number;\n\n    /**\n     * Returns a new OrderedMap also containing the new key, value pair. If an\n     * equivalent key already exists in this OrderedMap, it will be replaced\n     * while maintaining the existing order.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { OrderedMap } = require('immutable')\n     * const originalMap = OrderedMap({a:1, b:1, c:1})\n     * const updatedMap = originalMap.set('b', 2)\n     *\n     * originalMap\n     * // OrderedMap {a: 1, b: 1, c: 1}\n     * updatedMap\n     * // OrderedMap {a: 1, b: 2, c: 1}\n     * ```\n     *\n     * Note: `set` can be used in `withMutations`.\n     */\n    set(key: K, value: V): this;\n\n    /**\n     * Returns a new OrderedMap resulting from merging the provided Collections\n     * (or JS objects) into this OrderedMap. In other words, this takes each\n     * entry of each collection and sets it on this OrderedMap.\n     *\n     * Note: Values provided to `merge` are shallowly converted before being\n     * merged. No nested values are altered.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { OrderedMap } = require('immutable')\n     * const one = OrderedMap({ a: 10, b: 20, c: 30 })\n     * const two = OrderedMap({ b: 40, a: 50, d: 60 })\n     * one.merge(two) // OrderedMap { \"a\": 50, \"b\": 40, \"c\": 30, \"d\": 60 }\n     * two.merge(one) // OrderedMap { \"b\": 20, \"a\": 10, \"d\": 60, \"c\": 30 }\n     * ```\n     *\n     * Note: `merge` can be used in `withMutations`.\n     *\n     * @alias concat\n     */\n    merge<KC, VC>(\n      ...collections: Array<Iterable<[KC, VC]>>\n    ): OrderedMap<K | KC, V | VC>;\n    merge<C>(\n      ...collections: Array<{ [key: string]: C }>\n    ): OrderedMap<K | string, V | C>;\n    concat<KC, VC>(\n      ...collections: Array<Iterable<[KC, VC]>>\n    ): OrderedMap<K | KC, V | VC>;\n    concat<C>(\n      ...collections: Array<{ [key: string]: C }>\n    ): OrderedMap<K | string, V | C>;\n\n    // Sequence algorithms\n\n    /**\n     * Returns a new OrderedMap with values passed through a\n     * `mapper` function.\n     *\n     *     OrderedMap({ a: 1, b: 2 }).map(x => 10 * x)\n     *     // OrderedMap { \"a\": 10, \"b\": 20 }\n     *\n     * Note: `map()` always returns a new instance, even if it produced the same\n     * value at every step.\n     */\n    map<M>(\n      mapper: (value: V, key: K, iter: this) => M,\n      context?: unknown\n    ): OrderedMap<K, M>;\n\n    /**\n     * @see Collection.Keyed.mapKeys\n     */\n    mapKeys<M>(\n      mapper: (key: K, value: V, iter: this) => M,\n      context?: unknown\n    ): OrderedMap<M, V>;\n\n    /**\n     * @see Collection.Keyed.mapEntries\n     */\n    mapEntries<KM, VM>(\n      mapper: (\n        entry: [K, V],\n        index: number,\n        iter: this\n      ) => [KM, VM] | undefined,\n      context?: unknown\n    ): OrderedMap<KM, VM>;\n\n    /**\n     * Flat-maps the OrderedMap, returning a new OrderedMap.\n     *\n     * Similar to `data.map(...).flatten(true)`.\n     */\n    flatMap<KM, VM>(\n      mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n      context?: unknown\n    ): OrderedMap<KM, VM>;\n\n    /**\n     * Returns a new OrderedMap with only the entries for which the `predicate`\n     * function returns true.\n     *\n     * Note: `filter()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filter<F extends V>(\n      predicate: (value: V, key: K, iter: this) => value is F,\n      context?: unknown\n    ): OrderedMap<K, F>;\n    filter(\n      predicate: (value: V, key: K, iter: this) => unknown,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new OrderedMap with the values for which the `predicate`\n     * function returns false and another for which is returns true.\n     */\n    partition<F extends V, C>(\n      predicate: (this: C, value: V, key: K, iter: this) => value is F,\n      context?: C\n    ): [OrderedMap<K, V>, OrderedMap<K, F>];\n    partition<C>(\n      predicate: (this: C, value: V, key: K, iter: this) => unknown,\n      context?: C\n    ): [this, this];\n\n    /**\n     * @see Collection.Keyed.flip\n     */\n    flip(): OrderedMap<V, K>;\n  }\n\n  /**\n   * A Collection of unique values with `O(log32 N)` adds and has.\n   *\n   * When iterating a Set, the entries will be (value, value) pairs. Iteration\n   * order of a Set is undefined, however is stable. Multiple iterations of the\n   * same Set will iterate in the same order.\n   *\n   * Set values, like Map keys, may be of any type. Equality is determined using\n   * `Immutable.is`, enabling Sets to uniquely include other Immutable\n   * collections, custom value types, and NaN.\n   */\n  namespace Set {\n    /**\n     * True if the provided value is a Set\n     */\n    function isSet(maybeSet: unknown): maybeSet is Set<unknown>;\n\n    /**\n     * Creates a new Set containing `values`.\n     */\n    function of<T>(...values: Array<T>): Set<T>;\n\n    /**\n     * `Set.fromKeys()` creates a new immutable Set containing the keys from\n     * this Collection or JavaScript Object.\n     */\n    function fromKeys<T>(iter: Collection<T, unknown>): Set<T>;\n    function fromKeys(obj: { [key: string]: unknown }): Set<string>;\n\n    /**\n     * `Set.intersect()` creates a new immutable Set that is the intersection of\n     * a collection of other sets.\n     *\n     * ```js\n     * const { Set } = require('immutable')\n     * const intersected = Set.intersect([\n     *   Set([ 'a', 'b', 'c' ])\n     *   Set([ 'c', 'a', 't' ])\n     * ])\n     * // Set [ \"a\", \"c\" ]\n     * ```\n     */\n    function intersect<T>(sets: Iterable<Iterable<T>>): Set<T>;\n\n    /**\n     * `Set.union()` creates a new immutable Set that is the union of a\n     * collection of other sets.\n     *\n     * ```js\n     * const { Set } = require('immutable')\n     * const unioned = Set.union([\n     *   Set([ 'a', 'b', 'c' ])\n     *   Set([ 'c', 'a', 't' ])\n     * ])\n     * // Set [ \"a\", \"b\", \"c\", \"t\" ]\n     * ```\n     */\n    function union<T>(sets: Iterable<Iterable<T>>): Set<T>;\n  }\n\n  /**\n   * Create a new immutable Set containing the values of the provided\n   * collection-like.\n   *\n   * Note: `Set` is a factory function and not a class, and does not use the\n   * `new` keyword during construction.\n   */\n  function Set<T>(collection?: Iterable<T> | ArrayLike<T>): Set<T>;\n\n  interface Set<T> extends Collection.Set<T> {\n    /**\n     * The number of items in this Set.\n     */\n    readonly size: number;\n\n    // Persistent changes\n\n    /**\n     * Returns a new Set which also includes this value.\n     *\n     * Note: `add` can be used in `withMutations`.\n     */\n    add(value: T): this;\n\n    /**\n     * Returns a new Set which excludes this value.\n     *\n     * Note: `delete` can be used in `withMutations`.\n     *\n     * Note: `delete` **cannot** be safely used in IE8, use `remove` if\n     * supporting old browsers.\n     *\n     * @alias remove\n     */\n    delete(value: T): this;\n    remove(value: T): this;\n\n    /**\n     * Returns a new Set containing no values.\n     *\n     * Note: `clear` can be used in `withMutations`.\n     */\n    clear(): this;\n\n    /**\n     * Returns a Set including any value from `collections` that does not already\n     * exist in this Set.\n     *\n     * Note: `union` can be used in `withMutations`.\n     * @alias merge\n     * @alias concat\n     */\n    union<C>(...collections: Array<Iterable<C>>): Set<T | C>;\n    merge<C>(...collections: Array<Iterable<C>>): Set<T | C>;\n    concat<C>(...collections: Array<Iterable<C>>): Set<T | C>;\n\n    /**\n     * Returns a Set which has removed any values not also contained\n     * within `collections`.\n     *\n     * Note: `intersect` can be used in `withMutations`.\n     */\n    intersect(...collections: Array<Iterable<T>>): this;\n\n    /**\n     * Returns a Set excluding any values contained within `collections`.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { OrderedSet } = require('immutable')\n     * OrderedSet([ 1, 2, 3 ]).subtract([1, 3])\n     * // OrderedSet [2]\n     * ```\n     *\n     * Note: `subtract` can be used in `withMutations`.\n     */\n    subtract(...collections: Array<Iterable<T>>): this;\n\n    // Transient changes\n\n    /**\n     * Note: Not all methods can be used on a mutable collection or within\n     * `withMutations`! Check the documentation for each method to see if it\n     * mentions being safe to use in `withMutations`.\n     *\n     * @see `Map#withMutations`\n     */\n    withMutations(mutator: (mutable: this) => unknown): this;\n\n    /**\n     * Note: Not all methods can be used on a mutable collection or within\n     * `withMutations`! Check the documentation for each method to see if it\n     * mentions being safe to use in `withMutations`.\n     *\n     * @see `Map#asMutable`\n     */\n    asMutable(): this;\n\n    /**\n     * @see `Map#wasAltered`\n     */\n    wasAltered(): boolean;\n\n    /**\n     * @see `Map#asImmutable`\n     */\n    asImmutable(): this;\n\n    // Sequence algorithms\n\n    /**\n     * Returns a new Set with values passed through a\n     * `mapper` function.\n     *\n     *     Set([1,2]).map(x => 10 * x)\n     *     // Set [10,20]\n     */\n    map<M>(\n      mapper: (value: T, key: T, iter: this) => M,\n      context?: unknown\n    ): Set<M>;\n\n    /**\n     * Flat-maps the Set, returning a new Set.\n     *\n     * Similar to `set.map(...).flatten(true)`.\n     */\n    flatMap<M>(\n      mapper: (value: T, key: T, iter: this) => Iterable<M>,\n      context?: unknown\n    ): Set<M>;\n\n    /**\n     * Returns a new Set with only the values for which the `predicate`\n     * function returns true.\n     *\n     * Note: `filter()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filter<F extends T>(\n      predicate: (value: T, key: T, iter: this) => value is F,\n      context?: unknown\n    ): Set<F>;\n    filter(\n      predicate: (value: T, key: T, iter: this) => unknown,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new Set with the values for which the `predicate` function\n     * returns false and another for which is returns true.\n     */\n    partition<F extends T, C>(\n      predicate: (this: C, value: T, key: T, iter: this) => value is F,\n      context?: C\n    ): [Set<T>, Set<F>];\n    partition<C>(\n      predicate: (this: C, value: T, key: T, iter: this) => unknown,\n      context?: C\n    ): [this, this];\n  }\n\n  /**\n   * A type of Set that has the additional guarantee that the iteration order of\n   * values will be the order in which they were `add`ed.\n   *\n   * The iteration behavior of OrderedSet is the same as native ES6 Set.\n   *\n   * Note that `OrderedSet` are more expensive than non-ordered `Set` and may\n   * consume more memory. `OrderedSet#add` is amortized O(log32 N), but not\n   * stable.\n   */\n  namespace OrderedSet {\n    /**\n     * True if the provided value is an OrderedSet.\n     */\n    function isOrderedSet(maybeOrderedSet: unknown): boolean;\n\n    /**\n     * Creates a new OrderedSet containing `values`.\n     */\n    function of<T>(...values: Array<T>): OrderedSet<T>;\n\n    /**\n     * `OrderedSet.fromKeys()` creates a new immutable OrderedSet containing\n     * the keys from this Collection or JavaScript Object.\n     */\n    function fromKeys<T>(iter: Collection<T, unknown>): OrderedSet<T>;\n    function fromKeys(obj: { [key: string]: unknown }): OrderedSet<string>;\n  }\n\n  /**\n   * Create a new immutable OrderedSet containing the values of the provided\n   * collection-like.\n   *\n   * Note: `OrderedSet` is a factory function and not a class, and does not use\n   * the `new` keyword during construction.\n   */\n  function OrderedSet<T>(\n    collection?: Iterable<T> | ArrayLike<T>\n  ): OrderedSet<T>;\n\n  interface OrderedSet<T> extends Set<T> {\n    /**\n     * The number of items in this OrderedSet.\n     */\n    readonly size: number;\n\n    /**\n     * Returns an OrderedSet including any value from `collections` that does\n     * not already exist in this OrderedSet.\n     *\n     * Note: `union` can be used in `withMutations`.\n     * @alias merge\n     * @alias concat\n     */\n    union<C>(...collections: Array<Iterable<C>>): OrderedSet<T | C>;\n    merge<C>(...collections: Array<Iterable<C>>): OrderedSet<T | C>;\n    concat<C>(...collections: Array<Iterable<C>>): OrderedSet<T | C>;\n\n    // Sequence algorithms\n\n    /**\n     * Returns a new Set with values passed through a\n     * `mapper` function.\n     *\n     *     OrderedSet([ 1, 2 ]).map(x => 10 * x)\n     *     // OrderedSet [10, 20]\n     */\n    map<M>(\n      mapper: (value: T, key: T, iter: this) => M,\n      context?: unknown\n    ): OrderedSet<M>;\n\n    /**\n     * Flat-maps the OrderedSet, returning a new OrderedSet.\n     *\n     * Similar to `set.map(...).flatten(true)`.\n     */\n    flatMap<M>(\n      mapper: (value: T, key: T, iter: this) => Iterable<M>,\n      context?: unknown\n    ): OrderedSet<M>;\n\n    /**\n     * Returns a new OrderedSet with only the values for which the `predicate`\n     * function returns true.\n     *\n     * Note: `filter()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filter<F extends T>(\n      predicate: (value: T, key: T, iter: this) => value is F,\n      context?: unknown\n    ): OrderedSet<F>;\n    filter(\n      predicate: (value: T, key: T, iter: this) => unknown,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new OrderedSet with the values for which the `predicate`\n     * function returns false and another for which is returns true.\n     */\n    partition<F extends T, C>(\n      predicate: (this: C, value: T, key: T, iter: this) => value is F,\n      context?: C\n    ): [OrderedSet<T>, OrderedSet<F>];\n    partition<C>(\n      predicate: (this: C, value: T, key: T, iter: this) => unknown,\n      context?: C\n    ): [this, this];\n\n    /**\n     * Returns an OrderedSet of the same type \"zipped\" with the provided\n     * collections.\n     *\n     * Like `zipWith`, but using the default `zipper`: creating an `Array`.\n     *\n     * ```js\n     * const a = OrderedSet([ 1, 2, 3 ])\n     * const b = OrderedSet([ 4, 5, 6 ])\n     * const c = a.zip(b)\n     * // OrderedSet [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\n     * ```\n     */\n    zip<U>(other: Collection<unknown, U>): OrderedSet<[T, U]>;\n    zip<U, V>(\n      other1: Collection<unknown, U>,\n      other2: Collection<unknown, V>\n    ): OrderedSet<[T, U, V]>;\n    zip(\n      ...collections: Array<Collection<unknown, unknown>>\n    ): OrderedSet<unknown>;\n\n    /**\n     * Returns a OrderedSet of the same type \"zipped\" with the provided\n     * collections.\n     *\n     * Unlike `zip`, `zipAll` continues zipping until the longest collection is\n     * exhausted. Missing values from shorter collections are filled with `undefined`.\n     *\n     * ```js\n     * const a = OrderedSet([ 1, 2 ]);\n     * const b = OrderedSet([ 3, 4, 5 ]);\n     * const c = a.zipAll(b); // OrderedSet [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]\n     * ```\n     *\n     * Note: Since zipAll will return a collection as large as the largest\n     * input, some results may contain undefined values. TypeScript cannot\n     * account for these without cases (as of v2.5).\n     */\n    zipAll<U>(other: Collection<unknown, U>): OrderedSet<[T, U]>;\n    zipAll<U, V>(\n      other1: Collection<unknown, U>,\n      other2: Collection<unknown, V>\n    ): OrderedSet<[T, U, V]>;\n    zipAll(\n      ...collections: Array<Collection<unknown, unknown>>\n    ): OrderedSet<unknown>;\n\n    /**\n     * Returns an OrderedSet of the same type \"zipped\" with the provided\n     * collections by using a custom `zipper` function.\n     *\n     * @see Seq.Indexed.zipWith\n     */\n    zipWith<U, Z>(\n      zipper: (value: T, otherValue: U) => Z,\n      otherCollection: Collection<unknown, U>\n    ): OrderedSet<Z>;\n    zipWith<U, V, Z>(\n      zipper: (value: T, otherValue: U, thirdValue: V) => Z,\n      otherCollection: Collection<unknown, U>,\n      thirdCollection: Collection<unknown, V>\n    ): OrderedSet<Z>;\n    zipWith<Z>(\n      zipper: (...values: Array<unknown>) => Z,\n      ...collections: Array<Collection<unknown, unknown>>\n    ): OrderedSet<Z>;\n  }\n\n  /**\n   * Stacks are indexed collections which support very efficient O(1) addition\n   * and removal from the front using `unshift(v)` and `shift()`.\n   *\n   * For familiarity, Stack also provides `push(v)`, `pop()`, and `peek()`, but\n   * be aware that they also operate on the front of the list, unlike List or\n   * a JavaScript Array.\n   *\n   * Note: `reverse()` or any inherent reverse traversal (`reduceRight`,\n   * `lastIndexOf`, etc.) is not efficient with a Stack.\n   *\n   * Stack is implemented with a Single-Linked List.\n   */\n  namespace Stack {\n    /**\n     * True if the provided value is a Stack\n     */\n    function isStack(maybeStack: unknown): maybeStack is Stack<unknown>;\n\n    /**\n     * Creates a new Stack containing `values`.\n     */\n    function of<T>(...values: Array<T>): Stack<T>;\n  }\n\n  /**\n   * Create a new immutable Stack containing the values of the provided\n   * collection-like.\n   *\n   * The iteration order of the provided collection is preserved in the\n   * resulting `Stack`.\n   *\n   * Note: `Stack` is a factory function and not a class, and does not use the\n   * `new` keyword during construction.\n   */\n  function Stack<T>(collection?: Iterable<T> | ArrayLike<T>): Stack<T>;\n\n  interface Stack<T> extends Collection.Indexed<T> {\n    /**\n     * The number of items in this Stack.\n     */\n    readonly size: number;\n\n    // Reading values\n\n    /**\n     * Alias for `Stack.first()`.\n     */\n    peek(): T | undefined;\n\n    // Persistent changes\n\n    /**\n     * Returns a new Stack with 0 size and no values.\n     *\n     * Note: `clear` can be used in `withMutations`.\n     */\n    clear(): Stack<T>;\n\n    /**\n     * Returns a new Stack with the provided `values` prepended, shifting other\n     * values ahead to higher indices.\n     *\n     * This is very efficient for Stack.\n     *\n     * Note: `unshift` can be used in `withMutations`.\n     */\n    unshift(...values: Array<T>): Stack<T>;\n\n    /**\n     * Like `Stack#unshift`, but accepts a collection rather than varargs.\n     *\n     * Note: `unshiftAll` can be used in `withMutations`.\n     */\n    unshiftAll(iter: Iterable<T>): Stack<T>;\n\n    /**\n     * Returns a new Stack with a size ones less than this Stack, excluding\n     * the first item in this Stack, shifting all other values to a lower index.\n     *\n     * Note: this differs from `Array#shift` because it returns a new\n     * Stack rather than the removed value. Use `first()` or `peek()` to get the\n     * first value in this Stack.\n     *\n     * Note: `shift` can be used in `withMutations`.\n     */\n    shift(): Stack<T>;\n\n    /**\n     * Alias for `Stack#unshift` and is not equivalent to `List#push`.\n     */\n    push(...values: Array<T>): Stack<T>;\n\n    /**\n     * Alias for `Stack#unshiftAll`.\n     */\n    pushAll(iter: Iterable<T>): Stack<T>;\n\n    /**\n     * Alias for `Stack#shift` and is not equivalent to `List#pop`.\n     */\n    pop(): Stack<T>;\n\n    // Transient changes\n\n    /**\n     * Note: Not all methods can be used on a mutable collection or within\n     * `withMutations`! Check the documentation for each method to see if it\n     * mentions being safe to use in `withMutations`.\n     *\n     * @see `Map#withMutations`\n     */\n    withMutations(mutator: (mutable: this) => unknown): this;\n\n    /**\n     * Note: Not all methods can be used on a mutable collection or within\n     * `withMutations`! Check the documentation for each method to see if it\n     * mentions being safe to use in `withMutations`.\n     *\n     * @see `Map#asMutable`\n     */\n    asMutable(): this;\n\n    /**\n     * @see `Map#wasAltered`\n     */\n    wasAltered(): boolean;\n\n    /**\n     * @see `Map#asImmutable`\n     */\n    asImmutable(): this;\n\n    // Sequence algorithms\n\n    /**\n     * Returns a new Stack with other collections concatenated to this one.\n     */\n    concat<C>(...valuesOrCollections: Array<Iterable<C> | C>): Stack<T | C>;\n\n    /**\n     * Returns a new Stack with values passed through a\n     * `mapper` function.\n     *\n     *     Stack([ 1, 2 ]).map(x => 10 * x)\n     *     // Stack [ 10, 20 ]\n     *\n     * Note: `map()` always returns a new instance, even if it produced the same\n     * value at every step.\n     */\n    map<M>(\n      mapper: (value: T, key: number, iter: this) => M,\n      context?: unknown\n    ): Stack<M>;\n\n    /**\n     * Flat-maps the Stack, returning a new Stack.\n     *\n     * Similar to `stack.map(...).flatten(true)`.\n     */\n    flatMap<M>(\n      mapper: (value: T, key: number, iter: this) => Iterable<M>,\n      context?: unknown\n    ): Stack<M>;\n\n    /**\n     * Returns a new Set with only the values for which the `predicate`\n     * function returns true.\n     *\n     * Note: `filter()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filter<F extends T>(\n      predicate: (value: T, index: number, iter: this) => value is F,\n      context?: unknown\n    ): Set<F>;\n    filter(\n      predicate: (value: T, index: number, iter: this) => unknown,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a Stack \"zipped\" with the provided collections.\n     *\n     * Like `zipWith`, but using the default `zipper`: creating an `Array`.\n     *\n     * ```js\n     * const a = Stack([ 1, 2, 3 ]);\n     * const b = Stack([ 4, 5, 6 ]);\n     * const c = a.zip(b); // Stack [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\n     * ```\n     */\n    zip<U>(other: Collection<unknown, U>): Stack<[T, U]>;\n    zip<U, V>(\n      other: Collection<unknown, U>,\n      other2: Collection<unknown, V>\n    ): Stack<[T, U, V]>;\n    zip(...collections: Array<Collection<unknown, unknown>>): Stack<unknown>;\n\n    /**\n     * Returns a Stack \"zipped\" with the provided collections.\n     *\n     * Unlike `zip`, `zipAll` continues zipping until the longest collection is\n     * exhausted. Missing values from shorter collections are filled with `undefined`.\n     *\n     * ```js\n     * const a = Stack([ 1, 2 ]);\n     * const b = Stack([ 3, 4, 5 ]);\n     * const c = a.zipAll(b); // Stack [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]\n     * ```\n     *\n     * Note: Since zipAll will return a collection as large as the largest\n     * input, some results may contain undefined values. TypeScript cannot\n     * account for these without cases (as of v2.5).\n     */\n    zipAll<U>(other: Collection<unknown, U>): Stack<[T, U]>;\n    zipAll<U, V>(\n      other: Collection<unknown, U>,\n      other2: Collection<unknown, V>\n    ): Stack<[T, U, V]>;\n    zipAll(...collections: Array<Collection<unknown, unknown>>): Stack<unknown>;\n\n    /**\n     * Returns a Stack \"zipped\" with the provided collections by using a\n     * custom `zipper` function.\n     *\n     * ```js\n     * const a = Stack([ 1, 2, 3 ]);\n     * const b = Stack([ 4, 5, 6 ]);\n     * const c = a.zipWith((a, b) => a + b, b);\n     * // Stack [ 5, 7, 9 ]\n     * ```\n     */\n    zipWith<U, Z>(\n      zipper: (value: T, otherValue: U) => Z,\n      otherCollection: Collection<unknown, U>\n    ): Stack<Z>;\n    zipWith<U, V, Z>(\n      zipper: (value: T, otherValue: U, thirdValue: V) => Z,\n      otherCollection: Collection<unknown, U>,\n      thirdCollection: Collection<unknown, V>\n    ): Stack<Z>;\n    zipWith<Z>(\n      zipper: (...values: Array<unknown>) => Z,\n      ...collections: Array<Collection<unknown, unknown>>\n    ): Stack<Z>;\n  }\n\n  /**\n   * Returns a Seq.Indexed of numbers from `start` (inclusive) to `end`\n   * (exclusive), by `step`, where `start` defaults to 0, `step` to 1, and `end` to\n   * infinity. When `start` is equal to `end`, returns empty range.\n   *\n   * Note: `Range` is a factory function and not a class, and does not use the\n   * `new` keyword during construction.\n   *\n   * ```js\n   * const { Range } = require('immutable')\n   * Range() // [ 0, 1, 2, 3, ... ]\n   * Range(10) // [ 10, 11, 12, 13, ... ]\n   * Range(10, 15) // [ 10, 11, 12, 13, 14 ]\n   * Range(10, 30, 5) // [ 10, 15, 20, 25 ]\n   * Range(30, 10, 5) // [ 30, 25, 20, 15 ]\n   * Range(30, 30, 5) // []\n   * ```\n   */\n  function Range(\n    start?: number,\n    end?: number,\n    step?: number\n  ): Seq.Indexed<number>;\n\n  /**\n   * Returns a Seq.Indexed of `value` repeated `times` times. When `times` is\n   * not defined, returns an infinite `Seq` of `value`.\n   *\n   * Note: `Repeat` is a factory function and not a class, and does not use the\n   * `new` keyword during construction.\n   *\n   * ```js\n   * const { Repeat } = require('immutable')\n   * Repeat('foo') // [ 'foo', 'foo', 'foo', ... ]\n   * Repeat('bar', 4) // [ 'bar', 'bar', 'bar', 'bar' ]\n   * ```\n   */\n  function Repeat<T>(value: T, times?: number): Seq.Indexed<T>;\n\n  /**\n   * A record is similar to a JS object, but enforces a specific set of allowed\n   * string keys, and has default values.\n   *\n   * The `Record()` function produces new Record Factories, which when called\n   * create Record instances.\n   *\n   * ```js\n   * const { Record } = require('immutable')\n   * const ABRecord = Record({ a: 1, b: 2 })\n   * const myRecord = ABRecord({ b: 3 })\n   * ```\n   *\n   * Records always have a value for the keys they define. `remove`ing a key\n   * from a record simply resets it to the default value for that key.\n   *\n   * ```js\n   * myRecord.get('a') // 1\n   * myRecord.get('b') // 3\n   * const myRecordWithoutB = myRecord.remove('b')\n   * myRecordWithoutB.get('b') // 2\n   * ```\n   *\n   * Values provided to the constructor not found in the Record type will\n   * be ignored. For example, in this case, ABRecord is provided a key \"x\" even\n   * though only \"a\" and \"b\" have been defined. The value for \"x\" will be\n   * ignored for this record.\n   *\n   * ```js\n   * const myRecord = ABRecord({ b: 3, x: 10 })\n   * myRecord.get('x') // undefined\n   * ```\n   *\n   * Because Records have a known set of string keys, property get access works\n   * as expected, however property sets will throw an Error.\n   *\n   * Note: IE8 does not support property access. Only use `get()` when\n   * supporting IE8.\n   *\n   * ```js\n   * myRecord.b // 3\n   * myRecord.b = 5 // throws Error\n   * ```\n   *\n   * Record Types can be extended as well, allowing for custom methods on your\n   * Record. This is not a common pattern in functional environments, but is in\n   * many JS programs.\n   *\n   * However Record Types are more restricted than typical JavaScript classes.\n   * They do not use a class constructor, which also means they cannot use\n   * class properties (since those are technically part of a constructor).\n   *\n   * While Record Types can be syntactically created with the JavaScript `class`\n   * form, the resulting Record function is actually a factory function, not a\n   * class constructor. Even though Record Types are not classes, JavaScript\n   * currently requires the use of `new` when creating new Record instances if\n   * they are defined as a `class`.\n   *\n   * ```\n   * class ABRecord extends Record({ a: 1, b: 2 }) {\n   *   getAB() {\n   *     return this.a + this.b;\n   *   }\n   * }\n   *\n   * var myRecord = new ABRecord({b: 3})\n   * myRecord.getAB() // 4\n   * ```\n   *\n   *\n   * **Flow Typing Records:**\n   *\n   * Immutable.js exports two Flow types designed to make it easier to use\n   * Records with flow typed code, `RecordOf<TProps>` and `RecordFactory<TProps>`.\n   *\n   * When defining a new kind of Record factory function, use a flow type that\n   * describes the values the record contains along with `RecordFactory<TProps>`.\n   * To type instances of the Record (which the factory function returns),\n   * use `RecordOf<TProps>`.\n   *\n   * Typically, new Record definitions will export both the Record factory\n   * function as well as the Record instance type for use in other code.\n   *\n   * ```js\n   * import type { RecordFactory, RecordOf } from 'immutable';\n   *\n   * // Use RecordFactory<TProps> for defining new Record factory functions.\n   * type Point3DProps = { x: number, y: number, z: number };\n   * const defaultValues: Point3DProps = { x: 0, y: 0, z: 0 };\n   * const makePoint3D: RecordFactory<Point3DProps> = Record(defaultValues);\n   * export makePoint3D;\n   *\n   * // Use RecordOf<T> for defining new instances of that Record.\n   * export type Point3D = RecordOf<Point3DProps>;\n   * const some3DPoint: Point3D = makePoint3D({ x: 10, y: 20, z: 30 });\n   * ```\n   *\n   * **Flow Typing Record Subclasses:**\n   *\n   * Records can be subclassed as a means to add additional methods to Record\n   * instances. This is generally discouraged in favor of a more functional API,\n   * since Subclasses have some minor overhead. However the ability to create\n   * a rich API on Record types can be quite valuable.\n   *\n   * When using Flow to type Subclasses, do not use `RecordFactory<TProps>`,\n   * instead apply the props type when subclassing:\n   *\n   * ```js\n   * type PersonProps = {name: string, age: number};\n   * const defaultValues: PersonProps = {name: 'Aristotle', age: 2400};\n   * const PersonRecord = Record(defaultValues);\n   * class Person extends PersonRecord<PersonProps> {\n   *   getName(): string {\n   *     return this.get('name')\n   *   }\n   *\n   *   setName(name: string): this {\n   *     return this.set('name', name);\n   *   }\n   * }\n   * ```\n   *\n   * **Choosing Records vs plain JavaScript objects**\n   *\n   * Records offer a persistently immutable alternative to plain JavaScript\n   * objects, however they're not required to be used within Immutable.js\n   * collections. In fact, the deep-access and deep-updating functions\n   * like `getIn()` and `setIn()` work with plain JavaScript Objects as well.\n   *\n   * Deciding to use Records or Objects in your application should be informed\n   * by the tradeoffs and relative benefits of each:\n   *\n   * - *Runtime immutability*: plain JS objects may be carefully treated as\n   *   immutable, however Record instances will *throw* if attempted to be\n   *   mutated directly. Records provide this additional guarantee, however at\n   *   some marginal runtime cost. While JS objects are mutable by nature, the\n   *   use of type-checking tools like [Flow](https://medium.com/@gcanti/immutability-with-flow-faa050a1aef4)\n   *   can help gain confidence in code written to favor immutability.\n   *\n   * - *Value equality*: Records use value equality when compared with `is()`\n   *   or `record.equals()`. That is, two Records with the same keys and values\n   *   are equal. Plain objects use *reference equality*. Two objects with the\n   *   same keys and values are not equal since they are different objects.\n   *   This is important to consider when using objects as keys in a `Map` or\n   *   values in a `Set`, which use equality when retrieving values.\n   *\n   * - *API methods*: Records have a full featured API, with methods like\n   *   `.getIn()`, and `.equals()`. These can make working with these values\n   *   easier, but comes at the cost of not allowing keys with those names.\n   *\n   * - *Default values*: Records provide default values for every key, which\n   *   can be useful when constructing Records with often unchanging values.\n   *   However default values can make using Flow and TypeScript more laborious.\n   *\n   * - *Serialization*: Records use a custom internal representation to\n   *   efficiently store and update their values. Converting to and from this\n   *   form isn't free. If converting Records to plain objects is common,\n   *   consider sticking with plain objects to begin with.\n   */\n  namespace Record {\n    /**\n     * True if `maybeRecord` is an instance of a Record.\n     */\n    function isRecord(maybeRecord: unknown): maybeRecord is Record<{}>;\n\n    /**\n     * Records allow passing a second parameter to supply a descriptive name\n     * that appears when converting a Record to a string or in any error\n     * messages. A descriptive name for any record can be accessed by using this\n     * method. If one was not provided, the string \"Record\" is returned.\n     *\n     * ```js\n     * const { Record } = require('immutable')\n     * const Person = Record({\n     *   name: null\n     * }, 'Person')\n     *\n     * var me = Person({ name: 'My Name' })\n     * me.toString() // \"Person { \"name\": \"My Name\" }\"\n     * Record.getDescriptiveName(me) // \"Person\"\n     * ```\n     */\n    function getDescriptiveName(record: Record<any>): string;\n\n    /**\n     * A Record.Factory is created by the `Record()` function. Record instances\n     * are created by passing it some of the accepted values for that Record\n     * type:\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Record } = require('immutable')\" }\n     * -->\n     * ```js\n     * // makePerson is a Record Factory function\n     * const makePerson = Record({ name: null, favoriteColor: 'unknown' });\n     *\n     * // alan is a Record instance\n     * const alan = makePerson({ name: 'Alan' });\n     * ```\n     *\n     * Note that Record Factories return `Record<TProps> & Readonly<TProps>`,\n     * this allows use of both the Record instance API, and direct property\n     * access on the resulting instances:\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Record } = require('immutable');const makePerson = Record({ name: null, favoriteColor: 'unknown' });const alan = makePerson({ name: 'Alan' });\" }\n     * -->\n     * ```js\n     * // Use the Record API\n     * console.log('Record API: ' + alan.get('name'))\n     *\n     * // Or direct property access (Readonly)\n     * console.log('property access: ' + alan.name)\n     * ```\n     *\n     * **Flow Typing Records:**\n     *\n     * Use the `RecordFactory<TProps>` Flow type to get high quality type checking of\n     * Records:\n     *\n     * ```js\n     * import type { RecordFactory, RecordOf } from 'immutable';\n     *\n     * // Use RecordFactory<TProps> for defining new Record factory functions.\n     * type PersonProps = { name: ?string, favoriteColor: string };\n     * const makePerson: RecordFactory<PersonProps> = Record({ name: null, favoriteColor: 'unknown' });\n     *\n     * // Use RecordOf<T> for defining new instances of that Record.\n     * type Person = RecordOf<PersonProps>;\n     * const alan: Person = makePerson({ name: 'Alan' });\n     * ```\n     */\n    namespace Factory {}\n\n    interface Factory<TProps extends object> {\n      (values?: Partial<TProps> | Iterable<[string, unknown]>): Record<TProps> &\n        Readonly<TProps>;\n      new (\n        values?: Partial<TProps> | Iterable<[string, unknown]>\n      ): Record<TProps> & Readonly<TProps>;\n\n      /**\n       * The name provided to `Record(values, name)` can be accessed with\n       * `displayName`.\n       */\n      displayName: string;\n    }\n\n    function Factory<TProps extends object>(\n      values?: Partial<TProps> | Iterable<[string, unknown]>\n    ): Record<TProps> & Readonly<TProps>;\n  }\n\n  /**\n   * Unlike other types in Immutable.js, the `Record()` function creates a new\n   * Record Factory, which is a function that creates Record instances.\n   *\n   * See above for examples of using `Record()`.\n   *\n   * Note: `Record` is a factory function and not a class, and does not use the\n   * `new` keyword during construction.\n   */\n  function Record<TProps extends object>(\n    defaultValues: TProps,\n    name?: string\n  ): Record.Factory<TProps>;\n\n  interface Record<TProps extends object> {\n    // Reading values\n\n    has(key: string): key is keyof TProps & string;\n\n    /**\n     * Returns the value associated with the provided key, which may be the\n     * default value defined when creating the Record factory function.\n     *\n     * If the requested key is not defined by this Record type, then\n     * notSetValue will be returned if provided. Note that this scenario would\n     * produce an error when using Flow or TypeScript.\n     */\n    get<K extends keyof TProps>(key: K, notSetValue?: unknown): TProps[K];\n    get<T>(key: string, notSetValue: T): T;\n\n    // Reading deep values\n\n    hasIn(keyPath: Iterable<unknown>): boolean;\n    getIn(keyPath: Iterable<unknown>): unknown;\n\n    // Value equality\n\n    equals(other: unknown): boolean;\n    hashCode(): number;\n\n    // Persistent changes\n\n    set<K extends keyof TProps>(key: K, value: TProps[K]): this;\n    update<K extends keyof TProps>(\n      key: K,\n      updater: (value: TProps[K]) => TProps[K]\n    ): this;\n    merge(\n      ...collections: Array<Partial<TProps> | Iterable<[string, unknown]>>\n    ): this;\n    mergeDeep(\n      ...collections: Array<Partial<TProps> | Iterable<[string, unknown]>>\n    ): this;\n\n    mergeWith(\n      merger: (oldVal: unknown, newVal: unknown, key: keyof TProps) => unknown,\n      ...collections: Array<Partial<TProps> | Iterable<[string, unknown]>>\n    ): this;\n    mergeDeepWith(\n      merger: (oldVal: unknown, newVal: unknown, key: unknown) => unknown,\n      ...collections: Array<Partial<TProps> | Iterable<[string, unknown]>>\n    ): this;\n\n    /**\n     * Returns a new instance of this Record type with the value for the\n     * specific key set to its default value.\n     *\n     * @alias remove\n     */\n    delete<K extends keyof TProps>(key: K): this;\n    remove<K extends keyof TProps>(key: K): this;\n\n    /**\n     * Returns a new instance of this Record type with all values set\n     * to their default values.\n     */\n    clear(): this;\n\n    // Deep persistent changes\n\n    setIn(keyPath: Iterable<unknown>, value: unknown): this;\n    updateIn(\n      keyPath: Iterable<unknown>,\n      updater: (value: unknown) => unknown\n    ): this;\n    mergeIn(keyPath: Iterable<unknown>, ...collections: Array<unknown>): this;\n    mergeDeepIn(\n      keyPath: Iterable<unknown>,\n      ...collections: Array<unknown>\n    ): this;\n\n    /**\n     * @alias removeIn\n     */\n    deleteIn(keyPath: Iterable<unknown>): this;\n    removeIn(keyPath: Iterable<unknown>): this;\n\n    // Conversion to JavaScript types\n\n    /**\n     * Deeply converts this Record to equivalent native JavaScript Object.\n     *\n     * Note: This method may not be overridden. Objects with custom\n     * serialization to plain JS may override toJSON() instead.\n     */\n    toJS(): DeepCopy<TProps>;\n\n    /**\n     * Shallowly converts this Record to equivalent native JavaScript Object.\n     */\n    toJSON(): TProps;\n\n    /**\n     * Shallowly converts this Record to equivalent JavaScript Object.\n     */\n    toObject(): TProps;\n\n    // Transient changes\n\n    /**\n     * Note: Not all methods can be used on a mutable collection or within\n     * `withMutations`! Only `set` may be used mutatively.\n     *\n     * @see `Map#withMutations`\n     */\n    withMutations(mutator: (mutable: this) => unknown): this;\n\n    /**\n     * @see `Map#asMutable`\n     */\n    asMutable(): this;\n\n    /**\n     * @see `Map#wasAltered`\n     */\n    wasAltered(): boolean;\n\n    /**\n     * @see `Map#asImmutable`\n     */\n    asImmutable(): this;\n\n    // Sequence algorithms\n\n    toSeq(): Seq.Keyed<keyof TProps, TProps[keyof TProps]>;\n\n    [Symbol.iterator](): IterableIterator<[keyof TProps, TProps[keyof TProps]]>;\n  }\n\n  /**\n   * RecordOf<T> is used in TypeScript to define interfaces expecting an\n   * instance of record with type T.\n   *\n   * This is equivalent to an instance of a record created by a Record Factory.\n   */\n  type RecordOf<TProps extends object> = Record<TProps> & Readonly<TProps>;\n\n  /**\n   * `Seq` describes a lazy operation, allowing them to efficiently chain\n   * use of all the higher-order collection methods (such as `map` and `filter`)\n   * by not creating intermediate collections.\n   *\n   * **Seq is immutable** — Once a Seq is created, it cannot be\n   * changed, appended to, rearranged or otherwise modified. Instead, any\n   * mutative method called on a `Seq` will return a new `Seq`.\n   *\n   * **Seq is lazy** — `Seq` does as little work as necessary to respond to any\n   * method call. Values are often created during iteration, including implicit\n   * iteration when reducing or converting to a concrete data structure such as\n   * a `List` or JavaScript `Array`.\n   *\n   * For example, the following performs no work, because the resulting\n   * `Seq`'s values are never iterated:\n   *\n   * ```js\n   * const { Seq } = require('immutable')\n   * const oddSquares = Seq([ 1, 2, 3, 4, 5, 6, 7, 8 ])\n   *   .filter(x => x % 2 !== 0)\n   *   .map(x => x * x)\n   * ```\n   *\n   * Once the `Seq` is used, it performs only the work necessary. In this\n   * example, no intermediate arrays are ever created, filter is called three\n   * times, and map is only called once:\n   *\n   * ```js\n   * oddSquares.get(1); // 9\n   * ```\n   *\n   * Any collection can be converted to a lazy Seq with `Seq()`.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { Map } = require('immutable')\n   * const map = Map({ a: 1, b: 2, c: 3 })\n   * const lazySeq = Seq(map)\n   * ```\n   *\n   * `Seq` allows for the efficient chaining of operations, allowing for the\n   * expression of logic that can otherwise be very tedious:\n   *\n   * ```js\n   * lazySeq\n   *   .flip()\n   *   .map(key => key.toUpperCase())\n   *   .flip()\n   * // Seq { A: 1, B: 1, C: 1 }\n   * ```\n   *\n   * As well as expressing logic that would otherwise seem memory or time\n   * limited, for example `Range` is a special kind of Lazy sequence.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { Range } = require('immutable')\n   * Range(1, Infinity)\n   *   .skip(1000)\n   *   .map(n => -n)\n   *   .filter(n => n % 2 === 0)\n   *   .take(2)\n   *   .reduce((r, n) => r * n, 1)\n   * // 1006008\n   * ```\n   *\n   * Seq is often used to provide a rich collection API to JavaScript Object.\n   *\n   * ```js\n   * Seq({ x: 0, y: 1, z: 2 }).map(v => v * 2).toObject();\n   * // { x: 0, y: 2, z: 4 }\n   * ```\n   */\n\n  namespace Seq {\n    /**\n     * True if `maybeSeq` is a Seq, it is not backed by a concrete\n     * structure such as Map, List, or Set.\n     */\n    function isSeq(\n      maybeSeq: unknown\n    ): maybeSeq is\n      | Seq.Indexed<unknown>\n      | Seq.Keyed<unknown, unknown>\n      | Seq.Set<unknown>;\n\n    /**\n     * `Seq` which represents key-value pairs.\n     */\n    namespace Keyed {}\n\n    /**\n     * Always returns a Seq.Keyed, if input is not keyed, expects an\n     * collection of [K, V] tuples.\n     *\n     * Note: `Seq.Keyed` is a conversion function and not a class, and does not\n     * use the `new` keyword during construction.\n     */\n    function Keyed<K, V>(collection?: Iterable<[K, V]>): Seq.Keyed<K, V>;\n    function Keyed<V>(obj: { [key: string]: V }): Seq.Keyed<string, V>;\n\n    interface Keyed<K, V> extends Seq<K, V>, Collection.Keyed<K, V> {\n      /**\n       * Deeply converts this Keyed Seq to equivalent native JavaScript Object.\n       *\n       * Converts keys to Strings.\n       */\n      toJS(): { [key in string | number | symbol]: DeepCopy<V> };\n\n      /**\n       * Shallowly converts this Keyed Seq to equivalent native JavaScript Object.\n       *\n       * Converts keys to Strings.\n       */\n      toJSON(): { [key in string | number | symbol]: V };\n\n      /**\n       * Shallowly converts this collection to an Array.\n       */\n      toArray(): Array<[K, V]>;\n\n      /**\n       * Returns itself\n       */\n      toSeq(): this;\n\n      /**\n       * Returns a new Seq with other collections concatenated to this one.\n       *\n       * All entries will be present in the resulting Seq, even if they\n       * have the same key.\n       */\n      concat<KC, VC>(\n        ...collections: Array<Iterable<[KC, VC]>>\n      ): Seq.Keyed<K | KC, V | VC>;\n      concat<C>(\n        ...collections: Array<{ [key: string]: C }>\n      ): Seq.Keyed<K | string, V | C>;\n\n      /**\n       * Returns a new Seq.Keyed with values passed through a\n       * `mapper` function.\n       *\n       * ```js\n       * const { Seq } = require('immutable')\n       * Seq.Keyed({ a: 1, b: 2 }).map(x => 10 * x)\n       * // Seq { \"a\": 10, \"b\": 20 }\n       * ```\n       *\n       * Note: `map()` always returns a new instance, even if it produced the\n       * same value at every step.\n       */\n      map<M>(\n        mapper: (value: V, key: K, iter: this) => M,\n        context?: unknown\n      ): Seq.Keyed<K, M>;\n\n      /**\n       * @see Collection.Keyed.mapKeys\n       */\n      mapKeys<M>(\n        mapper: (key: K, value: V, iter: this) => M,\n        context?: unknown\n      ): Seq.Keyed<M, V>;\n\n      /**\n       * @see Collection.Keyed.mapEntries\n       */\n      mapEntries<KM, VM>(\n        mapper: (\n          entry: [K, V],\n          index: number,\n          iter: this\n        ) => [KM, VM] | undefined,\n        context?: unknown\n      ): Seq.Keyed<KM, VM>;\n\n      /**\n       * Flat-maps the Seq, returning a Seq of the same type.\n       *\n       * Similar to `seq.map(...).flatten(true)`.\n       */\n      flatMap<KM, VM>(\n        mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n        context?: unknown\n      ): Seq.Keyed<KM, VM>;\n\n      /**\n       * Returns a new Seq with only the entries for which the `predicate`\n       * function returns true.\n       *\n       * Note: `filter()` always returns a new instance, even if it results in\n       * not filtering out any values.\n       */\n      filter<F extends V>(\n        predicate: (value: V, key: K, iter: this) => value is F,\n        context?: unknown\n      ): Seq.Keyed<K, F>;\n      filter(\n        predicate: (value: V, key: K, iter: this) => unknown,\n        context?: unknown\n      ): this;\n\n      /**\n       * Returns a new keyed Seq with the values for which the `predicate`\n       * function returns false and another for which is returns true.\n       */\n      partition<F extends V, C>(\n        predicate: (this: C, value: V, key: K, iter: this) => value is F,\n        context?: C\n      ): [Seq.Keyed<K, V>, Seq.Keyed<K, F>];\n      partition<C>(\n        predicate: (this: C, value: V, key: K, iter: this) => unknown,\n        context?: C\n      ): [this, this];\n\n      /**\n       * @see Collection.Keyed.flip\n       */\n      flip(): Seq.Keyed<V, K>;\n\n      [Symbol.iterator](): IterableIterator<[K, V]>;\n    }\n\n    /**\n     * `Seq` which represents an ordered indexed list of values.\n     */\n    namespace Indexed {\n      /**\n       * Provides an Seq.Indexed of the values provided.\n       */\n      function of<T>(...values: Array<T>): Seq.Indexed<T>;\n    }\n\n    /**\n     * Always returns Seq.Indexed, discarding associated keys and\n     * supplying incrementing indices.\n     *\n     * Note: `Seq.Indexed` is a conversion function and not a class, and does\n     * not use the `new` keyword during construction.\n     */\n    function Indexed<T>(\n      collection?: Iterable<T> | ArrayLike<T>\n    ): Seq.Indexed<T>;\n\n    interface Indexed<T> extends Seq<number, T>, Collection.Indexed<T> {\n      /**\n       * Deeply converts this Indexed Seq to equivalent native JavaScript Array.\n       */\n      toJS(): Array<DeepCopy<T>>;\n\n      /**\n       * Shallowly converts this Indexed Seq to equivalent native JavaScript Array.\n       */\n      toJSON(): Array<T>;\n\n      /**\n       * Shallowly converts this collection to an Array.\n       */\n      toArray(): Array<T>;\n\n      /**\n       * Returns itself\n       */\n      toSeq(): this;\n\n      /**\n       * Returns a new Seq with other collections concatenated to this one.\n       */\n      concat<C>(\n        ...valuesOrCollections: Array<Iterable<C> | C>\n      ): Seq.Indexed<T | C>;\n\n      /**\n       * Returns a new Seq.Indexed with values passed through a\n       * `mapper` function.\n       *\n       * ```js\n       * const { Seq } = require('immutable')\n       * Seq.Indexed([ 1, 2 ]).map(x => 10 * x)\n       * // Seq [ 10, 20 ]\n       * ```\n       *\n       * Note: `map()` always returns a new instance, even if it produced the\n       * same value at every step.\n       */\n      map<M>(\n        mapper: (value: T, key: number, iter: this) => M,\n        context?: unknown\n      ): Seq.Indexed<M>;\n\n      /**\n       * Flat-maps the Seq, returning a a Seq of the same type.\n       *\n       * Similar to `seq.map(...).flatten(true)`.\n       */\n      flatMap<M>(\n        mapper: (value: T, key: number, iter: this) => Iterable<M>,\n        context?: unknown\n      ): Seq.Indexed<M>;\n\n      /**\n       * Returns a new Seq with only the values for which the `predicate`\n       * function returns true.\n       *\n       * Note: `filter()` always returns a new instance, even if it results in\n       * not filtering out any values.\n       */\n      filter<F extends T>(\n        predicate: (value: T, index: number, iter: this) => value is F,\n        context?: unknown\n      ): Seq.Indexed<F>;\n      filter(\n        predicate: (value: T, index: number, iter: this) => unknown,\n        context?: unknown\n      ): this;\n\n      /**\n       * Returns a new indexed Seq with the values for which the `predicate`\n       * function returns false and another for which is returns true.\n       */\n      partition<F extends T, C>(\n        predicate: (this: C, value: T, index: number, iter: this) => value is F,\n        context?: C\n      ): [Seq.Indexed<T>, Seq.Indexed<F>];\n      partition<C>(\n        predicate: (this: C, value: T, index: number, iter: this) => unknown,\n        context?: C\n      ): [this, this];\n\n      /**\n       * Returns a Seq \"zipped\" with the provided collections.\n       *\n       * Like `zipWith`, but using the default `zipper`: creating an `Array`.\n       *\n       * ```js\n       * const a = Seq([ 1, 2, 3 ]);\n       * const b = Seq([ 4, 5, 6 ]);\n       * const c = a.zip(b); // Seq [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\n       * ```\n       */\n      zip<U>(other: Collection<unknown, U>): Seq.Indexed<[T, U]>;\n      zip<U, V>(\n        other: Collection<unknown, U>,\n        other2: Collection<unknown, V>\n      ): Seq.Indexed<[T, U, V]>;\n      zip(\n        ...collections: Array<Collection<unknown, unknown>>\n      ): Seq.Indexed<unknown>;\n\n      /**\n       * Returns a Seq \"zipped\" with the provided collections.\n       *\n       * Unlike `zip`, `zipAll` continues zipping until the longest collection is\n       * exhausted. Missing values from shorter collections are filled with `undefined`.\n       *\n       * ```js\n       * const a = Seq([ 1, 2 ]);\n       * const b = Seq([ 3, 4, 5 ]);\n       * const c = a.zipAll(b); // Seq [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]\n       * ```\n       */\n      zipAll<U>(other: Collection<unknown, U>): Seq.Indexed<[T, U]>;\n      zipAll<U, V>(\n        other: Collection<unknown, U>,\n        other2: Collection<unknown, V>\n      ): Seq.Indexed<[T, U, V]>;\n      zipAll(\n        ...collections: Array<Collection<unknown, unknown>>\n      ): Seq.Indexed<unknown>;\n\n      /**\n       * Returns a Seq \"zipped\" with the provided collections by using a\n       * custom `zipper` function.\n       *\n       * ```js\n       * const a = Seq([ 1, 2, 3 ]);\n       * const b = Seq([ 4, 5, 6 ]);\n       * const c = a.zipWith((a, b) => a + b, b);\n       * // Seq [ 5, 7, 9 ]\n       * ```\n       */\n      zipWith<U, Z>(\n        zipper: (value: T, otherValue: U) => Z,\n        otherCollection: Collection<unknown, U>\n      ): Seq.Indexed<Z>;\n      zipWith<U, V, Z>(\n        zipper: (value: T, otherValue: U, thirdValue: V) => Z,\n        otherCollection: Collection<unknown, U>,\n        thirdCollection: Collection<unknown, V>\n      ): Seq.Indexed<Z>;\n      zipWith<Z>(\n        zipper: (...values: Array<unknown>) => Z,\n        ...collections: Array<Collection<unknown, unknown>>\n      ): Seq.Indexed<Z>;\n\n      [Symbol.iterator](): IterableIterator<T>;\n    }\n\n    /**\n     * `Seq` which represents a set of values.\n     *\n     * Because `Seq` are often lazy, `Seq.Set` does not provide the same guarantee\n     * of value uniqueness as the concrete `Set`.\n     */\n    namespace Set {\n      /**\n       * Returns a Seq.Set of the provided values\n       */\n      function of<T>(...values: Array<T>): Seq.Set<T>;\n    }\n\n    /**\n     * Always returns a Seq.Set, discarding associated indices or keys.\n     *\n     * Note: `Seq.Set` is a conversion function and not a class, and does not\n     * use the `new` keyword during construction.\n     */\n    function Set<T>(collection?: Iterable<T> | ArrayLike<T>): Seq.Set<T>;\n\n    interface Set<T> extends Seq<T, T>, Collection.Set<T> {\n      /**\n       * Deeply converts this Set Seq to equivalent native JavaScript Array.\n       */\n      toJS(): Array<DeepCopy<T>>;\n\n      /**\n       * Shallowly converts this Set Seq to equivalent native JavaScript Array.\n       */\n      toJSON(): Array<T>;\n\n      /**\n       * Shallowly converts this collection to an Array.\n       */\n      toArray(): Array<T>;\n\n      /**\n       * Returns itself\n       */\n      toSeq(): this;\n\n      /**\n       * Returns a new Seq with other collections concatenated to this one.\n       *\n       * All entries will be present in the resulting Seq, even if they\n       * are duplicates.\n       */\n      concat<U>(...collections: Array<Iterable<U>>): Seq.Set<T | U>;\n\n      /**\n       * Returns a new Seq.Set with values passed through a\n       * `mapper` function.\n       *\n       * ```js\n       * Seq.Set([ 1, 2 ]).map(x => 10 * x)\n       * // Seq { 10, 20 }\n       * ```\n       *\n       * Note: `map()` always returns a new instance, even if it produced the\n       * same value at every step.\n       */\n      map<M>(\n        mapper: (value: T, key: T, iter: this) => M,\n        context?: unknown\n      ): Seq.Set<M>;\n\n      /**\n       * Flat-maps the Seq, returning a Seq of the same type.\n       *\n       * Similar to `seq.map(...).flatten(true)`.\n       */\n      flatMap<M>(\n        mapper: (value: T, key: T, iter: this) => Iterable<M>,\n        context?: unknown\n      ): Seq.Set<M>;\n\n      /**\n       * Returns a new Seq with only the values for which the `predicate`\n       * function returns true.\n       *\n       * Note: `filter()` always returns a new instance, even if it results in\n       * not filtering out any values.\n       */\n      filter<F extends T>(\n        predicate: (value: T, key: T, iter: this) => value is F,\n        context?: unknown\n      ): Seq.Set<F>;\n      filter(\n        predicate: (value: T, key: T, iter: this) => unknown,\n        context?: unknown\n      ): this;\n\n      /**\n       * Returns a new set Seq with the values for which the `predicate`\n       * function returns false and another for which is returns true.\n       */\n      partition<F extends T, C>(\n        predicate: (this: C, value: T, key: T, iter: this) => value is F,\n        context?: C\n      ): [Seq.Set<T>, Seq.Set<F>];\n      partition<C>(\n        predicate: (this: C, value: T, key: T, iter: this) => unknown,\n        context?: C\n      ): [this, this];\n\n      [Symbol.iterator](): IterableIterator<T>;\n    }\n  }\n\n  /**\n   * Creates a Seq.\n   *\n   * Returns a particular kind of `Seq` based on the input.\n   *\n   *   * If a `Seq`, that same `Seq`.\n   *   * If an `Collection`, a `Seq` of the same kind (Keyed, Indexed, or Set).\n   *   * If an Array-like, an `Seq.Indexed`.\n   *   * If an Iterable Object, an `Seq.Indexed`.\n   *   * If an Object, a `Seq.Keyed`.\n   *\n   * Note: An Iterator itself will be treated as an object, becoming a `Seq.Keyed`,\n   * which is usually not what you want. You should turn your Iterator Object into\n   * an iterable object by defining a Symbol.iterator (or @@iterator) method which\n   * returns `this`.\n   *\n   * Note: `Seq` is a conversion function and not a class, and does not use the\n   * `new` keyword during construction.\n   */\n  function Seq<S extends Seq<unknown, unknown>>(seq: S): S;\n  function Seq<K, V>(collection: Collection.Keyed<K, V>): Seq.Keyed<K, V>;\n  function Seq<T>(collection: Collection.Set<T>): Seq.Set<T>;\n  function Seq<T>(\n    collection: Collection.Indexed<T> | Iterable<T> | ArrayLike<T>\n  ): Seq.Indexed<T>;\n  function Seq<V>(obj: { [key: string]: V }): Seq.Keyed<string, V>;\n  function Seq<K = unknown, V = unknown>(): Seq<K, V>;\n\n  interface Seq<K, V> extends Collection<K, V> {\n    /**\n     * Some Seqs can describe their size lazily. When this is the case,\n     * size will be an integer. Otherwise it will be undefined.\n     *\n     * For example, Seqs returned from `map()` or `reverse()`\n     * preserve the size of the original `Seq` while `filter()` does not.\n     *\n     * Note: `Range`, `Repeat` and `Seq`s made from `Array`s and `Object`s will\n     * always have a size.\n     */\n    readonly size: number | undefined;\n\n    // Force evaluation\n\n    /**\n     * Because Sequences are lazy and designed to be chained together, they do\n     * not cache their results. For example, this map function is called a total\n     * of 6 times, as each `join` iterates the Seq of three values.\n     *\n     *     var squares = Seq([ 1, 2, 3 ]).map(x => x * x)\n     *     squares.join() + squares.join()\n     *\n     * If you know a `Seq` will be used multiple times, it may be more\n     * efficient to first cache it in memory. Here, the map function is called\n     * only 3 times.\n     *\n     *     var squares = Seq([ 1, 2, 3 ]).map(x => x * x).cacheResult()\n     *     squares.join() + squares.join()\n     *\n     * Use this method judiciously, as it must fully evaluate a Seq which can be\n     * a burden on memory and possibly performance.\n     *\n     * Note: after calling `cacheResult`, a Seq will always have a `size`.\n     */\n    cacheResult(): this;\n\n    // Sequence algorithms\n\n    /**\n     * Returns a new Seq with values passed through a\n     * `mapper` function.\n     *\n     * ```js\n     * const { Seq } = require('immutable')\n     * Seq([ 1, 2 ]).map(x => 10 * x)\n     * // Seq [ 10, 20 ]\n     * ```\n     *\n     * Note: `map()` always returns a new instance, even if it produced the same\n     * value at every step.\n     */\n    map<M>(\n      mapper: (value: V, key: K, iter: this) => M,\n      context?: unknown\n    ): Seq<K, M>;\n\n    /**\n     * Returns a new Seq with values passed through a\n     * `mapper` function.\n     *\n     * ```js\n     * const { Seq } = require('immutable')\n     * Seq([ 1, 2 ]).map(x => 10 * x)\n     * // Seq [ 10, 20 ]\n     * ```\n     *\n     * Note: `map()` always returns a new instance, even if it produced the same\n     * value at every step.\n     * Note: used only for sets.\n     */\n    map<M>(\n      mapper: (value: V, key: K, iter: this) => M,\n      context?: unknown\n    ): Seq<M, M>;\n\n    /**\n     * Flat-maps the Seq, returning a Seq of the same type.\n     *\n     * Similar to `seq.map(...).flatten(true)`.\n     */\n    flatMap<M>(\n      mapper: (value: V, key: K, iter: this) => Iterable<M>,\n      context?: unknown\n    ): Seq<K, M>;\n\n    /**\n     * Flat-maps the Seq, returning a Seq of the same type.\n     *\n     * Similar to `seq.map(...).flatten(true)`.\n     * Note: Used only for sets.\n     */\n    flatMap<M>(\n      mapper: (value: V, key: K, iter: this) => Iterable<M>,\n      context?: unknown\n    ): Seq<M, M>;\n\n    /**\n     * Returns a new Seq with only the values for which the `predicate`\n     * function returns true.\n     *\n     * Note: `filter()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filter<F extends V>(\n      predicate: (value: V, key: K, iter: this) => value is F,\n      context?: unknown\n    ): Seq<K, F>;\n    filter(\n      predicate: (value: V, key: K, iter: this) => unknown,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new Seq with the values for which the `predicate` function\n     * returns false and another for which is returns true.\n     */\n    partition<F extends V, C>(\n      predicate: (this: C, value: V, key: K, iter: this) => value is F,\n      context?: C\n    ): [Seq<K, V>, Seq<K, F>];\n    partition<C>(\n      predicate: (this: C, value: V, key: K, iter: this) => unknown,\n      context?: C\n    ): [this, this];\n  }\n\n  /**\n   * The `Collection` is a set of (key, value) entries which can be iterated, and\n   * is the base class for all collections in `immutable`, allowing them to\n   * make use of all the Collection methods (such as `map` and `filter`).\n   *\n   * Note: A collection is always iterated in the same order, however that order\n   * may not always be well defined, as is the case for the `Map` and `Set`.\n   *\n   * Collection is the abstract base class for concrete data structures. It\n   * cannot be constructed directly.\n   *\n   * Implementations should extend one of the subclasses, `Collection.Keyed`,\n   * `Collection.Indexed`, or `Collection.Set`.\n   */\n  namespace Collection {\n    /**\n     * @deprecated use `const { isKeyed } = require('immutable')`\n     */\n    function isKeyed(\n      maybeKeyed: unknown\n    ): maybeKeyed is Collection.Keyed<unknown, unknown>;\n\n    /**\n     * @deprecated use `const { isIndexed } = require('immutable')`\n     */\n    function isIndexed(\n      maybeIndexed: unknown\n    ): maybeIndexed is Collection.Indexed<unknown>;\n\n    /**\n     * @deprecated use `const { isAssociative } = require('immutable')`\n     */\n    function isAssociative(\n      maybeAssociative: unknown\n    ): maybeAssociative is\n      | Collection.Keyed<unknown, unknown>\n      | Collection.Indexed<unknown>;\n\n    /**\n     * @deprecated use `const { isOrdered } = require('immutable')`\n     */\n    function isOrdered(maybeOrdered: unknown): boolean;\n\n    /**\n     * Keyed Collections have discrete keys tied to each value.\n     *\n     * When iterating `Collection.Keyed`, each iteration will yield a `[K, V]`\n     * tuple, in other words, `Collection#entries` is the default iterator for\n     * Keyed Collections.\n     */\n    namespace Keyed {}\n\n    /**\n     * Creates a Collection.Keyed\n     *\n     * Similar to `Collection()`, however it expects collection-likes of [K, V]\n     * tuples if not constructed from a Collection.Keyed or JS Object.\n     *\n     * Note: `Collection.Keyed` is a conversion function and not a class, and\n     * does not use the `new` keyword during construction.\n     */\n    function Keyed<K, V>(collection?: Iterable<[K, V]>): Collection.Keyed<K, V>;\n    function Keyed<V>(obj: { [key: string]: V }): Collection.Keyed<string, V>;\n\n    interface Keyed<K, V> extends Collection<K, V> {\n      /**\n       * Deeply converts this Keyed collection to equivalent native JavaScript Object.\n       *\n       * Converts keys to Strings.\n       */\n      toJS(): { [key in string | number | symbol]: DeepCopy<V> };\n\n      /**\n       * Shallowly converts this Keyed collection to equivalent native JavaScript Object.\n       *\n       * Converts keys to Strings.\n       */\n      toJSON(): { [key in string | number | symbol]: V };\n\n      /**\n       * Shallowly converts this collection to an Array.\n       */\n      toArray(): Array<[K, V]>;\n\n      /**\n       * Returns Seq.Keyed.\n       * @override\n       */\n      toSeq(): Seq.Keyed<K, V>;\n\n      // Sequence functions\n\n      /**\n       * Returns a new Collection.Keyed of the same type where the keys and values\n       * have been flipped.\n       *\n       * <!-- runkit:activate -->\n       * ```js\n       * const { Map } = require('immutable')\n       * Map({ a: 'z', b: 'y' }).flip()\n       * // Map { \"z\": \"a\", \"y\": \"b\" }\n       * ```\n       */\n      flip(): Collection.Keyed<V, K>;\n\n      /**\n       * Returns a new Collection with other collections concatenated to this one.\n       */\n      concat<KC, VC>(\n        ...collections: Array<Iterable<[KC, VC]>>\n      ): Collection.Keyed<K | KC, V | VC>;\n      concat<C>(\n        ...collections: Array<{ [key: string]: C }>\n      ): Collection.Keyed<K | string, V | C>;\n\n      /**\n       * Returns a new Collection.Keyed with values passed through a\n       * `mapper` function.\n       *\n       * ```js\n       * const { Collection } = require('immutable')\n       * Collection.Keyed({ a: 1, b: 2 }).map(x => 10 * x)\n       * // Seq { \"a\": 10, \"b\": 20 }\n       * ```\n       *\n       * Note: `map()` always returns a new instance, even if it produced the\n       * same value at every step.\n       */\n      map<M>(\n        mapper: (value: V, key: K, iter: this) => M,\n        context?: unknown\n      ): Collection.Keyed<K, M>;\n\n      /**\n       * Returns a new Collection.Keyed of the same type with keys passed through\n       * a `mapper` function.\n       *\n       * <!-- runkit:activate -->\n       * ```js\n       * const { Map } = require('immutable')\n       * Map({ a: 1, b: 2 }).mapKeys(x => x.toUpperCase())\n       * // Map { \"A\": 1, \"B\": 2 }\n       * ```\n       *\n       * Note: `mapKeys()` always returns a new instance, even if it produced\n       * the same key at every step.\n       */\n      mapKeys<M>(\n        mapper: (key: K, value: V, iter: this) => M,\n        context?: unknown\n      ): Collection.Keyed<M, V>;\n\n      /**\n       * Returns a new Collection.Keyed of the same type with entries\n       * ([key, value] tuples) passed through a `mapper` function.\n       *\n       * <!-- runkit:activate -->\n       * ```js\n       * const { Map } = require('immutable')\n       * Map({ a: 1, b: 2 })\n       *   .mapEntries(([ k, v ]) => [ k.toUpperCase(), v * 2 ])\n       * // Map { \"A\": 2, \"B\": 4 }\n       * ```\n       *\n       * Note: `mapEntries()` always returns a new instance, even if it produced\n       * the same entry at every step.\n       *\n       * If the mapper function returns `undefined`, then the entry will be filtered\n       */\n      mapEntries<KM, VM>(\n        mapper: (\n          entry: [K, V],\n          index: number,\n          iter: this\n        ) => [KM, VM] | undefined,\n        context?: unknown\n      ): Collection.Keyed<KM, VM>;\n\n      /**\n       * Flat-maps the Collection, returning a Collection of the same type.\n       *\n       * Similar to `collection.map(...).flatten(true)`.\n       */\n      flatMap<KM, VM>(\n        mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n        context?: unknown\n      ): Collection.Keyed<KM, VM>;\n\n      /**\n       * Returns a new Collection with only the values for which the `predicate`\n       * function returns true.\n       *\n       * Note: `filter()` always returns a new instance, even if it results in\n       * not filtering out any values.\n       */\n      filter<F extends V>(\n        predicate: (value: V, key: K, iter: this) => value is F,\n        context?: unknown\n      ): Collection.Keyed<K, F>;\n      filter(\n        predicate: (value: V, key: K, iter: this) => unknown,\n        context?: unknown\n      ): this;\n\n      /**\n       * Returns a new keyed Collection with the values for which the\n       * `predicate` function returns false and another for which is returns\n       * true.\n       */\n      partition<F extends V, C>(\n        predicate: (this: C, value: V, key: K, iter: this) => value is F,\n        context?: C\n      ): [Collection.Keyed<K, V>, Collection.Keyed<K, F>];\n      partition<C>(\n        predicate: (this: C, value: V, key: K, iter: this) => unknown,\n        context?: C\n      ): [this, this];\n\n      [Symbol.iterator](): IterableIterator<[K, V]>;\n    }\n\n    /**\n     * Indexed Collections have incrementing numeric keys. They exhibit\n     * slightly different behavior than `Collection.Keyed` for some methods in order\n     * to better mirror the behavior of JavaScript's `Array`, and add methods\n     * which do not make sense on non-indexed Collections such as `indexOf`.\n     *\n     * Unlike JavaScript arrays, `Collection.Indexed`s are always dense. \"Unset\"\n     * indices and `undefined` indices are indistinguishable, and all indices from\n     * 0 to `size` are visited when iterated.\n     *\n     * All Collection.Indexed methods return re-indexed Collections. In other words,\n     * indices always start at 0 and increment until size. If you wish to\n     * preserve indices, using them as keys, convert to a Collection.Keyed by\n     * calling `toKeyedSeq`.\n     */\n    namespace Indexed {}\n\n    /**\n     * Creates a new Collection.Indexed.\n     *\n     * Note: `Collection.Indexed` is a conversion function and not a class, and\n     * does not use the `new` keyword during construction.\n     */\n    function Indexed<T>(\n      collection?: Iterable<T> | ArrayLike<T>\n    ): Collection.Indexed<T>;\n\n    interface Indexed<T> extends Collection<number, T> {\n      /**\n       * Deeply converts this Indexed collection to equivalent native JavaScript Array.\n       */\n      toJS(): Array<DeepCopy<T>>;\n\n      /**\n       * Shallowly converts this Indexed collection to equivalent native JavaScript Array.\n       */\n      toJSON(): Array<T>;\n\n      /**\n       * Shallowly converts this collection to an Array.\n       */\n      toArray(): Array<T>;\n\n      // Reading values\n\n      /**\n       * Returns the value associated with the provided index, or notSetValue if\n       * the index is beyond the bounds of the Collection.\n       *\n       * `index` may be a negative number, which indexes back from the end of the\n       * Collection. `s.get(-1)` gets the last item in the Collection.\n       */\n      get<NSV>(index: number, notSetValue: NSV): T | NSV;\n      get(index: number): T | undefined;\n\n      // Conversion to Seq\n\n      /**\n       * Returns Seq.Indexed.\n       * @override\n       */\n      toSeq(): Seq.Indexed<T>;\n\n      /**\n       * If this is a collection of [key, value] entry tuples, it will return a\n       * Seq.Keyed of those entries.\n       */\n      fromEntrySeq(): Seq.Keyed<unknown, unknown>;\n\n      // Combination\n\n      /**\n       * Returns a Collection of the same type with `separator` between each item\n       * in this Collection.\n       */\n      interpose(separator: T): this;\n\n      /**\n       * Returns a Collection of the same type with the provided `collections`\n       * interleaved into this collection.\n       *\n       * The resulting Collection includes the first item from each, then the\n       * second from each, etc.\n       *\n       * <!-- runkit:activate\n       *      { \"preamble\": \"require('immutable')\"}\n       * -->\n       * ```js\n       * const { List } = require('immutable')\n       * List([ 1, 2, 3 ]).interleave(List([ 'A', 'B', 'C' ]))\n       * // List [ 1, \"A\", 2, \"B\", 3, \"C\" ]\n       * ```\n       *\n       * The shortest Collection stops interleave.\n       *\n       * <!-- runkit:activate\n       *      { \"preamble\": \"const { List } = require('immutable')\" }\n       * -->\n       * ```js\n       * List([ 1, 2, 3 ]).interleave(\n       *   List([ 'A', 'B' ]),\n       *   List([ 'X', 'Y', 'Z' ])\n       * )\n       * // List [ 1, \"A\", \"X\", 2, \"B\", \"Y\" ]\n       * ```\n       *\n       * Since `interleave()` re-indexes values, it produces a complete copy,\n       * which has `O(N)` complexity.\n       *\n       * Note: `interleave` *cannot* be used in `withMutations`.\n       */\n      interleave(...collections: Array<Collection<unknown, T>>): this;\n\n      /**\n       * Splice returns a new indexed Collection by replacing a region of this\n       * Collection with new values. If values are not provided, it only skips the\n       * region to be removed.\n       *\n       * `index` may be a negative number, which indexes back from the end of the\n       * Collection. `s.splice(-2)` splices after the second to last item.\n       *\n       * <!-- runkit:activate -->\n       * ```js\n       * const { List } = require('immutable')\n       * List([ 'a', 'b', 'c', 'd' ]).splice(1, 2, 'q', 'r', 's')\n       * // List [ \"a\", \"q\", \"r\", \"s\", \"d\" ]\n       * ```\n       *\n       * Since `splice()` re-indexes values, it produces a complete copy, which\n       * has `O(N)` complexity.\n       *\n       * Note: `splice` *cannot* be used in `withMutations`.\n       */\n      splice(index: number, removeNum: number, ...values: Array<T>): this;\n\n      /**\n       * Returns a Collection of the same type \"zipped\" with the provided\n       * collections.\n       *\n       * Like `zipWith`, but using the default `zipper`: creating an `Array`.\n       *\n       *\n       * <!-- runkit:activate\n       *      { \"preamble\": \"const { List } = require('immutable')\" }\n       * -->\n       * ```js\n       * const a = List([ 1, 2, 3 ]);\n       * const b = List([ 4, 5, 6 ]);\n       * const c = a.zip(b); // List [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\n       * ```\n       */\n      zip<U>(other: Collection<unknown, U>): Collection.Indexed<[T, U]>;\n      zip<U, V>(\n        other: Collection<unknown, U>,\n        other2: Collection<unknown, V>\n      ): Collection.Indexed<[T, U, V]>;\n      zip(\n        ...collections: Array<Collection<unknown, unknown>>\n      ): Collection.Indexed<unknown>;\n\n      /**\n       * Returns a Collection \"zipped\" with the provided collections.\n       *\n       * Unlike `zip`, `zipAll` continues zipping until the longest collection is\n       * exhausted. Missing values from shorter collections are filled with `undefined`.\n       *\n       * ```js\n       * const a = List([ 1, 2 ]);\n       * const b = List([ 3, 4, 5 ]);\n       * const c = a.zipAll(b); // List [ [ 1, 3 ], [ 2, 4 ], [ undefined, 5 ] ]\n       * ```\n       */\n      zipAll<U>(other: Collection<unknown, U>): Collection.Indexed<[T, U]>;\n      zipAll<U, V>(\n        other: Collection<unknown, U>,\n        other2: Collection<unknown, V>\n      ): Collection.Indexed<[T, U, V]>;\n      zipAll(\n        ...collections: Array<Collection<unknown, unknown>>\n      ): Collection.Indexed<unknown>;\n\n      /**\n       * Returns a Collection of the same type \"zipped\" with the provided\n       * collections by using a custom `zipper` function.\n       *\n       * <!-- runkit:activate\n       *      { \"preamble\": \"const { List } = require('immutable')\" }\n       * -->\n       * ```js\n       * const a = List([ 1, 2, 3 ]);\n       * const b = List([ 4, 5, 6 ]);\n       * const c = a.zipWith((a, b) => a + b, b);\n       * // List [ 5, 7, 9 ]\n       * ```\n       */\n      zipWith<U, Z>(\n        zipper: (value: T, otherValue: U) => Z,\n        otherCollection: Collection<unknown, U>\n      ): Collection.Indexed<Z>;\n      zipWith<U, V, Z>(\n        zipper: (value: T, otherValue: U, thirdValue: V) => Z,\n        otherCollection: Collection<unknown, U>,\n        thirdCollection: Collection<unknown, V>\n      ): Collection.Indexed<Z>;\n      zipWith<Z>(\n        zipper: (...values: Array<unknown>) => Z,\n        ...collections: Array<Collection<unknown, unknown>>\n      ): Collection.Indexed<Z>;\n\n      // Search for value\n\n      /**\n       * Returns the first index at which a given value can be found in the\n       * Collection, or -1 if it is not present.\n       */\n      indexOf(searchValue: T): number;\n\n      /**\n       * Returns the last index at which a given value can be found in the\n       * Collection, or -1 if it is not present.\n       */\n      lastIndexOf(searchValue: T): number;\n\n      /**\n       * Returns the first index in the Collection where a value satisfies the\n       * provided predicate function. Otherwise -1 is returned.\n       */\n      findIndex(\n        predicate: (value: T, index: number, iter: this) => boolean,\n        context?: unknown\n      ): number;\n\n      /**\n       * Returns the last index in the Collection where a value satisfies the\n       * provided predicate function. Otherwise -1 is returned.\n       */\n      findLastIndex(\n        predicate: (value: T, index: number, iter: this) => boolean,\n        context?: unknown\n      ): number;\n\n      // Sequence algorithms\n\n      /**\n       * Returns a new Collection with other collections concatenated to this one.\n       */\n      concat<C>(\n        ...valuesOrCollections: Array<Iterable<C> | C>\n      ): Collection.Indexed<T | C>;\n\n      /**\n       * Returns a new Collection.Indexed with values passed through a\n       * `mapper` function.\n       *\n       * ```js\n       * const { Collection } = require('immutable')\n       * Collection.Indexed([1,2]).map(x => 10 * x)\n       * // Seq [ 1, 2 ]\n       * ```\n       *\n       * Note: `map()` always returns a new instance, even if it produced the\n       * same value at every step.\n       */\n      map<M>(\n        mapper: (value: T, key: number, iter: this) => M,\n        context?: unknown\n      ): Collection.Indexed<M>;\n\n      /**\n       * Flat-maps the Collection, returning a Collection of the same type.\n       *\n       * Similar to `collection.map(...).flatten(true)`.\n       */\n      flatMap<M>(\n        mapper: (value: T, key: number, iter: this) => Iterable<M>,\n        context?: unknown\n      ): Collection.Indexed<M>;\n\n      /**\n       * Returns a new Collection with only the values for which the `predicate`\n       * function returns true.\n       *\n       * Note: `filter()` always returns a new instance, even if it results in\n       * not filtering out any values.\n       */\n      filter<F extends T>(\n        predicate: (value: T, index: number, iter: this) => value is F,\n        context?: unknown\n      ): Collection.Indexed<F>;\n      filter(\n        predicate: (value: T, index: number, iter: this) => unknown,\n        context?: unknown\n      ): this;\n\n      /**\n       * Returns a new indexed Collection with the values for which the\n       * `predicate` function returns false and another for which is returns\n       * true.\n       */\n      partition<F extends T, C>(\n        predicate: (this: C, value: T, index: number, iter: this) => value is F,\n        context?: C\n      ): [Collection.Indexed<T>, Collection.Indexed<F>];\n      partition<C>(\n        predicate: (this: C, value: T, index: number, iter: this) => unknown,\n        context?: C\n      ): [this, this];\n\n      [Symbol.iterator](): IterableIterator<T>;\n    }\n\n    /**\n     * Set Collections only represent values. They have no associated keys or\n     * indices. Duplicate values are possible in the lazy `Seq.Set`s, however\n     * the concrete `Set` Collection does not allow duplicate values.\n     *\n     * Collection methods on Collection.Set such as `map` and `forEach` will provide\n     * the value as both the first and second arguments to the provided function.\n     *\n     * ```js\n     * const { Collection } = require('immutable')\n     * const seq = Collection.Set([ 'A', 'B', 'C' ])\n     * // Seq { \"A\", \"B\", \"C\" }\n     * seq.forEach((v, k) =>\n     *  assert.equal(v, k)\n     * )\n     * ```\n     */\n    namespace Set {}\n\n    /**\n     * Similar to `Collection()`, but always returns a Collection.Set.\n     *\n     * Note: `Collection.Set` is a factory function and not a class, and does\n     * not use the `new` keyword during construction.\n     */\n    function Set<T>(collection?: Iterable<T> | ArrayLike<T>): Collection.Set<T>;\n\n    interface Set<T> extends Collection<T, T> {\n      /**\n       * Deeply converts this Set collection to equivalent native JavaScript Array.\n       */\n      toJS(): Array<DeepCopy<T>>;\n\n      /**\n       * Shallowly converts this Set collection to equivalent native JavaScript Array.\n       */\n      toJSON(): Array<T>;\n\n      /**\n       * Shallowly converts this collection to an Array.\n       */\n      toArray(): Array<T>;\n\n      /**\n       * Returns Seq.Set.\n       * @override\n       */\n      toSeq(): Seq.Set<T>;\n\n      // Sequence algorithms\n\n      /**\n       * Returns a new Collection with other collections concatenated to this one.\n       */\n      concat<U>(...collections: Array<Iterable<U>>): Collection.Set<T | U>;\n\n      /**\n       * Returns a new Collection.Set with values passed through a\n       * `mapper` function.\n       *\n       * ```\n       * Collection.Set([ 1, 2 ]).map(x => 10 * x)\n       * // Seq { 1, 2 }\n       * ```\n       *\n       * Note: `map()` always returns a new instance, even if it produced the\n       * same value at every step.\n       */\n      map<M>(\n        mapper: (value: T, key: T, iter: this) => M,\n        context?: unknown\n      ): Collection.Set<M>;\n\n      /**\n       * Flat-maps the Collection, returning a Collection of the same type.\n       *\n       * Similar to `collection.map(...).flatten(true)`.\n       */\n      flatMap<M>(\n        mapper: (value: T, key: T, iter: this) => Iterable<M>,\n        context?: unknown\n      ): Collection.Set<M>;\n\n      /**\n       * Returns a new Collection with only the values for which the `predicate`\n       * function returns true.\n       *\n       * Note: `filter()` always returns a new instance, even if it results in\n       * not filtering out any values.\n       */\n      filter<F extends T>(\n        predicate: (value: T, key: T, iter: this) => value is F,\n        context?: unknown\n      ): Collection.Set<F>;\n      filter(\n        predicate: (value: T, key: T, iter: this) => unknown,\n        context?: unknown\n      ): this;\n\n      /**\n       * Returns a new set Collection with the values for which the\n       * `predicate` function returns false and another for which is returns\n       * true.\n       */\n      partition<F extends T, C>(\n        predicate: (this: C, value: T, key: T, iter: this) => value is F,\n        context?: C\n      ): [Collection.Set<T>, Collection.Set<F>];\n      partition<C>(\n        predicate: (this: C, value: T, key: T, iter: this) => unknown,\n        context?: C\n      ): [this, this];\n\n      [Symbol.iterator](): IterableIterator<T>;\n    }\n  }\n\n  /**\n   * Creates a Collection.\n   *\n   * The type of Collection created is based on the input.\n   *\n   *   * If an `Collection`, that same `Collection`.\n   *   * If an Array-like, an `Collection.Indexed`.\n   *   * If an Object with an Iterator defined, an `Collection.Indexed`.\n   *   * If an Object, an `Collection.Keyed`.\n   *\n   * This methods forces the conversion of Objects and Strings to Collections.\n   * If you want to ensure that a Collection of one item is returned, use\n   * `Seq.of`.\n   *\n   * Note: An Iterator itself will be treated as an object, becoming a `Seq.Keyed`,\n   * which is usually not what you want. You should turn your Iterator Object into\n   * an iterable object by defining a Symbol.iterator (or @@iterator) method which\n   * returns `this`.\n   *\n   * Note: `Collection` is a conversion function and not a class, and does not\n   * use the `new` keyword during construction.\n   */\n  function Collection<I extends Collection<unknown, unknown>>(collection: I): I;\n  function Collection<T>(\n    collection: Iterable<T> | ArrayLike<T>\n  ): Collection.Indexed<T>;\n  function Collection<V>(obj: {\n    [key: string]: V;\n  }): Collection.Keyed<string, V>;\n  function Collection<K = unknown, V = unknown>(): Collection<K, V>;\n\n  interface Collection<K, V> extends ValueObject {\n    // Value equality\n\n    /**\n     * True if this and the other Collection have value equality, as defined\n     * by `Immutable.is()`.\n     *\n     * Note: This is equivalent to `Immutable.is(this, other)`, but provided to\n     * allow for chained expressions.\n     */\n    equals(other: unknown): boolean;\n\n    /**\n     * Computes and returns the hashed identity for this Collection.\n     *\n     * The `hashCode` of a Collection is used to determine potential equality,\n     * and is used when adding this to a `Set` or as a key in a `Map`, enabling\n     * lookup via a different instance.\n     *\n     * <!-- runkit:activate\n     *      { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n     * -->\n     * ```js\n     * const a = List([ 1, 2, 3 ]);\n     * const b = List([ 1, 2, 3 ]);\n     * assert.notStrictEqual(a, b); // different instances\n     * const set = Set([ a ]);\n     * assert.equal(set.has(b), true);\n     * ```\n     *\n     * If two values have the same `hashCode`, they are [not guaranteed\n     * to be equal][Hash Collision]. If two values have different `hashCode`s,\n     * they must not be equal.\n     *\n     * [Hash Collision]: https://en.wikipedia.org/wiki/Collision_(computer_science)\n     */\n    hashCode(): number;\n\n    // Reading values\n\n    /**\n     * Returns the value associated with the provided key, or notSetValue if\n     * the Collection does not contain this key.\n     *\n     * Note: it is possible a key may be associated with an `undefined` value,\n     * so if `notSetValue` is not provided and this method returns `undefined`,\n     * that does not guarantee the key was not found.\n     */\n    get<NSV>(key: K, notSetValue: NSV): V | NSV;\n    get(key: K): V | undefined;\n\n    /**\n     * True if a key exists within this `Collection`, using `Immutable.is`\n     * to determine equality\n     */\n    has(key: K): boolean;\n\n    /**\n     * True if a value exists within this `Collection`, using `Immutable.is`\n     * to determine equality\n     * @alias contains\n     */\n    includes(value: V): boolean;\n    contains(value: V): boolean;\n\n    /**\n     * In case the `Collection` is not empty returns the first element of the\n     * `Collection`.\n     * In case the `Collection` is empty returns the optional default\n     * value if provided, if no default value is provided returns undefined.\n     */\n    first<NSV = undefined>(notSetValue?: NSV): V | NSV;\n\n    /**\n     * In case the `Collection` is not empty returns the last element of the\n     * `Collection`.\n     * In case the `Collection` is empty returns the optional default\n     * value if provided, if no default value is provided returns undefined.\n     */\n    last<NSV = undefined>(notSetValue?: NSV): V | NSV;\n\n    // Reading deep values\n\n    /**\n     * Returns the value found by following a path of keys or indices through\n     * nested Collections.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map, List } = require('immutable')\n     * const deepData = Map({ x: List([ Map({ y: 123 }) ]) });\n     * deepData.getIn(['x', 0, 'y']) // 123\n     * ```\n     *\n     * Plain JavaScript Object or Arrays may be nested within an Immutable.js\n     * Collection, and getIn() can access those values as well:\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map, List } = require('immutable')\n     * const deepData = Map({ x: [ { y: 123 } ] });\n     * deepData.getIn(['x', 0, 'y']) // 123\n     * ```\n     */\n    getIn(searchKeyPath: Iterable<unknown>, notSetValue?: unknown): unknown;\n\n    /**\n     * True if the result of following a path of keys or indices through nested\n     * Collections results in a set value.\n     */\n    hasIn(searchKeyPath: Iterable<unknown>): boolean;\n\n    // Persistent changes\n\n    /**\n     * This can be very useful as a way to \"chain\" a normal function into a\n     * sequence of methods. RxJS calls this \"let\" and lodash calls it \"thru\".\n     *\n     * For example, to sum a Seq after mapping and filtering:\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Seq } = require('immutable')\n     *\n     * function sum(collection) {\n     *   return collection.reduce((sum, x) => sum + x, 0)\n     * }\n     *\n     * Seq([ 1, 2, 3 ])\n     *   .map(x => x + 1)\n     *   .filter(x => x % 2 === 0)\n     *   .update(sum)\n     * // 6\n     * ```\n     */\n    update<R>(updater: (value: this) => R): R;\n\n    // Conversion to JavaScript types\n\n    /**\n     * Deeply converts this Collection to equivalent native JavaScript Array or Object.\n     *\n     * `Collection.Indexed`, and `Collection.Set` become `Array`, while\n     * `Collection.Keyed` become `Object`, converting keys to Strings.\n     */\n    toJS():\n      | Array<DeepCopy<V>>\n      | { [key in string | number | symbol]: DeepCopy<V> };\n\n    /**\n     * Shallowly converts this Collection to equivalent native JavaScript Array or Object.\n     *\n     * `Collection.Indexed`, and `Collection.Set` become `Array`, while\n     * `Collection.Keyed` become `Object`, converting keys to Strings.\n     */\n    toJSON(): Array<V> | { [key in string | number | symbol]: V };\n\n    /**\n     * Shallowly converts this collection to an Array.\n     *\n     * `Collection.Indexed`, and `Collection.Set` produce an Array of values.\n     * `Collection.Keyed` produce an Array of [key, value] tuples.\n     */\n    toArray(): Array<V> | Array<[K, V]>;\n\n    /**\n     * Shallowly converts this Collection to an Object.\n     *\n     * Converts keys to Strings.\n     */\n    toObject(): { [key: string]: V };\n\n    // Conversion to Collections\n\n    /**\n     * Converts this Collection to a Map, Throws if keys are not hashable.\n     *\n     * Note: This is equivalent to `Map(this.toKeyedSeq())`, but provided\n     * for convenience and to allow for chained expressions.\n     */\n    toMap(): Map<K, V>;\n\n    /**\n     * Converts this Collection to a Map, maintaining the order of iteration.\n     *\n     * Note: This is equivalent to `OrderedMap(this.toKeyedSeq())`, but\n     * provided for convenience and to allow for chained expressions.\n     */\n    toOrderedMap(): OrderedMap<K, V>;\n\n    /**\n     * Converts this Collection to a Set, discarding keys. Throws if values\n     * are not hashable.\n     *\n     * Note: This is equivalent to `Set(this)`, but provided to allow for\n     * chained expressions.\n     */\n    toSet(): Set<V>;\n\n    /**\n     * Converts this Collection to a Set, maintaining the order of iteration and\n     * discarding keys.\n     *\n     * Note: This is equivalent to `OrderedSet(this.valueSeq())`, but provided\n     * for convenience and to allow for chained expressions.\n     */\n    toOrderedSet(): OrderedSet<V>;\n\n    /**\n     * Converts this Collection to a List, discarding keys.\n     *\n     * This is similar to `List(collection)`, but provided to allow for chained\n     * expressions. However, when called on `Map` or other keyed collections,\n     * `collection.toList()` discards the keys and creates a list of only the\n     * values, whereas `List(collection)` creates a list of entry tuples.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map, List } = require('immutable')\n     * var myMap = Map({ a: 'Apple', b: 'Banana' })\n     * List(myMap) // List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n     * myMap.toList() // List [ \"Apple\", \"Banana\" ]\n     * ```\n     */\n    toList(): List<V>;\n\n    /**\n     * Converts this Collection to a Stack, discarding keys. Throws if values\n     * are not hashable.\n     *\n     * Note: This is equivalent to `Stack(this)`, but provided to allow for\n     * chained expressions.\n     */\n    toStack(): Stack<V>;\n\n    // Conversion to Seq\n\n    /**\n     * Converts this Collection to a Seq of the same kind (indexed,\n     * keyed, or set).\n     */\n    toSeq(): Seq<K, V>;\n\n    /**\n     * Returns a Seq.Keyed from this Collection where indices are treated as keys.\n     *\n     * This is useful if you want to operate on an\n     * Collection.Indexed and preserve the [index, value] pairs.\n     *\n     * The returned Seq will have identical iteration order as\n     * this Collection.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Seq } = require('immutable')\n     * const indexedSeq = Seq([ 'A', 'B', 'C' ])\n     * // Seq [ \"A\", \"B\", \"C\" ]\n     * indexedSeq.filter(v => v === 'B')\n     * // Seq [ \"B\" ]\n     * const keyedSeq = indexedSeq.toKeyedSeq()\n     * // Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n     * keyedSeq.filter(v => v === 'B')\n     * // Seq { 1: \"B\" }\n     * ```\n     */\n    toKeyedSeq(): Seq.Keyed<K, V>;\n\n    /**\n     * Returns an Seq.Indexed of the values of this Collection, discarding keys.\n     */\n    toIndexedSeq(): Seq.Indexed<V>;\n\n    /**\n     * Returns a Seq.Set of the values of this Collection, discarding keys.\n     */\n    toSetSeq(): Seq.Set<V>;\n\n    // Iterators\n\n    /**\n     * An iterator of this `Collection`'s keys.\n     *\n     * Note: this will return an ES6 iterator which does not support\n     * Immutable.js sequence algorithms. Use `keySeq` instead, if this is\n     * what you want.\n     */\n    keys(): IterableIterator<K>;\n\n    /**\n     * An iterator of this `Collection`'s values.\n     *\n     * Note: this will return an ES6 iterator which does not support\n     * Immutable.js sequence algorithms. Use `valueSeq` instead, if this is\n     * what you want.\n     */\n    values(): IterableIterator<V>;\n\n    /**\n     * An iterator of this `Collection`'s entries as `[ key, value ]` tuples.\n     *\n     * Note: this will return an ES6 iterator which does not support\n     * Immutable.js sequence algorithms. Use `entrySeq` instead, if this is\n     * what you want.\n     */\n    entries(): IterableIterator<[K, V]>;\n\n    [Symbol.iterator](): IterableIterator<unknown>;\n\n    // Collections (Seq)\n\n    /**\n     * Returns a new Seq.Indexed of the keys of this Collection,\n     * discarding values.\n     */\n    keySeq(): Seq.Indexed<K>;\n\n    /**\n     * Returns an Seq.Indexed of the values of this Collection, discarding keys.\n     */\n    valueSeq(): Seq.Indexed<V>;\n\n    /**\n     * Returns a new Seq.Indexed of [key, value] tuples.\n     */\n    entrySeq(): Seq.Indexed<[K, V]>;\n\n    // Sequence algorithms\n\n    /**\n     * Returns a new Collection of the same type with values passed through a\n     * `mapper` function.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Collection } = require('immutable')\n     * Collection({ a: 1, b: 2 }).map(x => 10 * x)\n     * // Seq { \"a\": 10, \"b\": 20 }\n     * ```\n     *\n     * Note: `map()` always returns a new instance, even if it produced the same\n     * value at every step.\n     */\n    map<M>(\n      mapper: (value: V, key: K, iter: this) => M,\n      context?: unknown\n    ): Collection<K, M>;\n\n    /**\n     * Note: used only for sets, which return Collection<M, M> but are otherwise\n     * identical to normal `map()`.\n     *\n     * @ignore\n     */\n    map(...args: Array<never>): unknown;\n\n    /**\n     * Returns a new Collection of the same type with only the entries for which\n     * the `predicate` function returns true.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * Map({ a: 1, b: 2, c: 3, d: 4}).filter(x => x % 2 === 0)\n     * // Map { \"b\": 2, \"d\": 4 }\n     * ```\n     *\n     * Note: `filter()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filter<F extends V>(\n      predicate: (value: V, key: K, iter: this) => value is F,\n      context?: unknown\n    ): Collection<K, F>;\n    filter(\n      predicate: (value: V, key: K, iter: this) => unknown,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new Collection of the same type with only the entries for which\n     * the `predicate` function returns false.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * Map({ a: 1, b: 2, c: 3, d: 4}).filterNot(x => x % 2 === 0)\n     * // Map { \"a\": 1, \"c\": 3 }\n     * ```\n     *\n     * Note: `filterNot()` always returns a new instance, even if it results in\n     * not filtering out any values.\n     */\n    filterNot(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new Collection with the values for which the `predicate`\n     * function returns false and another for which is returns true.\n     */\n    partition<F extends V, C>(\n      predicate: (this: C, value: V, key: K, iter: this) => value is F,\n      context?: C\n    ): [Collection<K, V>, Collection<K, F>];\n    partition<C>(\n      predicate: (this: C, value: V, key: K, iter: this) => unknown,\n      context?: C\n    ): [this, this];\n\n    /**\n     * Returns a new Collection of the same type in reverse order.\n     */\n    reverse(): this;\n\n    /**\n     * Returns a new Collection of the same type which includes the same entries,\n     * stably sorted by using a `comparator`.\n     *\n     * If a `comparator` is not provided, a default comparator uses `<` and `>`.\n     *\n     * `comparator(valueA, valueB)`:\n     *\n     *   * Returns `0` if the elements should not be swapped.\n     *   * Returns `-1` (or any negative number) if `valueA` comes before `valueB`\n     *   * Returns `1` (or any positive number) if `valueA` comes after `valueB`\n     *   * Is pure, i.e. it must always return the same value for the same pair\n     *     of values.\n     *\n     * When sorting collections which have no defined order, their ordered\n     * equivalents will be returned. e.g. `map.sort()` returns OrderedMap.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * Map({ \"c\": 3, \"a\": 1, \"b\": 2 }).sort((a, b) => {\n     *   if (a < b) { return -1; }\n     *   if (a > b) { return 1; }\n     *   if (a === b) { return 0; }\n     * });\n     * // OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }\n     * ```\n     *\n     * Note: `sort()` Always returns a new instance, even if the original was\n     * already sorted.\n     *\n     * Note: This is always an eager operation.\n     */\n    sort(comparator?: (valueA: V, valueB: V) => number): this;\n\n    /**\n     * Like `sort`, but also accepts a `comparatorValueMapper` which allows for\n     * sorting by more sophisticated means:\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { Map } = require('immutable')\n     * const beattles = Map({\n     *   John: { name: \"Lennon\" },\n     *   Paul: { name: \"McCartney\" },\n     *   George: { name: \"Harrison\" },\n     *   Ringo: { name: \"Starr\" },\n     * });\n     * beattles.sortBy(member => member.name);\n     * ```\n     *\n     * Note: `sortBy()` Always returns a new instance, even if the original was\n     * already sorted.\n     *\n     * Note: This is always an eager operation.\n     */\n    sortBy<C>(\n      comparatorValueMapper: (value: V, key: K, iter: this) => C,\n      comparator?: (valueA: C, valueB: C) => number\n    ): this;\n\n    /**\n     * Returns a `Map` of `Collection`, grouped by the return\n     * value of the `grouper` function.\n     *\n     * Note: This is always an eager operation.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List, Map } = require('immutable')\n     * const listOfMaps = List([\n     *   Map({ v: 0 }),\n     *   Map({ v: 1 }),\n     *   Map({ v: 1 }),\n     *   Map({ v: 0 }),\n     *   Map({ v: 2 })\n     * ])\n     * const groupsOfMaps = listOfMaps.groupBy(x => x.get('v'))\n     * // Map {\n     * //   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n     * //   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n     * //   2: List [ Map{ \"v\": 2 } ],\n     * // }\n     * ```\n     */\n    groupBy<G>(\n      grouper: (value: V, key: K, iter: this) => G,\n      context?: unknown\n    ): Map<G, this>;\n\n    // Side effects\n\n    /**\n     * The `sideEffect` is executed for every entry in the Collection.\n     *\n     * Unlike `Array#forEach`, if any call of `sideEffect` returns\n     * `false`, the iteration will stop. Returns the number of entries iterated\n     * (including the last iteration which returned false).\n     */\n    forEach(\n      sideEffect: (value: V, key: K, iter: this) => unknown,\n      context?: unknown\n    ): number;\n\n    // Creating subsets\n\n    /**\n     * Returns a new Collection of the same type representing a portion of this\n     * Collection from start up to but not including end.\n     *\n     * If begin is negative, it is offset from the end of the Collection. e.g.\n     * `slice(-2)` returns a Collection of the last two entries. If it is not\n     * provided the new Collection will begin at the beginning of this Collection.\n     *\n     * If end is negative, it is offset from the end of the Collection. e.g.\n     * `slice(0, -1)` returns a Collection of everything but the last entry. If\n     * it is not provided, the new Collection will continue through the end of\n     * this Collection.\n     *\n     * If the requested slice is equivalent to the current Collection, then it\n     * will return itself.\n     */\n    slice(begin?: number, end?: number): this;\n\n    /**\n     * Returns a new Collection of the same type containing all entries except\n     * the first.\n     */\n    rest(): this;\n\n    /**\n     * Returns a new Collection of the same type containing all entries except\n     * the last.\n     */\n    butLast(): this;\n\n    /**\n     * Returns a new Collection of the same type which excludes the first `amount`\n     * entries from this Collection.\n     */\n    skip(amount: number): this;\n\n    /**\n     * Returns a new Collection of the same type which excludes the last `amount`\n     * entries from this Collection.\n     */\n    skipLast(amount: number): this;\n\n    /**\n     * Returns a new Collection of the same type which includes entries starting\n     * from when `predicate` first returns false.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable')\n     * List([ 'dog', 'frog', 'cat', 'hat', 'god' ])\n     *   .skipWhile(x => x.match(/g/))\n     * // List [ \"cat\", \"hat\", \"god\" ]\n     * ```\n     */\n    skipWhile(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new Collection of the same type which includes entries starting\n     * from when `predicate` first returns true.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable')\n     * List([ 'dog', 'frog', 'cat', 'hat', 'god' ])\n     *   .skipUntil(x => x.match(/hat/))\n     * // List [ \"hat\", \"god\" ]\n     * ```\n     */\n    skipUntil(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new Collection of the same type which includes the first `amount`\n     * entries from this Collection.\n     */\n    take(amount: number): this;\n\n    /**\n     * Returns a new Collection of the same type which includes the last `amount`\n     * entries from this Collection.\n     */\n    takeLast(amount: number): this;\n\n    /**\n     * Returns a new Collection of the same type which includes entries from this\n     * Collection as long as the `predicate` returns true.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable')\n     * List([ 'dog', 'frog', 'cat', 'hat', 'god' ])\n     *   .takeWhile(x => x.match(/o/))\n     * // List [ \"dog\", \"frog\" ]\n     * ```\n     */\n    takeWhile(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): this;\n\n    /**\n     * Returns a new Collection of the same type which includes entries from this\n     * Collection as long as the `predicate` returns false.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List } = require('immutable')\n     * List([ 'dog', 'frog', 'cat', 'hat', 'god' ])\n     *   .takeUntil(x => x.match(/at/))\n     * // List [ \"dog\", \"frog\" ]\n     * ```\n     */\n    takeUntil(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): this;\n\n    // Combination\n\n    /**\n     * Returns a new Collection of the same type with other values and\n     * collection-like concatenated to this one.\n     *\n     * For Seqs, all entries will be present in the resulting Seq, even if they\n     * have the same key.\n     */\n    concat(\n      ...valuesOrCollections: Array<unknown>\n    ): Collection<unknown, unknown>;\n\n    /**\n     * Flattens nested Collections.\n     *\n     * Will deeply flatten the Collection by default, returning a Collection of the\n     * same type, but a `depth` can be provided in the form of a number or\n     * boolean (where true means to shallowly flatten one level). A depth of 0\n     * (or shallow: false) will deeply flatten.\n     *\n     * Flattens only others Collection, not Arrays or Objects.\n     *\n     * Note: `flatten(true)` operates on Collection<unknown, Collection<K, V>> and\n     * returns Collection<K, V>\n     */\n    flatten(depth?: number): Collection<unknown, unknown>;\n    // tslint:disable-next-line unified-signatures\n    flatten(shallow?: boolean): Collection<unknown, unknown>;\n\n    /**\n     * Flat-maps the Collection, returning a Collection of the same type.\n     *\n     * Similar to `collection.map(...).flatten(true)`.\n     */\n    flatMap<M>(\n      mapper: (value: V, key: K, iter: this) => Iterable<M>,\n      context?: unknown\n    ): Collection<K, M>;\n\n    /**\n     * Flat-maps the Collection, returning a Collection of the same type.\n     *\n     * Similar to `collection.map(...).flatten(true)`.\n     * Used for Dictionaries only.\n     */\n    flatMap<KM, VM>(\n      mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n      context?: unknown\n    ): Collection<KM, VM>;\n\n    // Reducing a value\n\n    /**\n     * Reduces the Collection to a value by calling the `reducer` for every entry\n     * in the Collection and passing along the reduced value.\n     *\n     * If `initialReduction` is not provided, the first item in the\n     * Collection will be used.\n     *\n     * @see `Array#reduce`.\n     */\n    reduce<R>(\n      reducer: (reduction: R, value: V, key: K, iter: this) => R,\n      initialReduction: R,\n      context?: unknown\n    ): R;\n    reduce<R>(\n      reducer: (reduction: V | R, value: V, key: K, iter: this) => R\n    ): R;\n\n    /**\n     * Reduces the Collection in reverse (from the right side).\n     *\n     * Note: Similar to this.reverse().reduce(), and provided for parity\n     * with `Array#reduceRight`.\n     */\n    reduceRight<R>(\n      reducer: (reduction: R, value: V, key: K, iter: this) => R,\n      initialReduction: R,\n      context?: unknown\n    ): R;\n    reduceRight<R>(\n      reducer: (reduction: V | R, value: V, key: K, iter: this) => R\n    ): R;\n\n    /**\n     * True if `predicate` returns true for all entries in the Collection.\n     */\n    every(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): boolean;\n\n    /**\n     * True if `predicate` returns true for any entry in the Collection.\n     */\n    some(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): boolean;\n\n    /**\n     * Joins values together as a string, inserting a separator between each.\n     * The default separator is `\",\"`.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns true if this Collection includes no values.\n     *\n     * For some lazy `Seq`, `isEmpty` might need to iterate to determine\n     * emptiness. At most one iteration will occur.\n     */\n    isEmpty(): boolean;\n\n    /**\n     * Returns the size of this Collection.\n     *\n     * Regardless of if this Collection can describe its size lazily (some Seqs\n     * cannot), this method will always return the correct size. E.g. it\n     * evaluates a lazy `Seq` if necessary.\n     *\n     * If `predicate` is provided, then this returns the count of entries in the\n     * Collection for which the `predicate` returns true.\n     */\n    count(): number;\n    count(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): number;\n\n    /**\n     * Returns a `Seq.Keyed` of counts, grouped by the return value of\n     * the `grouper` function.\n     *\n     * Note: This is not a lazy operation.\n     */\n    countBy<G>(\n      grouper: (value: V, key: K, iter: this) => G,\n      context?: unknown\n    ): Map<G, number>;\n\n    // Search for value\n\n    /**\n     * Returns the first value for which the `predicate` returns true.\n     */\n    find(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown,\n      notSetValue?: V\n    ): V | undefined;\n\n    /**\n     * Returns the last value for which the `predicate` returns true.\n     *\n     * Note: `predicate` will be called for each entry in reverse.\n     */\n    findLast(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown,\n      notSetValue?: V\n    ): V | undefined;\n\n    /**\n     * Returns the first [key, value] entry for which the `predicate` returns true.\n     */\n    findEntry(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown,\n      notSetValue?: V\n    ): [K, V] | undefined;\n\n    /**\n     * Returns the last [key, value] entry for which the `predicate`\n     * returns true.\n     *\n     * Note: `predicate` will be called for each entry in reverse.\n     */\n    findLastEntry(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown,\n      notSetValue?: V\n    ): [K, V] | undefined;\n\n    /**\n     * Returns the key for which the `predicate` returns true.\n     */\n    findKey(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): K | undefined;\n\n    /**\n     * Returns the last key for which the `predicate` returns true.\n     *\n     * Note: `predicate` will be called for each entry in reverse.\n     */\n    findLastKey(\n      predicate: (value: V, key: K, iter: this) => boolean,\n      context?: unknown\n    ): K | undefined;\n\n    /**\n     * Returns the key associated with the search value, or undefined.\n     */\n    keyOf(searchValue: V): K | undefined;\n\n    /**\n     * Returns the last key associated with the search value, or undefined.\n     */\n    lastKeyOf(searchValue: V): K | undefined;\n\n    /**\n     * Returns the maximum value in this collection. If any values are\n     * comparatively equivalent, the first one found will be returned.\n     *\n     * The `comparator` is used in the same way as `Collection#sort`. If it is not\n     * provided, the default comparator is `>`.\n     *\n     * When two values are considered equivalent, the first encountered will be\n     * returned. Otherwise, `max` will operate independent of the order of input\n     * as long as the comparator is commutative. The default comparator `>` is\n     * commutative *only* when types do not differ.\n     *\n     * If `comparator` returns 0 and either value is NaN, undefined, or null,\n     * that value will be returned.\n     */\n    max(comparator?: (valueA: V, valueB: V) => number): V | undefined;\n\n    /**\n     * Like `max`, but also accepts a `comparatorValueMapper` which allows for\n     * comparing by more sophisticated means:\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List, } = require('immutable');\n     * const l = List([\n     *   { name: 'Bob', avgHit: 1 },\n     *   { name: 'Max', avgHit: 3 },\n     *   { name: 'Lili', avgHit: 2 } ,\n     * ]);\n     * l.maxBy(i => i.avgHit); // will output { name: 'Max', avgHit: 3 }\n     * ```\n     */\n    maxBy<C>(\n      comparatorValueMapper: (value: V, key: K, iter: this) => C,\n      comparator?: (valueA: C, valueB: C) => number\n    ): V | undefined;\n\n    /**\n     * Returns the minimum value in this collection. If any values are\n     * comparatively equivalent, the first one found will be returned.\n     *\n     * The `comparator` is used in the same way as `Collection#sort`. If it is not\n     * provided, the default comparator is `<`.\n     *\n     * When two values are considered equivalent, the first encountered will be\n     * returned. Otherwise, `min` will operate independent of the order of input\n     * as long as the comparator is commutative. The default comparator `<` is\n     * commutative *only* when types do not differ.\n     *\n     * If `comparator` returns 0 and either value is NaN, undefined, or null,\n     * that value will be returned.\n     */\n    min(comparator?: (valueA: V, valueB: V) => number): V | undefined;\n\n    /**\n     * Like `min`, but also accepts a `comparatorValueMapper` which allows for\n     * comparing by more sophisticated means:\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List, } = require('immutable');\n     * const l = List([\n     *   { name: 'Bob', avgHit: 1 },\n     *   { name: 'Max', avgHit: 3 },\n     *   { name: 'Lili', avgHit: 2 } ,\n     * ]);\n     * l.minBy(i => i.avgHit); // will output { name: 'Bob', avgHit: 1 }\n     * ```\n     */\n    minBy<C>(\n      comparatorValueMapper: (value: V, key: K, iter: this) => C,\n      comparator?: (valueA: C, valueB: C) => number\n    ): V | undefined;\n\n    // Comparison\n\n    /**\n     * True if `iter` includes every value in this Collection.\n     */\n    isSubset(iter: Iterable<V>): boolean;\n\n    /**\n     * True if this Collection includes every value in `iter`.\n     */\n    isSuperset(iter: Iterable<V>): boolean;\n  }\n\n  /**\n   * The interface to fulfill to qualify as a Value Object.\n   */\n  interface ValueObject {\n    /**\n     * True if this and the other Collection have value equality, as defined\n     * by `Immutable.is()`.\n     *\n     * Note: This is equivalent to `Immutable.is(this, other)`, but provided to\n     * allow for chained expressions.\n     */\n    equals(other: unknown): boolean;\n\n    /**\n     * Computes and returns the hashed identity for this Collection.\n     *\n     * The `hashCode` of a Collection is used to determine potential equality,\n     * and is used when adding this to a `Set` or as a key in a `Map`, enabling\n     * lookup via a different instance.\n     *\n     * <!-- runkit:activate -->\n     * ```js\n     * const { List, Set } = require('immutable');\n     * const a = List([ 1, 2, 3 ]);\n     * const b = List([ 1, 2, 3 ]);\n     * assert.notStrictEqual(a, b); // different instances\n     * const set = Set([ a ]);\n     * assert.equal(set.has(b), true);\n     * ```\n     *\n     * Note: hashCode() MUST return a Uint32 number. The easiest way to\n     * guarantee this is to return `myHash | 0` from a custom implementation.\n     *\n     * If two values have the same `hashCode`, they are [not guaranteed\n     * to be equal][Hash Collision]. If two values have different `hashCode`s,\n     * they must not be equal.\n     *\n     * Note: `hashCode()` is not guaranteed to always be called before\n     * `equals()`. Most but not all Immutable.js collections use hash codes to\n     * organize their internal data structures, while all Immutable.js\n     * collections use equality during lookups.\n     *\n     * [Hash Collision]: https://en.wikipedia.org/wiki/Collision_(computer_science)\n     */\n    hashCode(): number;\n  }\n\n  /**\n   * Deeply converts plain JS objects and arrays to Immutable Maps and Lists.\n   *\n   * `fromJS` will convert Arrays and [array-like objects][2] to a List, and\n   * plain objects (without a custom prototype) to a Map. [Iterable objects][3]\n   * may be converted to List, Map, or Set.\n   *\n   * If a `reviver` is optionally provided, it will be called with every\n   * collection as a Seq (beginning with the most nested collections\n   * and proceeding to the top-level collection itself), along with the key\n   * referring to each collection and the parent JS object provided as `this`.\n   * For the top level, object, the key will be `\"\"`. This `reviver` is expected\n   * to return a new Immutable Collection, allowing for custom conversions from\n   * deep JS objects. Finally, a `path` is provided which is the sequence of\n   * keys to this value from the starting value.\n   *\n   * `reviver` acts similarly to the [same parameter in `JSON.parse`][1].\n   *\n   * If `reviver` is not provided, the default behavior will convert Objects\n   * into Maps and Arrays into Lists like so:\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { fromJS, isKeyed } = require('immutable')\n   * function (key, value) {\n   *   return isKeyed(value) ? value.toMap() : value.toList()\n   * }\n   * ```\n   *\n   * Accordingly, this example converts native JS data to OrderedMap and List:\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { fromJS, isKeyed } = require('immutable')\n   * fromJS({ a: {b: [10, 20, 30]}, c: 40}, function (key, value, path) {\n   *   console.log(key, value, path)\n   *   return isKeyed(value) ? value.toOrderedMap() : value.toList()\n   * })\n   *\n   * > \"b\", [ 10, 20, 30 ], [ \"a\", \"b\" ]\n   * > \"a\", {b: [10, 20, 30]}, [ \"a\" ]\n   * > \"\", {a: {b: [10, 20, 30]}, c: 40}, []\n   * ```\n   *\n   * Keep in mind, when using JS objects to construct Immutable Maps, that\n   * JavaScript Object properties are always strings, even if written in a\n   * quote-less shorthand, while Immutable Maps accept keys of any type.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { Map } = require('immutable')\n   * let obj = { 1: \"one\" };\n   * Object.keys(obj); // [ \"1\" ]\n   * assert.equal(obj[\"1\"], obj[1]); // \"one\" === \"one\"\n   *\n   * let map = Map(obj);\n   * assert.notEqual(map.get(\"1\"), map.get(1)); // \"one\" !== undefined\n   * ```\n   *\n   * Property access for JavaScript Objects first converts the key to a string,\n   * but since Immutable Map keys can be of any type the argument to `get()` is\n   * not altered.\n   *\n   * [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\n   *      \"Using the reviver parameter\"\n   * [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\n   *      \"Working with array-like objects\"\n   * [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\n   *      \"The iterable protocol\"\n   */\n  function fromJS(\n    jsValue: unknown,\n    reviver: (\n      key: string | number,\n      sequence: Collection.Keyed<string, unknown> | Collection.Indexed<unknown>,\n      path?: Array<string | number>\n    ) => unknown\n  ): Collection<unknown, unknown>;\n  function fromJS<JSValue>(\n    jsValue: JSValue,\n    reviver?: undefined\n  ): FromJS<JSValue>;\n\n  type FromJS<JSValue> = JSValue extends FromJSNoTransform\n    ? JSValue\n    : JSValue extends Array<any>\n    ? FromJSArray<JSValue>\n    : JSValue extends {}\n    ? FromJSObject<JSValue>\n    : any;\n\n  type FromJSNoTransform =\n    | Collection<any, any>\n    | number\n    | string\n    | null\n    | undefined;\n\n  type FromJSArray<JSValue> = JSValue extends Array<infer T>\n    ? List<FromJS<T>>\n    : never;\n\n  type FromJSObject<JSValue> = JSValue extends {}\n    ? Map<keyof JSValue, FromJS<JSValue[keyof JSValue]>>\n    : never;\n\n  /**\n   * Value equality check with semantics similar to `Object.is`, but treats\n   * Immutable `Collection`s as values, equal if the second `Collection` includes\n   * equivalent values.\n   *\n   * It's used throughout Immutable when checking for equality, including `Map`\n   * key equality and `Set` membership.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { Map, is } = require('immutable')\n   * const map1 = Map({ a: 1, b: 1, c: 1 })\n   * const map2 = Map({ a: 1, b: 1, c: 1 })\n   * assert.equal(map1 !== map2, true)\n   * assert.equal(Object.is(map1, map2), false)\n   * assert.equal(is(map1, map2), true)\n   * ```\n   *\n   * `is()` compares primitive types like strings and numbers, Immutable.js\n   * collections like `Map` and `List`, but also any custom object which\n   * implements `ValueObject` by providing `equals()` and `hashCode()` methods.\n   *\n   * Note: Unlike `Object.is`, `Immutable.is` assumes `0` and `-0` are the same\n   * value, matching the behavior of ES6 Map key equality.\n   */\n  function is(first: unknown, second: unknown): boolean;\n\n  /**\n   * The `hash()` function is an important part of how Immutable determines if\n   * two values are equivalent and is used to determine how to store those\n   * values. Provided with any value, `hash()` will return a 31-bit integer.\n   *\n   * When designing Objects which may be equal, it's important that when a\n   * `.equals()` method returns true, that both values `.hashCode()` method\n   * return the same value. `hash()` may be used to produce those values.\n   *\n   * For non-Immutable Objects that do not provide a `.hashCode()` functions\n   * (including plain Objects, plain Arrays, Date objects, etc), a unique hash\n   * value will be created for each *instance*. That is, the create hash\n   * represents referential equality, and not value equality for Objects. This\n   * ensures that if that Object is mutated over time that its hash code will\n   * remain consistent, allowing Objects to be used as keys and values in\n   * Immutable.js collections.\n   *\n   * Note that `hash()` attempts to balance between speed and avoiding\n   * collisions, however it makes no attempt to produce secure hashes.\n   *\n   * *New in Version 4.0*\n   */\n  function hash(value: unknown): number;\n\n  /**\n   * True if `maybeImmutable` is an Immutable Collection or Record.\n   *\n   * Note: Still returns true even if the collections is within a `withMutations()`.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { isImmutable, Map, List, Stack } = require('immutable');\n   * isImmutable([]); // false\n   * isImmutable({}); // false\n   * isImmutable(Map()); // true\n   * isImmutable(List()); // true\n   * isImmutable(Stack()); // true\n   * isImmutable(Map().asMutable()); // true\n   * ```\n   */\n  function isImmutable(\n    maybeImmutable: unknown\n  ): maybeImmutable is Collection<unknown, unknown>;\n\n  /**\n   * True if `maybeCollection` is a Collection, or any of its subclasses.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { isCollection, Map, List, Stack } = require('immutable');\n   * isCollection([]); // false\n   * isCollection({}); // false\n   * isCollection(Map()); // true\n   * isCollection(List()); // true\n   * isCollection(Stack()); // true\n   * ```\n   */\n  function isCollection(\n    maybeCollection: unknown\n  ): maybeCollection is Collection<unknown, unknown>;\n\n  /**\n   * True if `maybeKeyed` is a Collection.Keyed, or any of its subclasses.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { isKeyed, Map, List, Stack } = require('immutable');\n   * isKeyed([]); // false\n   * isKeyed({}); // false\n   * isKeyed(Map()); // true\n   * isKeyed(List()); // false\n   * isKeyed(Stack()); // false\n   * ```\n   */\n  function isKeyed(\n    maybeKeyed: unknown\n  ): maybeKeyed is Collection.Keyed<unknown, unknown>;\n\n  /**\n   * True if `maybeIndexed` is a Collection.Indexed, or any of its subclasses.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { isIndexed, Map, List, Stack, Set } = require('immutable');\n   * isIndexed([]); // false\n   * isIndexed({}); // false\n   * isIndexed(Map()); // false\n   * isIndexed(List()); // true\n   * isIndexed(Stack()); // true\n   * isIndexed(Set()); // false\n   * ```\n   */\n  function isIndexed(\n    maybeIndexed: unknown\n  ): maybeIndexed is Collection.Indexed<unknown>;\n\n  /**\n   * True if `maybeAssociative` is either a Keyed or Indexed Collection.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { isAssociative, Map, List, Stack, Set } = require('immutable');\n   * isAssociative([]); // false\n   * isAssociative({}); // false\n   * isAssociative(Map()); // true\n   * isAssociative(List()); // true\n   * isAssociative(Stack()); // true\n   * isAssociative(Set()); // false\n   * ```\n   */\n  function isAssociative(\n    maybeAssociative: unknown\n  ): maybeAssociative is\n    | Collection.Keyed<unknown, unknown>\n    | Collection.Indexed<unknown>;\n\n  /**\n   * True if `maybeOrdered` is a Collection where iteration order is well\n   * defined. True for Collection.Indexed as well as OrderedMap and OrderedSet.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { isOrdered, Map, OrderedMap, List, Set } = require('immutable');\n   * isOrdered([]); // false\n   * isOrdered({}); // false\n   * isOrdered(Map()); // false\n   * isOrdered(OrderedMap()); // true\n   * isOrdered(List()); // true\n   * isOrdered(Set()); // false\n   * ```\n   */\n  function isOrdered(maybeOrdered: unknown): boolean;\n\n  /**\n   * True if `maybeValue` is a JavaScript Object which has *both* `equals()`\n   * and `hashCode()` methods.\n   *\n   * Any two instances of *value objects* can be compared for value equality with\n   * `Immutable.is()` and can be used as keys in a `Map` or members in a `Set`.\n   */\n  function isValueObject(maybeValue: unknown): maybeValue is ValueObject;\n\n  /**\n   * True if `maybeSeq` is a Seq.\n   */\n  function isSeq(\n    maybeSeq: unknown\n  ): maybeSeq is\n    | Seq.Indexed<unknown>\n    | Seq.Keyed<unknown, unknown>\n    | Seq.Set<unknown>;\n\n  /**\n   * True if `maybeList` is a List.\n   */\n  function isList(maybeList: unknown): maybeList is List<unknown>;\n\n  /**\n   * True if `maybeMap` is a Map.\n   *\n   * Also true for OrderedMaps.\n   */\n  function isMap(maybeMap: unknown): maybeMap is Map<unknown, unknown>;\n\n  /**\n   * True if `maybeOrderedMap` is an OrderedMap.\n   */\n  function isOrderedMap(\n    maybeOrderedMap: unknown\n  ): maybeOrderedMap is OrderedMap<unknown, unknown>;\n\n  /**\n   * True if `maybeStack` is a Stack.\n   */\n  function isStack(maybeStack: unknown): maybeStack is Stack<unknown>;\n\n  /**\n   * True if `maybeSet` is a Set.\n   *\n   * Also true for OrderedSets.\n   */\n  function isSet(maybeSet: unknown): maybeSet is Set<unknown>;\n\n  /**\n   * True if `maybeOrderedSet` is an OrderedSet.\n   */\n  function isOrderedSet(\n    maybeOrderedSet: unknown\n  ): maybeOrderedSet is OrderedSet<unknown>;\n\n  /**\n   * True if `maybeRecord` is a Record.\n   */\n  function isRecord(maybeRecord: unknown): maybeRecord is Record<{}>;\n\n  /**\n   * Returns the value within the provided collection associated with the\n   * provided key, or notSetValue if the key is not defined in the collection.\n   *\n   * A functional alternative to `collection.get(key)` which will also work on\n   * plain Objects and Arrays as an alternative for `collection[key]`.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { get } = require('immutable')\n   * get([ 'dog', 'frog', 'cat' ], 2) // 'frog'\n   * get({ x: 123, y: 456 }, 'x') // 123\n   * get({ x: 123, y: 456 }, 'z', 'ifNotSet') // 'ifNotSet'\n   * ```\n   */\n  function get<K, V>(collection: Collection<K, V>, key: K): V | undefined;\n  function get<K, V, NSV>(\n    collection: Collection<K, V>,\n    key: K,\n    notSetValue: NSV\n  ): V | NSV;\n  function get<TProps extends object, K extends keyof TProps>(\n    record: Record<TProps>,\n    key: K,\n    notSetValue: unknown\n  ): TProps[K];\n  function get<V>(collection: Array<V>, key: number): V | undefined;\n  function get<V, NSV>(\n    collection: Array<V>,\n    key: number,\n    notSetValue: NSV\n  ): V | NSV;\n  function get<C extends object, K extends keyof C>(\n    object: C,\n    key: K,\n    notSetValue: unknown\n  ): C[K];\n  function get<V>(collection: { [key: string]: V }, key: string): V | undefined;\n  function get<V, NSV>(\n    collection: { [key: string]: V },\n    key: string,\n    notSetValue: NSV\n  ): V | NSV;\n\n  /**\n   * Returns true if the key is defined in the provided collection.\n   *\n   * A functional alternative to `collection.has(key)` which will also work with\n   * plain Objects and Arrays as an alternative for\n   * `collection.hasOwnProperty(key)`.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { has } = require('immutable')\n   * has([ 'dog', 'frog', 'cat' ], 2) // true\n   * has([ 'dog', 'frog', 'cat' ], 5) // false\n   * has({ x: 123, y: 456 }, 'x') // true\n   * has({ x: 123, y: 456 }, 'z') // false\n   * ```\n   */\n  function has(collection: object, key: unknown): boolean;\n\n  /**\n   * Returns a copy of the collection with the value at key removed.\n   *\n   * A functional alternative to `collection.remove(key)` which will also work\n   * with plain Objects and Arrays as an alternative for\n   * `delete collectionCopy[key]`.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { remove } = require('immutable')\n   * const originalArray = [ 'dog', 'frog', 'cat' ]\n   * remove(originalArray, 1) // [ 'dog', 'cat' ]\n   * console.log(originalArray) // [ 'dog', 'frog', 'cat' ]\n   * const originalObject = { x: 123, y: 456 }\n   * remove(originalObject, 'x') // { y: 456 }\n   * console.log(originalObject) // { x: 123, y: 456 }\n   * ```\n   */\n  function remove<K, C extends Collection<K, unknown>>(\n    collection: C,\n    key: K\n  ): C;\n  function remove<\n    TProps extends object,\n    C extends Record<TProps>,\n    K extends keyof TProps\n  >(collection: C, key: K): C;\n  function remove<C extends Array<unknown>>(collection: C, key: number): C;\n  function remove<C, K extends keyof C>(collection: C, key: K): C;\n  function remove<C extends { [key: string]: unknown }, K extends keyof C>(\n    collection: C,\n    key: K\n  ): C;\n\n  /**\n   * Returns a copy of the collection with the value at key set to the provided\n   * value.\n   *\n   * A functional alternative to `collection.set(key, value)` which will also\n   * work with plain Objects and Arrays as an alternative for\n   * `collectionCopy[key] = value`.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { set } = require('immutable')\n   * const originalArray = [ 'dog', 'frog', 'cat' ]\n   * set(originalArray, 1, 'cow') // [ 'dog', 'cow', 'cat' ]\n   * console.log(originalArray) // [ 'dog', 'frog', 'cat' ]\n   * const originalObject = { x: 123, y: 456 }\n   * set(originalObject, 'x', 789) // { x: 789, y: 456 }\n   * console.log(originalObject) // { x: 123, y: 456 }\n   * ```\n   */\n  function set<K, V, C extends Collection<K, V>>(\n    collection: C,\n    key: K,\n    value: V\n  ): C;\n  function set<\n    TProps extends object,\n    C extends Record<TProps>,\n    K extends keyof TProps\n  >(record: C, key: K, value: TProps[K]): C;\n  function set<V, C extends Array<V>>(collection: C, key: number, value: V): C;\n  function set<C, K extends keyof C>(object: C, key: K, value: C[K]): C;\n  function set<V, C extends { [key: string]: V }>(\n    collection: C,\n    key: string,\n    value: V\n  ): C;\n\n  /**\n   * Returns a copy of the collection with the value at key set to the result of\n   * providing the existing value to the updating function.\n   *\n   * A functional alternative to `collection.update(key, fn)` which will also\n   * work with plain Objects and Arrays as an alternative for\n   * `collectionCopy[key] = fn(collection[key])`.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { update } = require('immutable')\n   * const originalArray = [ 'dog', 'frog', 'cat' ]\n   * update(originalArray, 1, val => val.toUpperCase()) // [ 'dog', 'FROG', 'cat' ]\n   * console.log(originalArray) // [ 'dog', 'frog', 'cat' ]\n   * const originalObject = { x: 123, y: 456 }\n   * update(originalObject, 'x', val => val * 6) // { x: 738, y: 456 }\n   * console.log(originalObject) // { x: 123, y: 456 }\n   * ```\n   */\n  function update<K, V, C extends Collection<K, V>>(\n    collection: C,\n    key: K,\n    updater: (value: V | undefined) => V\n  ): C;\n  function update<K, V, C extends Collection<K, V>, NSV>(\n    collection: C,\n    key: K,\n    notSetValue: NSV,\n    updater: (value: V | NSV) => V\n  ): C;\n  function update<\n    TProps extends object,\n    C extends Record<TProps>,\n    K extends keyof TProps\n  >(record: C, key: K, updater: (value: TProps[K]) => TProps[K]): C;\n  function update<\n    TProps extends object,\n    C extends Record<TProps>,\n    K extends keyof TProps,\n    NSV\n  >(\n    record: C,\n    key: K,\n    notSetValue: NSV,\n    updater: (value: TProps[K] | NSV) => TProps[K]\n  ): C;\n  function update<V>(\n    collection: Array<V>,\n    key: number,\n    updater: (value: V) => V\n  ): Array<V>;\n  function update<V, NSV>(\n    collection: Array<V>,\n    key: number,\n    notSetValue: NSV,\n    updater: (value: V | NSV) => V\n  ): Array<V>;\n  function update<C, K extends keyof C>(\n    object: C,\n    key: K,\n    updater: (value: C[K]) => C[K]\n  ): C;\n  function update<C, K extends keyof C, NSV>(\n    object: C,\n    key: K,\n    notSetValue: NSV,\n    updater: (value: C[K] | NSV) => C[K]\n  ): C;\n  function update<V, C extends { [key: string]: V }, K extends keyof C>(\n    collection: C,\n    key: K,\n    updater: (value: V) => V\n  ): { [key: string]: V };\n  function update<V, C extends { [key: string]: V }, K extends keyof C, NSV>(\n    collection: C,\n    key: K,\n    notSetValue: NSV,\n    updater: (value: V | NSV) => V\n  ): { [key: string]: V };\n\n  /**\n   * Returns the value at the provided key path starting at the provided\n   * collection, or notSetValue if the key path is not defined.\n   *\n   * A functional alternative to `collection.getIn(keypath)` which will also\n   * work with plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { getIn } = require('immutable')\n   * getIn({ x: { y: { z: 123 }}}, ['x', 'y', 'z']) // 123\n   * getIn({ x: { y: { z: 123 }}}, ['x', 'q', 'p'], 'ifNotSet') // 'ifNotSet'\n   * ```\n   */\n  function getIn(\n    collection: unknown,\n    keyPath: Iterable<unknown>,\n    notSetValue?: unknown\n  ): unknown;\n\n  /**\n   * Returns true if the key path is defined in the provided collection.\n   *\n   * A functional alternative to `collection.hasIn(keypath)` which will also\n   * work with plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { hasIn } = require('immutable')\n   * hasIn({ x: { y: { z: 123 }}}, ['x', 'y', 'z']) // true\n   * hasIn({ x: { y: { z: 123 }}}, ['x', 'q', 'p']) // false\n   * ```\n   */\n  function hasIn(collection: unknown, keyPath: Iterable<unknown>): boolean;\n\n  /**\n   * Returns a copy of the collection with the value at the key path removed.\n   *\n   * A functional alternative to `collection.removeIn(keypath)` which will also\n   * work with plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { removeIn } = require('immutable')\n   * const original = { x: { y: { z: 123 }}}\n   * removeIn(original, ['x', 'y', 'z']) // { x: { y: {}}}\n   * console.log(original) // { x: { y: { z: 123 }}}\n   * ```\n   */\n  function removeIn<C>(collection: C, keyPath: Iterable<unknown>): C;\n\n  /**\n   * Returns a copy of the collection with the value at the key path set to the\n   * provided value.\n   *\n   * A functional alternative to `collection.setIn(keypath)` which will also\n   * work with plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { setIn } = require('immutable')\n   * const original = { x: { y: { z: 123 }}}\n   * setIn(original, ['x', 'y', 'z'], 456) // { x: { y: { z: 456 }}}\n   * console.log(original) // { x: { y: { z: 123 }}}\n   * ```\n   */\n  function setIn<C>(\n    collection: C,\n    keyPath: Iterable<unknown>,\n    value: unknown\n  ): C;\n\n  /**\n   * Returns a copy of the collection with the value at key path set to the\n   * result of providing the existing value to the updating function.\n   *\n   * A functional alternative to `collection.updateIn(keypath)` which will also\n   * work with plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { updateIn } = require('immutable')\n   * const original = { x: { y: { z: 123 }}}\n   * updateIn(original, ['x', 'y', 'z'], val => val * 6) // { x: { y: { z: 738 }}}\n   * console.log(original) // { x: { y: { z: 123 }}}\n   * ```\n   */\n  function updateIn<C>(\n    collection: C,\n    keyPath: Iterable<unknown>,\n    updater: (value: unknown) => unknown\n  ): C;\n  function updateIn<C>(\n    collection: C,\n    keyPath: Iterable<unknown>,\n    notSetValue: unknown,\n    updater: (value: unknown) => unknown\n  ): C;\n\n  /**\n   * Returns a copy of the collection with the remaining collections merged in.\n   *\n   * A functional alternative to `collection.merge()` which will also work with\n   * plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { merge } = require('immutable')\n   * const original = { x: 123, y: 456 }\n   * merge(original, { y: 789, z: 'abc' }) // { x: 123, y: 789, z: 'abc' }\n   * console.log(original) // { x: 123, y: 456 }\n   * ```\n   */\n  function merge<C>(\n    collection: C,\n    ...collections: Array<\n      | Iterable<unknown>\n      | Iterable<[unknown, unknown]>\n      | { [key: string]: unknown }\n    >\n  ): C;\n\n  /**\n   * Returns a copy of the collection with the remaining collections merged in,\n   * calling the `merger` function whenever an existing value is encountered.\n   *\n   * A functional alternative to `collection.mergeWith()` which will also work\n   * with plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { mergeWith } = require('immutable')\n   * const original = { x: 123, y: 456 }\n   * mergeWith(\n   *   (oldVal, newVal) => oldVal + newVal,\n   *   original,\n   *   { y: 789, z: 'abc' }\n   * ) // { x: 123, y: 1245, z: 'abc' }\n   * console.log(original) // { x: 123, y: 456 }\n   * ```\n   */\n  function mergeWith<C>(\n    merger: (oldVal: unknown, newVal: unknown, key: unknown) => unknown,\n    collection: C,\n    ...collections: Array<\n      | Iterable<unknown>\n      | Iterable<[unknown, unknown]>\n      | { [key: string]: unknown }\n    >\n  ): C;\n\n  /**\n   * Like `merge()`, but when two compatible collections are encountered with\n   * the same key, it merges them as well, recursing deeply through the nested\n   * data. Two collections are considered to be compatible (and thus will be\n   * merged together) if they both fall into one of three categories: keyed\n   * (e.g., `Map`s, `Record`s, and objects), indexed (e.g., `List`s and\n   * arrays), or set-like (e.g., `Set`s). If they fall into separate\n   * categories, `mergeDeep` will replace the existing collection with the\n   * collection being merged in. This behavior can be customized by using\n   * `mergeDeepWith()`.\n   *\n   * Note: Indexed and set-like collections are merged using\n   * `concat()`/`union()` and therefore do not recurse.\n   *\n   * A functional alternative to `collection.mergeDeep()` which will also work\n   * with plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { mergeDeep } = require('immutable')\n   * const original = { x: { y: 123 }}\n   * mergeDeep(original, { x: { z: 456 }}) // { x: { y: 123, z: 456 }}\n   * console.log(original) // { x: { y: 123 }}\n   * ```\n   */\n  function mergeDeep<C>(\n    collection: C,\n    ...collections: Array<\n      | Iterable<unknown>\n      | Iterable<[unknown, unknown]>\n      | { [key: string]: unknown }\n    >\n  ): C;\n\n  /**\n   * Like `mergeDeep()`, but when two non-collections or incompatible\n   * collections are encountered at the same key, it uses the `merger` function\n   * to determine the resulting value. Collections are considered incompatible\n   * if they fall into separate categories between keyed, indexed, and set-like.\n   *\n   * A functional alternative to `collection.mergeDeepWith()` which will also\n   * work with plain Objects and Arrays.\n   *\n   * <!-- runkit:activate -->\n   * ```js\n   * const { mergeDeepWith } = require('immutable')\n   * const original = { x: { y: 123 }}\n   * mergeDeepWith(\n   *   (oldVal, newVal) => oldVal + newVal,\n   *   original,\n   *   { x: { y: 456 }}\n   * ) // { x: { y: 579 }}\n   * console.log(original) // { x: { y: 123 }}\n   * ```\n   */\n  function mergeDeepWith<C>(\n    merger: (oldVal: unknown, newVal: unknown, key: unknown) => unknown,\n    collection: C,\n    ...collections: Array<\n      | Iterable<unknown>\n      | Iterable<[unknown, unknown]>\n      | { [key: string]: unknown }\n    >\n  ): C;\n}\n\n/**\n * Defines the main export of the immutable module to be the Immutable namespace\n * This supports many common module import patterns:\n *\n *     const Immutable = require(\"immutable\");\n *     const { List } = require(\"immutable\");\n *     import Immutable from \"immutable\";\n *     import * as Immutable from \"immutable\";\n *     import { List } from \"immutable\";\n *\n */\nexport = Immutable;\n\n/**\n * A global \"Immutable\" namespace used by UMD modules which allows the use of\n * the full Immutable API.\n *\n * If using Immutable as an imported module, prefer using:\n *\n *     import Immutable from 'immutable'\n *\n */\nexport as namespace Immutable;\n"}},"immutable.es.js":{"file":{"contents":"/**\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar DELETE = 'delete';\n\n// Constants describing the size of trie nodes.\nvar SHIFT = 5; // Resulted in best performance after ______?\nvar SIZE = 1 << SHIFT;\nvar MASK = SIZE - 1;\n\n// A consistent shared value representing \"not set\" which equals nothing other\n// than itself, and nothing that could be provided externally.\nvar NOT_SET = {};\n\n// Boolean references, Rough equivalent of `bool &`.\nfunction MakeRef() {\n  return { value: false };\n}\n\nfunction SetRef(ref) {\n  if (ref) {\n    ref.value = true;\n  }\n}\n\n// A function which returns a value representing an \"owner\" for transient writes\n// to tries. The return value will only ever equal itself, and will not equal\n// the return of any subsequent call of this function.\nfunction OwnerID() {}\n\nfunction ensureSize(iter) {\n  if (iter.size === undefined) {\n    iter.size = iter.__iterate(returnTrue);\n  }\n  return iter.size;\n}\n\nfunction wrapIndex(iter, index) {\n  // This implements \"is array index\" which the ECMAString spec defines as:\n  //\n  //     A String property name P is an array index if and only if\n  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n  //     to 2^32−1.\n  //\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n  if (typeof index !== 'number') {\n    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n    if ('' + uint32Index !== index || uint32Index === 4294967295) {\n      return NaN;\n    }\n    index = uint32Index;\n  }\n  return index < 0 ? ensureSize(iter) + index : index;\n}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction wholeSlice(begin, end, size) {\n  return (\n    ((begin === 0 && !isNeg(begin)) ||\n      (size !== undefined && begin <= -size)) &&\n    (end === undefined || (size !== undefined && end >= size))\n  );\n}\n\nfunction resolveBegin(begin, size) {\n  return resolveIndex(begin, size, 0);\n}\n\nfunction resolveEnd(end, size) {\n  return resolveIndex(end, size, size);\n}\n\nfunction resolveIndex(index, size, defaultIndex) {\n  // Sanitize indices using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  return index === undefined\n    ? defaultIndex\n    : isNeg(index)\n    ? size === Infinity\n      ? size\n      : Math.max(0, size + index) | 0\n    : size === undefined || size === index\n    ? index\n    : Math.min(size, index) | 0;\n}\n\nfunction isNeg(value) {\n  // Account for -0 which is negative, but not less than 0.\n  return value < 0 || (value === 0 && 1 / value === -Infinity);\n}\n\nvar IS_COLLECTION_SYMBOL = '@@__IMMUTABLE_ITERABLE__@@';\n\nfunction isCollection(maybeCollection) {\n  return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);\n}\n\nvar IS_KEYED_SYMBOL = '@@__IMMUTABLE_KEYED__@@';\n\nfunction isKeyed(maybeKeyed) {\n  return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);\n}\n\nvar IS_INDEXED_SYMBOL = '@@__IMMUTABLE_INDEXED__@@';\n\nfunction isIndexed(maybeIndexed) {\n  return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);\n}\n\nfunction isAssociative(maybeAssociative) {\n  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n}\n\nvar Collection = function Collection(value) {\n  return isCollection(value) ? value : Seq(value);\n};\n\nvar KeyedCollection = /*@__PURE__*/(function (Collection) {\n  function KeyedCollection(value) {\n    return isKeyed(value) ? value : KeyedSeq(value);\n  }\n\n  if ( Collection ) KeyedCollection.__proto__ = Collection;\n  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n  KeyedCollection.prototype.constructor = KeyedCollection;\n\n  return KeyedCollection;\n}(Collection));\n\nvar IndexedCollection = /*@__PURE__*/(function (Collection) {\n  function IndexedCollection(value) {\n    return isIndexed(value) ? value : IndexedSeq(value);\n  }\n\n  if ( Collection ) IndexedCollection.__proto__ = Collection;\n  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n  IndexedCollection.prototype.constructor = IndexedCollection;\n\n  return IndexedCollection;\n}(Collection));\n\nvar SetCollection = /*@__PURE__*/(function (Collection) {\n  function SetCollection(value) {\n    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n  }\n\n  if ( Collection ) SetCollection.__proto__ = Collection;\n  SetCollection.prototype = Object.create( Collection && Collection.prototype );\n  SetCollection.prototype.constructor = SetCollection;\n\n  return SetCollection;\n}(Collection));\n\nCollection.Keyed = KeyedCollection;\nCollection.Indexed = IndexedCollection;\nCollection.Set = SetCollection;\n\nvar IS_SEQ_SYMBOL = '@@__IMMUTABLE_SEQ__@@';\n\nfunction isSeq(maybeSeq) {\n  return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);\n}\n\nvar IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';\n\nfunction isRecord(maybeRecord) {\n  return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);\n}\n\nfunction isImmutable(maybeImmutable) {\n  return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n}\n\nvar IS_ORDERED_SYMBOL = '@@__IMMUTABLE_ORDERED__@@';\n\nfunction isOrdered(maybeOrdered) {\n  return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);\n}\n\nvar ITERATE_KEYS = 0;\nvar ITERATE_VALUES = 1;\nvar ITERATE_ENTRIES = 2;\n\nvar REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nvar ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\nvar Iterator = function Iterator(next) {\n  this.next = next;\n};\n\nIterator.prototype.toString = function toString () {\n  return '[Iterator]';\n};\n\nIterator.KEYS = ITERATE_KEYS;\nIterator.VALUES = ITERATE_VALUES;\nIterator.ENTRIES = ITERATE_ENTRIES;\n\nIterator.prototype.inspect = Iterator.prototype.toSource = function () {\n  return this.toString();\n};\nIterator.prototype[ITERATOR_SYMBOL] = function () {\n  return this;\n};\n\nfunction iteratorValue(type, k, v, iteratorResult) {\n  var value = type === 0 ? k : type === 1 ? v : [k, v];\n  iteratorResult\n    ? (iteratorResult.value = value)\n    : (iteratorResult = {\n        value: value,\n        done: false,\n      });\n  return iteratorResult;\n}\n\nfunction iteratorDone() {\n  return { value: undefined, done: true };\n}\n\nfunction hasIterator(maybeIterable) {\n  if (Array.isArray(maybeIterable)) {\n    // IE11 trick as it does not support `Symbol.iterator`\n    return true;\n  }\n\n  return !!getIteratorFn(maybeIterable);\n}\n\nfunction isIterator(maybeIterator) {\n  return maybeIterator && typeof maybeIterator.next === 'function';\n}\n\nfunction getIterator(iterable) {\n  var iteratorFn = getIteratorFn(iterable);\n  return iteratorFn && iteratorFn.call(iterable);\n}\n\nfunction getIteratorFn(iterable) {\n  var iteratorFn =\n    iterable &&\n    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nfunction isEntriesIterable(maybeIterable) {\n  var iteratorFn = getIteratorFn(maybeIterable);\n  return iteratorFn && iteratorFn === maybeIterable.entries;\n}\n\nfunction isKeysIterable(maybeIterable) {\n  var iteratorFn = getIteratorFn(maybeIterable);\n  return iteratorFn && iteratorFn === maybeIterable.keys;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isArrayLike(value) {\n  if (Array.isArray(value) || typeof value === 'string') {\n    return true;\n  }\n\n  return (\n    value &&\n    typeof value === 'object' &&\n    Number.isInteger(value.length) &&\n    value.length >= 0 &&\n    (value.length === 0\n      ? // Only {length: 0} is considered Array-like.\n        Object.keys(value).length === 1\n      : // An object is only Array-like if it has a property where the last value\n        // in the array-like may be found (which could be undefined).\n        value.hasOwnProperty(value.length - 1))\n  );\n}\n\nvar Seq = /*@__PURE__*/(function (Collection) {\n  function Seq(value) {\n    return value === undefined || value === null\n      ? emptySequence()\n      : isImmutable(value)\n      ? value.toSeq()\n      : seqFromValue(value);\n  }\n\n  if ( Collection ) Seq.__proto__ = Collection;\n  Seq.prototype = Object.create( Collection && Collection.prototype );\n  Seq.prototype.constructor = Seq;\n\n  Seq.prototype.toSeq = function toSeq () {\n    return this;\n  };\n\n  Seq.prototype.toString = function toString () {\n    return this.__toString('Seq {', '}');\n  };\n\n  Seq.prototype.cacheResult = function cacheResult () {\n    if (!this._cache && this.__iterateUncached) {\n      this._cache = this.entrySeq().toArray();\n      this.size = this._cache.length;\n    }\n    return this;\n  };\n\n  // abstract __iterateUncached(fn, reverse)\n\n  Seq.prototype.__iterate = function __iterate (fn, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      while (i !== size) {\n        var entry = cache[reverse ? size - ++i : i++];\n        if (fn(entry[1], entry[0], this) === false) {\n          break;\n        }\n      }\n      return i;\n    }\n    return this.__iterateUncached(fn, reverse);\n  };\n\n  // abstract __iteratorUncached(type, reverse)\n\n  Seq.prototype.__iterator = function __iterator (type, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var entry = cache[reverse ? size - ++i : i++];\n        return iteratorValue(type, entry[0], entry[1]);\n      });\n    }\n    return this.__iteratorUncached(type, reverse);\n  };\n\n  return Seq;\n}(Collection));\n\nvar KeyedSeq = /*@__PURE__*/(function (Seq) {\n  function KeyedSeq(value) {\n    return value === undefined || value === null\n      ? emptySequence().toKeyedSeq()\n      : isCollection(value)\n      ? isKeyed(value)\n        ? value.toSeq()\n        : value.fromEntrySeq()\n      : isRecord(value)\n      ? value.toSeq()\n      : keyedSeqFromValue(value);\n  }\n\n  if ( Seq ) KeyedSeq.__proto__ = Seq;\n  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n  KeyedSeq.prototype.constructor = KeyedSeq;\n\n  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n    return this;\n  };\n\n  return KeyedSeq;\n}(Seq));\n\nvar IndexedSeq = /*@__PURE__*/(function (Seq) {\n  function IndexedSeq(value) {\n    return value === undefined || value === null\n      ? emptySequence()\n      : isCollection(value)\n      ? isKeyed(value)\n        ? value.entrySeq()\n        : value.toIndexedSeq()\n      : isRecord(value)\n      ? value.toSeq().entrySeq()\n      : indexedSeqFromValue(value);\n  }\n\n  if ( Seq ) IndexedSeq.__proto__ = Seq;\n  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n  IndexedSeq.prototype.constructor = IndexedSeq;\n\n  IndexedSeq.of = function of (/*...values*/) {\n    return IndexedSeq(arguments);\n  };\n\n  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n    return this;\n  };\n\n  IndexedSeq.prototype.toString = function toString () {\n    return this.__toString('Seq [', ']');\n  };\n\n  return IndexedSeq;\n}(Seq));\n\nvar SetSeq = /*@__PURE__*/(function (Seq) {\n  function SetSeq(value) {\n    return (\n      isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)\n    ).toSetSeq();\n  }\n\n  if ( Seq ) SetSeq.__proto__ = Seq;\n  SetSeq.prototype = Object.create( Seq && Seq.prototype );\n  SetSeq.prototype.constructor = SetSeq;\n\n  SetSeq.of = function of (/*...values*/) {\n    return SetSeq(arguments);\n  };\n\n  SetSeq.prototype.toSetSeq = function toSetSeq () {\n    return this;\n  };\n\n  return SetSeq;\n}(Seq));\n\nSeq.isSeq = isSeq;\nSeq.Keyed = KeyedSeq;\nSeq.Set = SetSeq;\nSeq.Indexed = IndexedSeq;\n\nSeq.prototype[IS_SEQ_SYMBOL] = true;\n\n// #pragma Root Sequences\n\nvar ArraySeq = /*@__PURE__*/(function (IndexedSeq) {\n  function ArraySeq(array) {\n    this._array = array;\n    this.size = array.length;\n  }\n\n  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ArraySeq.prototype.constructor = ArraySeq;\n\n  ArraySeq.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n  };\n\n  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    while (i !== size) {\n      var ii = reverse ? size - ++i : i++;\n      if (fn(array[ii], ii, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var ii = reverse ? size - ++i : i++;\n      return iteratorValue(type, ii, array[ii]);\n    });\n  };\n\n  return ArraySeq;\n}(IndexedSeq));\n\nvar ObjectSeq = /*@__PURE__*/(function (KeyedSeq) {\n  function ObjectSeq(object) {\n    var keys = Object.keys(object).concat(\n      Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []\n    );\n    this._object = object;\n    this._keys = keys;\n    this.size = keys.length;\n  }\n\n  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ObjectSeq.prototype.constructor = ObjectSeq;\n\n  ObjectSeq.prototype.get = function get (key, notSetValue) {\n    if (notSetValue !== undefined && !this.has(key)) {\n      return notSetValue;\n    }\n    return this._object[key];\n  };\n\n  ObjectSeq.prototype.has = function has (key) {\n    return hasOwnProperty.call(this._object, key);\n  };\n\n  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    while (i !== size) {\n      var key = keys[reverse ? size - ++i : i++];\n      if (fn(object[key], key, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var key = keys[reverse ? size - ++i : i++];\n      return iteratorValue(type, key, object[key]);\n    });\n  };\n\n  return ObjectSeq;\n}(KeyedSeq));\nObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;\n\nvar CollectionSeq = /*@__PURE__*/(function (IndexedSeq) {\n  function CollectionSeq(collection) {\n    this._collection = collection;\n    this.size = collection.length || collection.size;\n  }\n\n  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  CollectionSeq.prototype.constructor = CollectionSeq;\n\n  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    var iterations = 0;\n    if (isIterator(iterator)) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n    }\n    return iterations;\n  };\n\n  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    if (!isIterator(iterator)) {\n      return new Iterator(iteratorDone);\n    }\n    var iterations = 0;\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done ? step : iteratorValue(type, iterations++, step.value);\n    });\n  };\n\n  return CollectionSeq;\n}(IndexedSeq));\n\n// # pragma Helper functions\n\nvar EMPTY_SEQ;\n\nfunction emptySequence() {\n  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n}\n\nfunction keyedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq.fromEntrySeq();\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n      value\n  );\n}\n\nfunction indexedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values: ' + value\n  );\n}\n\nfunction seqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return isEntriesIterable(value)\n      ? seq.fromEntrySeq()\n      : isKeysIterable(value)\n      ? seq.toSetSeq()\n      : seq;\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values, or keyed object: ' + value\n  );\n}\n\nfunction maybeIndexedSeqFromValue(value) {\n  return isArrayLike(value)\n    ? new ArraySeq(value)\n    : hasIterator(value)\n    ? new CollectionSeq(value)\n    : undefined;\n}\n\nvar IS_MAP_SYMBOL = '@@__IMMUTABLE_MAP__@@';\n\nfunction isMap(maybeMap) {\n  return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);\n}\n\nfunction isOrderedMap(maybeOrderedMap) {\n  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n}\n\nfunction isValueObject(maybeValue) {\n  return Boolean(\n    maybeValue &&\n      typeof maybeValue.equals === 'function' &&\n      typeof maybeValue.hashCode === 'function'\n  );\n}\n\n/**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */\nfunction is(valueA, valueB) {\n  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n    return true;\n  }\n  if (!valueA || !valueB) {\n    return false;\n  }\n  if (\n    typeof valueA.valueOf === 'function' &&\n    typeof valueB.valueOf === 'function'\n  ) {\n    valueA = valueA.valueOf();\n    valueB = valueB.valueOf();\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n  }\n  return !!(\n    isValueObject(valueA) &&\n    isValueObject(valueB) &&\n    valueA.equals(valueB)\n  );\n}\n\nvar imul =\n  typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2\n    ? Math.imul\n    : function imul(a, b) {\n        a |= 0; // int\n        b |= 0; // int\n        var c = a & 0xffff;\n        var d = b & 0xffff;\n        // Shift by 0 fixes the sign on the high part.\n        return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int\n      };\n\n// v8 has an optimization for storing 31-bit signed numbers.\n// Values which have either 00 or 11 as the high order bits qualify.\n// This function drops the highest order bit in a signed number, maintaining\n// the sign bit.\nfunction smi(i32) {\n  return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);\n}\n\nvar defaultValueOf = Object.prototype.valueOf;\n\nfunction hash(o) {\n  if (o == null) {\n    return hashNullish(o);\n  }\n\n  if (typeof o.hashCode === 'function') {\n    // Drop any high bits from accidentally long hash codes.\n    return smi(o.hashCode(o));\n  }\n\n  var v = valueOf(o);\n\n  if (v == null) {\n    return hashNullish(v);\n  }\n\n  switch (typeof v) {\n    case 'boolean':\n      // The hash values for built-in constants are a 1 value for each 5-byte\n      // shift region expect for the first, which encodes the value. This\n      // reduces the odds of a hash collision for these common values.\n      return v ? 0x42108421 : 0x42108420;\n    case 'number':\n      return hashNumber(v);\n    case 'string':\n      return v.length > STRING_HASH_CACHE_MIN_STRLEN\n        ? cachedHashString(v)\n        : hashString(v);\n    case 'object':\n    case 'function':\n      return hashJSObj(v);\n    case 'symbol':\n      return hashSymbol(v);\n    default:\n      if (typeof v.toString === 'function') {\n        return hashString(v.toString());\n      }\n      throw new Error('Value type ' + typeof v + ' cannot be hashed.');\n  }\n}\n\nfunction hashNullish(nullish) {\n  return nullish === null ? 0x42108422 : /* undefined */ 0x42108423;\n}\n\n// Compress arbitrarily large numbers into smi hashes.\nfunction hashNumber(n) {\n  if (n !== n || n === Infinity) {\n    return 0;\n  }\n  var hash = n | 0;\n  if (hash !== n) {\n    hash ^= n * 0xffffffff;\n  }\n  while (n > 0xffffffff) {\n    n /= 0xffffffff;\n    hash ^= n;\n  }\n  return smi(hash);\n}\n\nfunction cachedHashString(string) {\n  var hashed = stringHashCache[string];\n  if (hashed === undefined) {\n    hashed = hashString(string);\n    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n      STRING_HASH_CACHE_SIZE = 0;\n      stringHashCache = {};\n    }\n    STRING_HASH_CACHE_SIZE++;\n    stringHashCache[string] = hashed;\n  }\n  return hashed;\n}\n\n// http://jsperf.com/hashing-strings\nfunction hashString(string) {\n  // This is the hash from JVM\n  // The hash code for a string is computed as\n  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n  // where s[i] is the ith character of the string and n is the length of\n  // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n  // (exclusive) by dropping high bits.\n  var hashed = 0;\n  for (var ii = 0; ii < string.length; ii++) {\n    hashed = (31 * hashed + string.charCodeAt(ii)) | 0;\n  }\n  return smi(hashed);\n}\n\nfunction hashSymbol(sym) {\n  var hashed = symbolMap[sym];\n  if (hashed !== undefined) {\n    return hashed;\n  }\n\n  hashed = nextHash();\n\n  symbolMap[sym] = hashed;\n\n  return hashed;\n}\n\nfunction hashJSObj(obj) {\n  var hashed;\n  if (usingWeakMap) {\n    hashed = weakMap.get(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = obj[UID_HASH_KEY];\n  if (hashed !== undefined) {\n    return hashed;\n  }\n\n  if (!canDefineProperty) {\n    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    hashed = getIENodeHash(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = nextHash();\n\n  if (usingWeakMap) {\n    weakMap.set(obj, hashed);\n  } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n    throw new Error('Non-extensible objects are not allowed as keys.');\n  } else if (canDefineProperty) {\n    Object.defineProperty(obj, UID_HASH_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: hashed,\n    });\n  } else if (\n    obj.propertyIsEnumerable !== undefined &&\n    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n  ) {\n    // Since we can't define a non-enumerable property on the object\n    // we'll hijack one of the less-used non-enumerable properties to\n    // save our hash on it. Since this is a function it will not show up in\n    // `JSON.stringify` which is what we want.\n    obj.propertyIsEnumerable = function () {\n      return this.constructor.prototype.propertyIsEnumerable.apply(\n        this,\n        arguments\n      );\n    };\n    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n  } else if (obj.nodeType !== undefined) {\n    // At this point we couldn't get the IE `uniqueID` to use as a hash\n    // and we couldn't use a non-enumerable property to exploit the\n    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n    // itself.\n    obj[UID_HASH_KEY] = hashed;\n  } else {\n    throw new Error('Unable to set a non-enumerable property on object.');\n  }\n\n  return hashed;\n}\n\n// Get references to ES5 object methods.\nvar isExtensible = Object.isExtensible;\n\n// True if Object.defineProperty works as expected. IE8 fails this test.\nvar canDefineProperty = (function () {\n  try {\n    Object.defineProperty({}, '@', {});\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n// and avoid memory leaks from the IE cloneNode bug.\nfunction getIENodeHash(node) {\n  if (node && node.nodeType > 0) {\n    switch (node.nodeType) {\n      case 1: // Element\n        return node.uniqueID;\n      case 9: // Document\n        return node.documentElement && node.documentElement.uniqueID;\n    }\n  }\n}\n\nfunction valueOf(obj) {\n  return obj.valueOf !== defaultValueOf && typeof obj.valueOf === 'function'\n    ? obj.valueOf(obj)\n    : obj;\n}\n\nfunction nextHash() {\n  var nextHash = ++_objHashUID;\n  if (_objHashUID & 0x40000000) {\n    _objHashUID = 0;\n  }\n  return nextHash;\n}\n\n// If possible, use a WeakMap.\nvar usingWeakMap = typeof WeakMap === 'function';\nvar weakMap;\nif (usingWeakMap) {\n  weakMap = new WeakMap();\n}\n\nvar symbolMap = Object.create(null);\n\nvar _objHashUID = 0;\n\nvar UID_HASH_KEY = '__immutablehash__';\nif (typeof Symbol === 'function') {\n  UID_HASH_KEY = Symbol(UID_HASH_KEY);\n}\n\nvar STRING_HASH_CACHE_MIN_STRLEN = 16;\nvar STRING_HASH_CACHE_MAX_SIZE = 255;\nvar STRING_HASH_CACHE_SIZE = 0;\nvar stringHashCache = {};\n\nvar ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq) {\n  function ToKeyedSequence(indexed, useKeys) {\n    this._iter = indexed;\n    this._useKeys = useKeys;\n    this.size = indexed.size;\n  }\n\n  if ( KeyedSeq ) ToKeyedSequence.__proto__ = KeyedSeq;\n  ToKeyedSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n  ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n    return this._iter.get(key, notSetValue);\n  };\n\n  ToKeyedSequence.prototype.has = function has (key) {\n    return this._iter.has(key);\n  };\n\n  ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n    return this._iter.valueSeq();\n  };\n\n  ToKeyedSequence.prototype.reverse = function reverse () {\n    var this$1$1 = this;\n\n    var reversedSequence = reverseFactory(this, true);\n    if (!this._useKeys) {\n      reversedSequence.valueSeq = function () { return this$1$1._iter.toSeq().reverse(); };\n    }\n    return reversedSequence;\n  };\n\n  ToKeyedSequence.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    var mappedSequence = mapFactory(this, mapper, context);\n    if (!this._useKeys) {\n      mappedSequence.valueSeq = function () { return this$1$1._iter.toSeq().map(mapper, context); };\n    }\n    return mappedSequence;\n  };\n\n  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1$1); }, reverse);\n  };\n\n  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    return this._iter.__iterator(type, reverse);\n  };\n\n  return ToKeyedSequence;\n}(KeyedSeq));\nToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;\n\nvar ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq) {\n  function ToIndexedSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( IndexedSeq ) ToIndexedSequence.__proto__ = IndexedSeq;\n  ToIndexedSequence.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n  ToIndexedSequence.prototype.includes = function includes (value) {\n    return this._iter.includes(value);\n  };\n\n  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(this);\n    return this._iter.__iterate(\n      function (v) { return fn(v, reverse ? this$1$1.size - ++i : i++, this$1$1); },\n      reverse\n    );\n  };\n\n  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1$1 = this;\n\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var i = 0;\n    reverse && ensureSize(this);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(\n            type,\n            reverse ? this$1$1.size - ++i : i++,\n            step.value,\n            step\n          );\n    });\n  };\n\n  return ToIndexedSequence;\n}(IndexedSeq));\n\nvar ToSetSequence = /*@__PURE__*/(function (SetSeq) {\n  function ToSetSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( SetSeq ) ToSetSequence.__proto__ = SetSeq;\n  ToSetSequence.prototype = Object.create( SetSeq && SetSeq.prototype );\n  ToSetSequence.prototype.constructor = ToSetSequence;\n\n  ToSetSequence.prototype.has = function has (key) {\n    return this._iter.includes(key);\n  };\n\n  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (v) { return fn(v, v, this$1$1); }, reverse);\n  };\n\n  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(type, step.value, step.value, step);\n    });\n  };\n\n  return ToSetSequence;\n}(SetSeq));\n\nvar FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq) {\n  function FromEntriesSequence(entries) {\n    this._iter = entries;\n    this.size = entries.size;\n  }\n\n  if ( KeyedSeq ) FromEntriesSequence.__proto__ = KeyedSeq;\n  FromEntriesSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n  FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n    return this._iter.toSeq();\n  };\n\n  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (entry) {\n      // Check if entry exists first so array access doesn't throw for holes\n      // in the parent iteration.\n      if (entry) {\n        validateEntry(entry);\n        var indexedCollection = isCollection(entry);\n        return fn(\n          indexedCollection ? entry.get(1) : entry[1],\n          indexedCollection ? entry.get(0) : entry[0],\n          this$1$1\n        );\n      }\n    }, reverse);\n  };\n\n  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return iteratorValue(\n            type,\n            indexedCollection ? entry.get(0) : entry[0],\n            indexedCollection ? entry.get(1) : entry[1],\n            step\n          );\n        }\n      }\n    });\n  };\n\n  return FromEntriesSequence;\n}(KeyedSeq));\n\nToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\nfunction flipFactory(collection) {\n  var flipSequence = makeSequence(collection);\n  flipSequence._iter = collection;\n  flipSequence.size = collection.size;\n  flipSequence.flip = function () { return collection; };\n  flipSequence.reverse = function () {\n    var reversedSequence = collection.reverse.apply(this); // super.reverse()\n    reversedSequence.flip = function () { return collection.reverse(); };\n    return reversedSequence;\n  };\n  flipSequence.has = function (key) { return collection.includes(key); };\n  flipSequence.includes = function (key) { return collection.has(key); };\n  flipSequence.cacheResult = cacheResultThrough;\n  flipSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    return collection.__iterate(function (v, k) { return fn(k, v, this$1$1) !== false; }, reverse);\n  };\n  flipSequence.__iteratorUncached = function (type, reverse) {\n    if (type === ITERATE_ENTRIES) {\n      var iterator = collection.__iterator(type, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (!step.done) {\n          var k = step.value[0];\n          step.value[0] = step.value[1];\n          step.value[1] = k;\n        }\n        return step;\n      });\n    }\n    return collection.__iterator(\n      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n      reverse\n    );\n  };\n  return flipSequence;\n}\n\nfunction mapFactory(collection, mapper, context) {\n  var mappedSequence = makeSequence(collection);\n  mappedSequence.size = collection.size;\n  mappedSequence.has = function (key) { return collection.has(key); };\n  mappedSequence.get = function (key, notSetValue) {\n    var v = collection.get(key, NOT_SET);\n    return v === NOT_SET\n      ? notSetValue\n      : mapper.call(context, v, key, collection);\n  };\n  mappedSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    return collection.__iterate(\n      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1$1) !== false; },\n      reverse\n    );\n  };\n  mappedSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var key = entry[0];\n      return iteratorValue(\n        type,\n        key,\n        mapper.call(context, entry[1], key, collection),\n        step\n      );\n    });\n  };\n  return mappedSequence;\n}\n\nfunction reverseFactory(collection, useKeys) {\n  var this$1$1 = this;\n\n  var reversedSequence = makeSequence(collection);\n  reversedSequence._iter = collection;\n  reversedSequence.size = collection.size;\n  reversedSequence.reverse = function () { return collection; };\n  if (collection.flip) {\n    reversedSequence.flip = function () {\n      var flipSequence = flipFactory(collection);\n      flipSequence.reverse = function () { return collection.flip(); };\n      return flipSequence;\n    };\n  }\n  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n  reversedSequence.includes = function (value) { return collection.includes(value); };\n  reversedSequence.cacheResult = cacheResultThrough;\n  reversedSequence.__iterate = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(collection);\n    return collection.__iterate(\n      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1$1.size - ++i : i++, this$1$1); },\n      !reverse\n    );\n  };\n  reversedSequence.__iterator = function (type, reverse) {\n    var i = 0;\n    reverse && ensureSize(collection);\n    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      return iteratorValue(\n        type,\n        useKeys ? entry[0] : reverse ? this$1$1.size - ++i : i++,\n        entry[1],\n        step\n      );\n    });\n  };\n  return reversedSequence;\n}\n\nfunction filterFactory(collection, predicate, context, useKeys) {\n  var filterSequence = makeSequence(collection);\n  if (useKeys) {\n    filterSequence.has = function (key) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n    };\n    filterSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && predicate.call(context, v, key, collection)\n        ? v\n        : notSetValue;\n    };\n  }\n  filterSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1$1);\n      }\n    }, reverse);\n    return iterations;\n  };\n  filterSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterations = 0;\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        var value = entry[1];\n        if (predicate.call(context, value, key, collection)) {\n          return iteratorValue(type, useKeys ? key : iterations++, value, step);\n        }\n      }\n    });\n  };\n  return filterSequence;\n}\n\nfunction countByFactory(collection, grouper, context) {\n  var groups = Map().asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n  });\n  return groups.asImmutable();\n}\n\nfunction groupByFactory(collection, grouper, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(\n      grouper.call(context, v, k, collection),\n      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); }).asImmutable();\n}\n\nfunction partitionFactory(collection, predicate, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = [[], []];\n  collection.__iterate(function (v, k) {\n    groups[predicate.call(context, v, k, collection) ? 1 : 0].push(\n      isKeyedIter ? [k, v] : v\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); });\n}\n\nfunction sliceFactory(collection, begin, end, useKeys) {\n  var originalSize = collection.size;\n\n  if (wholeSlice(begin, end, originalSize)) {\n    return collection;\n  }\n\n  var resolvedBegin = resolveBegin(begin, originalSize);\n  var resolvedEnd = resolveEnd(end, originalSize);\n\n  // begin or end will be NaN if they were provided as negative numbers and\n  // this collection's size is unknown. In that case, cache first so there is\n  // a known size and these do not resolve to NaN.\n  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n  }\n\n  // Note: resolvedEnd is undefined when the original sequence's length is\n  // unknown and this slice did not supply an end and should contain all\n  // elements after resolvedBegin.\n  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n  var resolvedSize = resolvedEnd - resolvedBegin;\n  var sliceSize;\n  if (resolvedSize === resolvedSize) {\n    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n  }\n\n  var sliceSeq = makeSequence(collection);\n\n  // If collection.size is undefined, the size of the realized sliceSeq is\n  // unknown at this point unless the number of items to slice is 0\n  sliceSeq.size =\n    sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;\n\n  if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n    sliceSeq.get = function (index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index >= 0 && index < sliceSize\n        ? collection.get(index + resolvedBegin, notSetValue)\n        : notSetValue;\n    };\n  }\n\n  sliceSeq.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (sliceSize === 0) {\n      return 0;\n    }\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var skipped = 0;\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k) {\n      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n        iterations++;\n        return (\n          fn(v, useKeys ? k : iterations - 1, this$1$1) !== false &&\n          iterations !== sliceSize\n        );\n      }\n    });\n    return iterations;\n  };\n\n  sliceSeq.__iteratorUncached = function (type, reverse) {\n    if (sliceSize !== 0 && reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    // Don't bother instantiating parent iterator if taking 0.\n    if (sliceSize === 0) {\n      return new Iterator(iteratorDone);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var skipped = 0;\n    var iterations = 0;\n    return new Iterator(function () {\n      while (skipped++ < resolvedBegin) {\n        iterator.next();\n      }\n      if (++iterations > sliceSize) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (useKeys || type === ITERATE_VALUES || step.done) {\n        return step;\n      }\n      if (type === ITERATE_KEYS) {\n        return iteratorValue(type, iterations - 1, undefined, step);\n      }\n      return iteratorValue(type, iterations - 1, step.value[1], step);\n    });\n  };\n\n  return sliceSeq;\n}\n\nfunction takeWhileFactory(collection, predicate, context) {\n  var takeSequence = makeSequence(collection);\n  takeSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1$1); }\n    );\n    return iterations;\n  };\n  takeSequence.__iteratorUncached = function (type, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterating = true;\n    return new Iterator(function () {\n      if (!iterating) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var k = entry[0];\n      var v = entry[1];\n      if (!predicate.call(context, v, k, this$1$1)) {\n        iterating = false;\n        return iteratorDone();\n      }\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return takeSequence;\n}\n\nfunction skipWhileFactory(collection, predicate, context, useKeys) {\n  var skipSequence = makeSequence(collection);\n  skipSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1$1);\n      }\n    });\n    return iterations;\n  };\n  skipSequence.__iteratorUncached = function (type, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var skipping = true;\n    var iterations = 0;\n    return new Iterator(function () {\n      var step;\n      var k;\n      var v;\n      do {\n        step = iterator.next();\n        if (step.done) {\n          if (useKeys || type === ITERATE_VALUES) {\n            return step;\n          }\n          if (type === ITERATE_KEYS) {\n            return iteratorValue(type, iterations++, undefined, step);\n          }\n          return iteratorValue(type, iterations++, step.value[1], step);\n        }\n        var entry = step.value;\n        k = entry[0];\n        v = entry[1];\n        skipping && (skipping = predicate.call(context, v, k, this$1$1));\n      } while (skipping);\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return skipSequence;\n}\n\nfunction concatFactory(collection, values) {\n  var isKeyedCollection = isKeyed(collection);\n  var iters = [collection]\n    .concat(values)\n    .map(function (v) {\n      if (!isCollection(v)) {\n        v = isKeyedCollection\n          ? keyedSeqFromValue(v)\n          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedCollection) {\n        v = KeyedCollection(v);\n      }\n      return v;\n    })\n    .filter(function (v) { return v.size !== 0; });\n\n  if (iters.length === 0) {\n    return collection;\n  }\n\n  if (iters.length === 1) {\n    var singleton = iters[0];\n    if (\n      singleton === collection ||\n      (isKeyedCollection && isKeyed(singleton)) ||\n      (isIndexed(collection) && isIndexed(singleton))\n    ) {\n      return singleton;\n    }\n  }\n\n  var concatSeq = new ArraySeq(iters);\n  if (isKeyedCollection) {\n    concatSeq = concatSeq.toKeyedSeq();\n  } else if (!isIndexed(collection)) {\n    concatSeq = concatSeq.toSetSeq();\n  }\n  concatSeq = concatSeq.flatten(true);\n  concatSeq.size = iters.reduce(function (sum, seq) {\n    if (sum !== undefined) {\n      var size = seq.size;\n      if (size !== undefined) {\n        return sum + size;\n      }\n    }\n  }, 0);\n  return concatSeq;\n}\n\nfunction flattenFactory(collection, depth, useKeys) {\n  var flatSequence = makeSequence(collection);\n  flatSequence.__iterateUncached = function (fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    var stopped = false;\n    function flatDeep(iter, currentDepth) {\n      iter.__iterate(function (v, k) {\n        if ((!depth || currentDepth < depth) && isCollection(v)) {\n          flatDeep(v, currentDepth + 1);\n        } else {\n          iterations++;\n          if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n            stopped = true;\n          }\n        }\n        return !stopped;\n      }, reverse);\n    }\n    flatDeep(collection, 0);\n    return iterations;\n  };\n  flatSequence.__iteratorUncached = function (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var stack = [];\n    var iterations = 0;\n    return new Iterator(function () {\n      while (iterator) {\n        var step = iterator.next();\n        if (step.done !== false) {\n          iterator = stack.pop();\n          continue;\n        }\n        var v = step.value;\n        if (type === ITERATE_ENTRIES) {\n          v = v[1];\n        }\n        if ((!depth || stack.length < depth) && isCollection(v)) {\n          stack.push(iterator);\n          iterator = v.__iterator(type, reverse);\n        } else {\n          return useKeys ? step : iteratorValue(type, iterations++, v, step);\n        }\n      }\n      return iteratorDone();\n    });\n  };\n  return flatSequence;\n}\n\nfunction flatMapFactory(collection, mapper, context) {\n  var coerce = collectionClass(collection);\n  return collection\n    .toSeq()\n    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n    .flatten(true);\n}\n\nfunction interposeFactory(collection, separator) {\n  var interposedSequence = makeSequence(collection);\n  interposedSequence.size = collection.size && collection.size * 2 - 1;\n  interposedSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v) { return (!iterations || fn(separator, iterations++, this$1$1) !== false) &&\n        fn(v, iterations++, this$1$1) !== false; },\n      reverse\n    );\n    return iterations;\n  };\n  interposedSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n    var iterations = 0;\n    var step;\n    return new Iterator(function () {\n      if (!step || iterations % 2) {\n        step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n      }\n      return iterations % 2\n        ? iteratorValue(type, iterations++, separator)\n        : iteratorValue(type, iterations++, step.value, step);\n    });\n  };\n  return interposedSequence;\n}\n\nfunction sortFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  var isKeyedCollection = isKeyed(collection);\n  var index = 0;\n  var entries = collection\n    .toSeq()\n    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n    .valueSeq()\n    .toArray();\n  entries\n    .sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; })\n    .forEach(\n      isKeyedCollection\n        ? function (v, i) {\n            entries[i].length = 2;\n          }\n        : function (v, i) {\n            entries[i] = v[1];\n          }\n    );\n  return isKeyedCollection\n    ? KeyedSeq(entries)\n    : isIndexed(collection)\n    ? IndexedSeq(entries)\n    : SetSeq(entries);\n}\n\nfunction maxFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  if (mapper) {\n    var entry = collection\n      .toSeq()\n      .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n      .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });\n    return entry && entry[0];\n  }\n  return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });\n}\n\nfunction maxCompare(comparator, a, b) {\n  var comp = comparator(b, a);\n  // b is considered the new max if the comparator declares them equal, but\n  // they are not equal and b is in fact a nullish value.\n  return (\n    (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||\n    comp > 0\n  );\n}\n\nfunction zipWithFactory(keyIter, zipper, iters, zipAll) {\n  var zipSequence = makeSequence(keyIter);\n  var sizes = new ArraySeq(iters).map(function (i) { return i.size; });\n  zipSequence.size = zipAll ? sizes.max() : sizes.min();\n  // Note: this a generic base implementation of __iterate in terms of\n  // __iterator which may be more generically useful in the future.\n  zipSequence.__iterate = function (fn, reverse) {\n    /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */\n    // indexed:\n    var iterator = this.__iterator(ITERATE_VALUES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      if (fn(step.value, iterations++, this) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n  zipSequence.__iteratorUncached = function (type, reverse) {\n    var iterators = iters.map(\n      function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n    );\n    var iterations = 0;\n    var isDone = false;\n    return new Iterator(function () {\n      var steps;\n      if (!isDone) {\n        steps = iterators.map(function (i) { return i.next(); });\n        isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });\n      }\n      if (isDone) {\n        return iteratorDone();\n      }\n      return iteratorValue(\n        type,\n        iterations++,\n        zipper.apply(\n          null,\n          steps.map(function (s) { return s.value; })\n        )\n      );\n    });\n  };\n  return zipSequence;\n}\n\n// #pragma Helper Functions\n\nfunction reify(iter, seq) {\n  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n}\n\nfunction validateEntry(entry) {\n  if (entry !== Object(entry)) {\n    throw new TypeError('Expected [K, V] tuple: ' + entry);\n  }\n}\n\nfunction collectionClass(collection) {\n  return isKeyed(collection)\n    ? KeyedCollection\n    : isIndexed(collection)\n    ? IndexedCollection\n    : SetCollection;\n}\n\nfunction makeSequence(collection) {\n  return Object.create(\n    (isKeyed(collection)\n      ? KeyedSeq\n      : isIndexed(collection)\n      ? IndexedSeq\n      : SetSeq\n    ).prototype\n  );\n}\n\nfunction cacheResultThrough() {\n  if (this._iter.cacheResult) {\n    this._iter.cacheResult();\n    this.size = this._iter.size;\n    return this;\n  }\n  return Seq.prototype.cacheResult.call(this);\n}\n\nfunction defaultComparator(a, b) {\n  if (a === undefined && b === undefined) {\n    return 0;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === undefined) {\n    return -1;\n  }\n\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction arrCopy(arr, offset) {\n  offset = offset || 0;\n  var len = Math.max(0, arr.length - offset);\n  var newArr = new Array(len);\n  for (var ii = 0; ii < len; ii++) {\n    newArr[ii] = arr[ii + offset];\n  }\n  return newArr;\n}\n\nfunction invariant(condition, error) {\n  if (!condition) { throw new Error(error); }\n}\n\nfunction assertNotInfinite(size) {\n  invariant(\n    size !== Infinity,\n    'Cannot perform this action with an infinite size.'\n  );\n}\n\nfunction coerceKeyPath(keyPath) {\n  if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n    return keyPath;\n  }\n  if (isOrdered(keyPath)) {\n    return keyPath.toArray();\n  }\n  throw new TypeError(\n    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n  );\n}\n\nvar toString = Object.prototype.toString;\n\nfunction isPlainObject(value) {\n  // The base prototype's toString deals with Argument objects and native namespaces like Math\n  if (\n    !value ||\n    typeof value !== 'object' ||\n    toString.call(value) !== '[object Object]'\n  ) {\n    return false;\n  }\n\n  var proto = Object.getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n\n  // Iteratively going up the prototype chain is needed for cross-realm environments (differing contexts, iframes, etc)\n  var parentProto = proto;\n  var nextProto = Object.getPrototypeOf(proto);\n  while (nextProto !== null) {\n    parentProto = nextProto;\n    nextProto = Object.getPrototypeOf(parentProto);\n  }\n  return parentProto === proto;\n}\n\n/**\n * Returns true if the value is a potentially-persistent data structure, either\n * provided by Immutable.js or a plain Array or Object.\n */\nfunction isDataStructure(value) {\n  return (\n    typeof value === 'object' &&\n    (isImmutable(value) || Array.isArray(value) || isPlainObject(value))\n  );\n}\n\nfunction quoteString(value) {\n  try {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  } catch (_ignoreError) {\n    return JSON.stringify(value);\n  }\n}\n\nfunction has(collection, key) {\n  return isImmutable(collection)\n    ? collection.has(key)\n    : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n}\n\nfunction get(collection, key, notSetValue) {\n  return isImmutable(collection)\n    ? collection.get(key, notSetValue)\n    : !has(collection, key)\n    ? notSetValue\n    : typeof collection.get === 'function'\n    ? collection.get(key)\n    : collection[key];\n}\n\nfunction shallowCopy(from) {\n  if (Array.isArray(from)) {\n    return arrCopy(from);\n  }\n  var to = {};\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      to[key] = from[key];\n    }\n  }\n  return to;\n}\n\nfunction remove(collection, key) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.remove) {\n      throw new TypeError(\n        'Cannot update immutable value without .remove() method: ' + collection\n      );\n    }\n    return collection.remove(key);\n  }\n  if (!hasOwnProperty.call(collection, key)) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  if (Array.isArray(collectionCopy)) {\n    collectionCopy.splice(key, 1);\n  } else {\n    delete collectionCopy[key];\n  }\n  return collectionCopy;\n}\n\nfunction set(collection, key, value) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.set) {\n      throw new TypeError(\n        'Cannot update immutable value without .set() method: ' + collection\n      );\n    }\n    return collection.set(key, value);\n  }\n  if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  collectionCopy[key] = value;\n  return collectionCopy;\n}\n\nfunction updateIn$1(collection, keyPath, notSetValue, updater) {\n  if (!updater) {\n    updater = notSetValue;\n    notSetValue = undefined;\n  }\n  var updatedValue = updateInDeeply(\n    isImmutable(collection),\n    collection,\n    coerceKeyPath(keyPath),\n    0,\n    notSetValue,\n    updater\n  );\n  return updatedValue === NOT_SET ? notSetValue : updatedValue;\n}\n\nfunction updateInDeeply(\n  inImmutable,\n  existing,\n  keyPath,\n  i,\n  notSetValue,\n  updater\n) {\n  var wasNotSet = existing === NOT_SET;\n  if (i === keyPath.length) {\n    var existingValue = wasNotSet ? notSetValue : existing;\n    var newValue = updater(existingValue);\n    return newValue === existingValue ? existing : newValue;\n  }\n  if (!wasNotSet && !isDataStructure(existing)) {\n    throw new TypeError(\n      'Cannot update within non-data-structure value in path [' +\n        keyPath.slice(0, i).map(quoteString) +\n        ']: ' +\n        existing\n    );\n  }\n  var key = keyPath[i];\n  var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n  var nextUpdated = updateInDeeply(\n    nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),\n    nextExisting,\n    keyPath,\n    i + 1,\n    notSetValue,\n    updater\n  );\n  return nextUpdated === nextExisting\n    ? existing\n    : nextUpdated === NOT_SET\n    ? remove(existing, key)\n    : set(\n        wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,\n        key,\n        nextUpdated\n      );\n}\n\nfunction setIn$1(collection, keyPath, value) {\n  return updateIn$1(collection, keyPath, NOT_SET, function () { return value; });\n}\n\nfunction setIn(keyPath, v) {\n  return setIn$1(this, keyPath, v);\n}\n\nfunction removeIn(collection, keyPath) {\n  return updateIn$1(collection, keyPath, function () { return NOT_SET; });\n}\n\nfunction deleteIn(keyPath) {\n  return removeIn(this, keyPath);\n}\n\nfunction update$1(collection, key, notSetValue, updater) {\n  return updateIn$1(collection, [key], notSetValue, updater);\n}\n\nfunction update(key, notSetValue, updater) {\n  return arguments.length === 1\n    ? key(this)\n    : update$1(this, key, notSetValue, updater);\n}\n\nfunction updateIn(keyPath, notSetValue, updater) {\n  return updateIn$1(this, keyPath, notSetValue, updater);\n}\n\nfunction merge$1() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeIntoKeyedWith(this, iters);\n}\n\nfunction mergeWith$1(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  if (typeof merger !== 'function') {\n    throw new TypeError('Invalid merger function: ' + merger);\n  }\n  return mergeIntoKeyedWith(this, iters, merger);\n}\n\nfunction mergeIntoKeyedWith(collection, collections, merger) {\n  var iters = [];\n  for (var ii = 0; ii < collections.length; ii++) {\n    var collection$1 = KeyedCollection(collections[ii]);\n    if (collection$1.size !== 0) {\n      iters.push(collection$1);\n    }\n  }\n  if (iters.length === 0) {\n    return collection;\n  }\n  if (\n    collection.toSeq().size === 0 &&\n    !collection.__ownerID &&\n    iters.length === 1\n  ) {\n    return collection.constructor(iters[0]);\n  }\n  return collection.withMutations(function (collection) {\n    var mergeIntoCollection = merger\n      ? function (value, key) {\n          update$1(collection, key, NOT_SET, function (oldVal) { return oldVal === NOT_SET ? value : merger(oldVal, value, key); }\n          );\n        }\n      : function (value, key) {\n          collection.set(key, value);\n        };\n    for (var ii = 0; ii < iters.length; ii++) {\n      iters[ii].forEach(mergeIntoCollection);\n    }\n  });\n}\n\nfunction merge(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeWithSources(collection, sources);\n}\n\nfunction mergeWith(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeWithSources(collection, sources, merger);\n}\n\nfunction mergeDeep$1(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(collection, sources);\n}\n\nfunction mergeDeepWith$1(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeDeepWithSources(collection, sources, merger);\n}\n\nfunction mergeDeepWithSources(collection, sources, merger) {\n  return mergeWithSources(collection, sources, deepMergerWith(merger));\n}\n\nfunction mergeWithSources(collection, sources, merger) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot merge into non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    return typeof merger === 'function' && collection.mergeWith\n      ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))\n      : collection.merge\n      ? collection.merge.apply(collection, sources)\n      : collection.concat.apply(collection, sources);\n  }\n  var isArray = Array.isArray(collection);\n  var merged = collection;\n  var Collection = isArray ? IndexedCollection : KeyedCollection;\n  var mergeItem = isArray\n    ? function (value) {\n        // Copy on write\n        if (merged === collection) {\n          merged = shallowCopy(merged);\n        }\n        merged.push(value);\n      }\n    : function (value, key) {\n        var hasVal = hasOwnProperty.call(merged, key);\n        var nextVal =\n          hasVal && merger ? merger(merged[key], value, key) : value;\n        if (!hasVal || nextVal !== merged[key]) {\n          // Copy on write\n          if (merged === collection) {\n            merged = shallowCopy(merged);\n          }\n          merged[key] = nextVal;\n        }\n      };\n  for (var i = 0; i < sources.length; i++) {\n    Collection(sources[i]).forEach(mergeItem);\n  }\n  return merged;\n}\n\nfunction deepMergerWith(merger) {\n  function deepMerger(oldValue, newValue, key) {\n    return isDataStructure(oldValue) &&\n      isDataStructure(newValue) &&\n      areMergeable(oldValue, newValue)\n      ? mergeWithSources(oldValue, [newValue], deepMerger)\n      : merger\n      ? merger(oldValue, newValue, key)\n      : newValue;\n  }\n  return deepMerger;\n}\n\n/**\n * It's unclear what the desired behavior is for merging two collections that\n * fall into separate categories between keyed, indexed, or set-like, so we only\n * consider them mergeable if they fall into the same category.\n */\nfunction areMergeable(oldDataStructure, newDataStructure) {\n  var oldSeq = Seq(oldDataStructure);\n  var newSeq = Seq(newDataStructure);\n  // This logic assumes that a sequence can only fall into one of the three\n  // categories mentioned above (since there's no `isSetLike()` method).\n  return (\n    isIndexed(oldSeq) === isIndexed(newSeq) &&\n    isKeyed(oldSeq) === isKeyed(newSeq)\n  );\n}\n\nfunction mergeDeep() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeDeepWithSources(this, iters);\n}\n\nfunction mergeDeepWith(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(this, iters, merger);\n}\n\nfunction mergeIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });\n}\n\nfunction mergeDeepIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }\n  );\n}\n\nfunction withMutations(fn) {\n  var mutable = this.asMutable();\n  fn(mutable);\n  return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n}\n\nfunction asMutable() {\n  return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n}\n\nfunction asImmutable() {\n  return this.__ensureOwner();\n}\n\nfunction wasAltered() {\n  return this.__altered;\n}\n\nvar Map = /*@__PURE__*/(function (KeyedCollection) {\n  function Map(value) {\n    return value === undefined || value === null\n      ? emptyMap()\n      : isMap(value) && !isOrdered(value)\n      ? value\n      : emptyMap().withMutations(function (map) {\n          var iter = KeyedCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v, k) { return map.set(k, v); });\n        });\n  }\n\n  if ( KeyedCollection ) Map.__proto__ = KeyedCollection;\n  Map.prototype = Object.create( KeyedCollection && KeyedCollection.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.of = function of () {\n    var keyValues = [], len = arguments.length;\n    while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n    return emptyMap().withMutations(function (map) {\n      for (var i = 0; i < keyValues.length; i += 2) {\n        if (i + 1 >= keyValues.length) {\n          throw new Error('Missing value for key: ' + keyValues[i]);\n        }\n        map.set(keyValues[i], keyValues[i + 1]);\n      }\n    });\n  };\n\n  Map.prototype.toString = function toString () {\n    return this.__toString('Map {', '}');\n  };\n\n  // @pragma Access\n\n  Map.prototype.get = function get (k, notSetValue) {\n    return this._root\n      ? this._root.get(0, undefined, k, notSetValue)\n      : notSetValue;\n  };\n\n  // @pragma Modification\n\n  Map.prototype.set = function set (k, v) {\n    return updateMap(this, k, v);\n  };\n\n  Map.prototype.remove = function remove (k) {\n    return updateMap(this, k, NOT_SET);\n  };\n\n  Map.prototype.deleteAll = function deleteAll (keys) {\n    var collection = Collection(keys);\n\n    if (collection.size === 0) {\n      return this;\n    }\n\n    return this.withMutations(function (map) {\n      collection.forEach(function (key) { return map.remove(key); });\n    });\n  };\n\n  Map.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._root = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyMap();\n  };\n\n  // @pragma Composition\n\n  Map.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator));\n  };\n\n  Map.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator, mapper));\n  };\n\n  Map.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    return this.withMutations(function (map) {\n      map.forEach(function (value, key) {\n        map.set(key, mapper.call(context, value, key, this$1$1));\n      });\n    });\n  };\n\n  // @pragma Mutability\n\n  Map.prototype.__iterator = function __iterator (type, reverse) {\n    return new MapIterator(this, type, reverse);\n  };\n\n  Map.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    this._root &&\n      this._root.iterate(function (entry) {\n        iterations++;\n        return fn(entry[1], entry[0], this$1$1);\n      }, reverse);\n    return iterations;\n  };\n\n  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeMap(this.size, this._root, ownerID, this.__hash);\n  };\n\n  return Map;\n}(KeyedCollection));\n\nMap.isMap = isMap;\n\nvar MapPrototype = Map.prototype;\nMapPrototype[IS_MAP_SYMBOL] = true;\nMapPrototype[DELETE] = MapPrototype.remove;\nMapPrototype.removeAll = MapPrototype.deleteAll;\nMapPrototype.setIn = setIn;\nMapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\nMapPrototype.update = update;\nMapPrototype.updateIn = updateIn;\nMapPrototype.merge = MapPrototype.concat = merge$1;\nMapPrototype.mergeWith = mergeWith$1;\nMapPrototype.mergeDeep = mergeDeep;\nMapPrototype.mergeDeepWith = mergeDeepWith;\nMapPrototype.mergeIn = mergeIn;\nMapPrototype.mergeDeepIn = mergeDeepIn;\nMapPrototype.withMutations = withMutations;\nMapPrototype.wasAltered = wasAltered;\nMapPrototype.asImmutable = asImmutable;\nMapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;\nMapPrototype['@@transducer/step'] = function (result, arr) {\n  return result.set(arr[0], arr[1]);\n};\nMapPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\n// #pragma Trie Nodes\n\nvar ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n  this.ownerID = ownerID;\n  this.entries = entries;\n};\n\nArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && entries.length === 1) {\n    return; // undefined\n  }\n\n  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n    return createNodes(ownerID, entries, key, value);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new ArrayMapNode(ownerID, newEntries);\n};\n\nvar BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n  this.ownerID = ownerID;\n  this.bitmap = bitmap;\n  this.nodes = nodes;\n};\n\nBitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n  var bitmap = this.bitmap;\n  return (bitmap & bit) === 0\n    ? notSetValue\n    : this.nodes[popCount(bitmap & (bit - 1))].get(\n        shift + SHIFT,\n        keyHash,\n        key,\n        notSetValue\n      );\n};\n\nBitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var bit = 1 << keyHashFrag;\n  var bitmap = this.bitmap;\n  var exists = (bitmap & bit) !== 0;\n\n  if (!exists && value === NOT_SET) {\n    return this;\n  }\n\n  var idx = popCount(bitmap & (bit - 1));\n  var nodes = this.nodes;\n  var node = exists ? nodes[idx] : undefined;\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n\n  if (newNode === node) {\n    return this;\n  }\n\n  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n  }\n\n  if (\n    exists &&\n    !newNode &&\n    nodes.length === 2 &&\n    isLeafNode(nodes[idx ^ 1])\n  ) {\n    return nodes[idx ^ 1];\n  }\n\n  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n    return newNode;\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;\n  var newNodes = exists\n    ? newNode\n      ? setAt(nodes, idx, newNode, isEditable)\n      : spliceOut(nodes, idx, isEditable)\n    : spliceIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.bitmap = newBitmap;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n};\n\nvar HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n  this.ownerID = ownerID;\n  this.count = count;\n  this.nodes = nodes;\n};\n\nHashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var node = this.nodes[idx];\n  return node\n    ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n    : notSetValue;\n};\n\nHashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var removed = value === NOT_SET;\n  var nodes = this.nodes;\n  var node = nodes[idx];\n\n  if (removed && !node) {\n    return this;\n  }\n\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n  if (newNode === node) {\n    return this;\n  }\n\n  var newCount = this.count;\n  if (!node) {\n    newCount++;\n  } else if (!newNode) {\n    newCount--;\n    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n      return packNodes(ownerID, nodes, newCount, idx);\n    }\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newNodes = setAt(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.count = newCount;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new HashArrayMapNode(ownerID, newCount, newNodes);\n};\n\nvar HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entries = entries;\n};\n\nHashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nHashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n\n  var removed = value === NOT_SET;\n\n  if (keyHash !== this.keyHash) {\n    if (removed) {\n      return this;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n  }\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && len === 2) {\n    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n};\n\nvar ValueNode = function ValueNode(ownerID, keyHash, entry) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entry = entry;\n};\n\nValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n};\n\nValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n  var keyMatch = is(key, this.entry[0]);\n  if (keyMatch ? value === this.entry[1] : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n\n  if (removed) {\n    SetRef(didChangeSize);\n    return; // undefined\n  }\n\n  if (keyMatch) {\n    if (ownerID && ownerID === this.ownerID) {\n      this.entry[1] = value;\n      return this;\n    }\n    return new ValueNode(ownerID, this.keyHash, [key, value]);\n  }\n\n  SetRef(didChangeSize);\n  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n};\n\n// #pragma Iterators\n\nArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate =\n  function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  };\n\nBitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate =\n  function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  };\n\n// eslint-disable-next-line no-unused-vars\nValueNode.prototype.iterate = function (fn, reverse) {\n  return fn(this.entry);\n};\n\nvar MapIterator = /*@__PURE__*/(function (Iterator) {\n  function MapIterator(map, type, reverse) {\n    this._type = type;\n    this._reverse = reverse;\n    this._stack = map._root && mapIteratorFrame(map._root);\n  }\n\n  if ( Iterator ) MapIterator.__proto__ = Iterator;\n  MapIterator.prototype = Object.create( Iterator && Iterator.prototype );\n  MapIterator.prototype.constructor = MapIterator;\n\n  MapIterator.prototype.next = function next () {\n    var type = this._type;\n    var stack = this._stack;\n    while (stack) {\n      var node = stack.node;\n      var index = stack.index++;\n      var maxIndex = (void 0);\n      if (node.entry) {\n        if (index === 0) {\n          return mapIteratorValue(type, node.entry);\n        }\n      } else if (node.entries) {\n        maxIndex = node.entries.length - 1;\n        if (index <= maxIndex) {\n          return mapIteratorValue(\n            type,\n            node.entries[this._reverse ? maxIndex - index : index]\n          );\n        }\n      } else {\n        maxIndex = node.nodes.length - 1;\n        if (index <= maxIndex) {\n          var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n          if (subNode) {\n            if (subNode.entry) {\n              return mapIteratorValue(type, subNode.entry);\n            }\n            stack = this._stack = mapIteratorFrame(subNode, stack);\n          }\n          continue;\n        }\n      }\n      stack = this._stack = this._stack.__prev;\n    }\n    return iteratorDone();\n  };\n\n  return MapIterator;\n}(Iterator));\n\nfunction mapIteratorValue(type, entry) {\n  return iteratorValue(type, entry[0], entry[1]);\n}\n\nfunction mapIteratorFrame(node, prev) {\n  return {\n    node: node,\n    index: 0,\n    __prev: prev,\n  };\n}\n\nfunction makeMap(size, root, ownerID, hash) {\n  var map = Object.create(MapPrototype);\n  map.size = size;\n  map._root = root;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_MAP;\nfunction emptyMap() {\n  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n}\n\nfunction updateMap(map, k, v) {\n  var newRoot;\n  var newSize;\n  if (!map._root) {\n    if (v === NOT_SET) {\n      return map;\n    }\n    newSize = 1;\n    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n  } else {\n    var didChangeSize = MakeRef();\n    var didAlter = MakeRef();\n    newRoot = updateNode(\n      map._root,\n      map.__ownerID,\n      0,\n      undefined,\n      k,\n      v,\n      didChangeSize,\n      didAlter\n    );\n    if (!didAlter.value) {\n      return map;\n    }\n    newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);\n  }\n  if (map.__ownerID) {\n    map.size = newSize;\n    map._root = newRoot;\n    map.__hash = undefined;\n    map.__altered = true;\n    return map;\n  }\n  return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n}\n\nfunction updateNode(\n  node,\n  ownerID,\n  shift,\n  keyHash,\n  key,\n  value,\n  didChangeSize,\n  didAlter\n) {\n  if (!node) {\n    if (value === NOT_SET) {\n      return node;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return new ValueNode(ownerID, keyHash, [key, value]);\n  }\n  return node.update(\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n}\n\nfunction isLeafNode(node) {\n  return (\n    node.constructor === ValueNode || node.constructor === HashCollisionNode\n  );\n}\n\nfunction mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n  if (node.keyHash === keyHash) {\n    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n  }\n\n  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n  var newNode;\n  var nodes =\n    idx1 === idx2\n      ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n      : ((newNode = new ValueNode(ownerID, keyHash, entry)),\n        idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n  return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n}\n\nfunction createNodes(ownerID, entries, key, value) {\n  if (!ownerID) {\n    ownerID = new OwnerID();\n  }\n  var node = new ValueNode(ownerID, hash(key), [key, value]);\n  for (var ii = 0; ii < entries.length; ii++) {\n    var entry = entries[ii];\n    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n  }\n  return node;\n}\n\nfunction packNodes(ownerID, nodes, count, excluding) {\n  var bitmap = 0;\n  var packedII = 0;\n  var packedNodes = new Array(count);\n  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n    var node = nodes[ii];\n    if (node !== undefined && ii !== excluding) {\n      bitmap |= bit;\n      packedNodes[packedII++] = node;\n    }\n  }\n  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n}\n\nfunction expandNodes(ownerID, nodes, bitmap, including, node) {\n  var count = 0;\n  var expandedNodes = new Array(SIZE);\n  for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n  }\n  expandedNodes[including] = node;\n  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n}\n\nfunction popCount(x) {\n  x -= (x >> 1) & 0x55555555;\n  x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n  x = (x + (x >> 4)) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n}\n\nfunction setAt(array, idx, val, canEdit) {\n  var newArray = canEdit ? array : arrCopy(array);\n  newArray[idx] = val;\n  return newArray;\n}\n\nfunction spliceIn(array, idx, val, canEdit) {\n  var newLen = array.length + 1;\n  if (canEdit && idx + 1 === newLen) {\n    array[idx] = val;\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      newArray[ii] = val;\n      after = -1;\n    } else {\n      newArray[ii] = array[ii + after];\n    }\n  }\n  return newArray;\n}\n\nfunction spliceOut(array, idx, canEdit) {\n  var newLen = array.length - 1;\n  if (canEdit && idx === newLen) {\n    array.pop();\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      after = 1;\n    }\n    newArray[ii] = array[ii + after];\n  }\n  return newArray;\n}\n\nvar MAX_ARRAY_MAP_SIZE = SIZE / 4;\nvar MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\nvar MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\nvar IS_LIST_SYMBOL = '@@__IMMUTABLE_LIST__@@';\n\nfunction isList(maybeList) {\n  return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);\n}\n\nvar List = /*@__PURE__*/(function (IndexedCollection) {\n  function List(value) {\n    var empty = emptyList();\n    if (value === undefined || value === null) {\n      return empty;\n    }\n    if (isList(value)) {\n      return value;\n    }\n    var iter = IndexedCollection(value);\n    var size = iter.size;\n    if (size === 0) {\n      return empty;\n    }\n    assertNotInfinite(size);\n    if (size > 0 && size < SIZE) {\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n    }\n    return empty.withMutations(function (list) {\n      list.setSize(size);\n      iter.forEach(function (v, i) { return list.set(i, v); });\n    });\n  }\n\n  if ( IndexedCollection ) List.__proto__ = IndexedCollection;\n  List.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );\n  List.prototype.constructor = List;\n\n  List.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  List.prototype.toString = function toString () {\n    return this.__toString('List [', ']');\n  };\n\n  // @pragma Access\n\n  List.prototype.get = function get (index, notSetValue) {\n    index = wrapIndex(this, index);\n    if (index >= 0 && index < this.size) {\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    }\n    return notSetValue;\n  };\n\n  // @pragma Modification\n\n  List.prototype.set = function set (index, value) {\n    return updateList(this, index, value);\n  };\n\n  List.prototype.remove = function remove (index) {\n    return !this.has(index)\n      ? this\n      : index === 0\n      ? this.shift()\n      : index === this.size - 1\n      ? this.pop()\n      : this.splice(index, 1);\n  };\n\n  List.prototype.insert = function insert (index, value) {\n    return this.splice(index, 0, value);\n  };\n\n  List.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = this._origin = this._capacity = 0;\n      this._level = SHIFT;\n      this._root = this._tail = this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyList();\n  };\n\n  List.prototype.push = function push (/*...values*/) {\n    var values = arguments;\n    var oldSize = this.size;\n    return this.withMutations(function (list) {\n      setListBounds(list, 0, oldSize + values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(oldSize + ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.pop = function pop () {\n    return setListBounds(this, 0, -1);\n  };\n\n  List.prototype.unshift = function unshift (/*...values*/) {\n    var values = arguments;\n    return this.withMutations(function (list) {\n      setListBounds(list, -values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.shift = function shift () {\n    return setListBounds(this, 1);\n  };\n\n  // @pragma Composition\n\n  List.prototype.concat = function concat (/*...collections*/) {\n    var arguments$1 = arguments;\n\n    var seqs = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var argument = arguments$1[i];\n      var seq = IndexedCollection(\n        typeof argument !== 'string' && hasIterator(argument)\n          ? argument\n          : [argument]\n      );\n      if (seq.size !== 0) {\n        seqs.push(seq);\n      }\n    }\n    if (seqs.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n      return this.constructor(seqs[0]);\n    }\n    return this.withMutations(function (list) {\n      seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });\n    });\n  };\n\n  List.prototype.setSize = function setSize (size) {\n    return setListBounds(this, 0, size);\n  };\n\n  List.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    return this.withMutations(function (list) {\n      for (var i = 0; i < this$1$1.size; i++) {\n        list.set(i, mapper.call(context, list.get(i), i, this$1$1));\n      }\n    });\n  };\n\n  // @pragma Iteration\n\n  List.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    if (wholeSlice(begin, end, size)) {\n      return this;\n    }\n    return setListBounds(\n      this,\n      resolveBegin(begin, size),\n      resolveEnd(end, size)\n    );\n  };\n\n  List.prototype.__iterator = function __iterator (type, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    return new Iterator(function () {\n      var value = values();\n      return value === DONE\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? --index : index++, value);\n    });\n  };\n\n  List.prototype.__iterate = function __iterate (fn, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    var value;\n    while ((value = values()) !== DONE) {\n      if (fn(value, reverse ? --index : index++, this) === false) {\n        break;\n      }\n    }\n    return index;\n  };\n\n  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyList();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeList(\n      this._origin,\n      this._capacity,\n      this._level,\n      this._root,\n      this._tail,\n      ownerID,\n      this.__hash\n    );\n  };\n\n  return List;\n}(IndexedCollection));\n\nList.isList = isList;\n\nvar ListPrototype = List.prototype;\nListPrototype[IS_LIST_SYMBOL] = true;\nListPrototype[DELETE] = ListPrototype.remove;\nListPrototype.merge = ListPrototype.concat;\nListPrototype.setIn = setIn;\nListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\nListPrototype.update = update;\nListPrototype.updateIn = updateIn;\nListPrototype.mergeIn = mergeIn;\nListPrototype.mergeDeepIn = mergeDeepIn;\nListPrototype.withMutations = withMutations;\nListPrototype.wasAltered = wasAltered;\nListPrototype.asImmutable = asImmutable;\nListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;\nListPrototype['@@transducer/step'] = function (result, arr) {\n  return result.push(arr);\n};\nListPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nvar VNode = function VNode(array, ownerID) {\n  this.array = array;\n  this.ownerID = ownerID;\n};\n\n// TODO: seems like these methods are very similar\n\nVNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n  if (index === level ? 1 << level : this.array.length === 0) {\n    return this;\n  }\n  var originIndex = (index >>> level) & MASK;\n  if (originIndex >= this.array.length) {\n    return new VNode([], ownerID);\n  }\n  var removingFirst = originIndex === 0;\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[originIndex];\n    newChild =\n      oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && removingFirst) {\n      return this;\n    }\n  }\n  if (removingFirst && !newChild) {\n    return this;\n  }\n  var editable = editableVNode(this, ownerID);\n  if (!removingFirst) {\n    for (var ii = 0; ii < originIndex; ii++) {\n      editable.array[ii] = undefined;\n    }\n  }\n  if (newChild) {\n    editable.array[originIndex] = newChild;\n  }\n  return editable;\n};\n\nVNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n  if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n    return this;\n  }\n  var sizeIndex = ((index - 1) >>> level) & MASK;\n  if (sizeIndex >= this.array.length) {\n    return this;\n  }\n\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[sizeIndex];\n    newChild =\n      oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n      return this;\n    }\n  }\n\n  var editable = editableVNode(this, ownerID);\n  editable.array.splice(sizeIndex + 1);\n  if (newChild) {\n    editable.array[sizeIndex] = newChild;\n  }\n  return editable;\n};\n\nvar DONE = {};\n\nfunction iterateList(list, reverse) {\n  var left = list._origin;\n  var right = list._capacity;\n  var tailPos = getTailOffset(right);\n  var tail = list._tail;\n\n  return iterateNodeOrLeaf(list._root, list._level, 0);\n\n  function iterateNodeOrLeaf(node, level, offset) {\n    return level === 0\n      ? iterateLeaf(node, offset)\n      : iterateNode(node, level, offset);\n  }\n\n  function iterateLeaf(node, offset) {\n    var array = offset === tailPos ? tail && tail.array : node && node.array;\n    var from = offset > left ? 0 : left - offset;\n    var to = right - offset;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      if (from === to) {\n        return DONE;\n      }\n      var idx = reverse ? --to : from++;\n      return array && array[idx];\n    };\n  }\n\n  function iterateNode(node, level, offset) {\n    var values;\n    var array = node && node.array;\n    var from = offset > left ? 0 : (left - offset) >> level;\n    var to = ((right - offset) >> level) + 1;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      while (true) {\n        if (values) {\n          var value = values();\n          if (value !== DONE) {\n            return value;\n          }\n          values = null;\n        }\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        values = iterateNodeOrLeaf(\n          array && array[idx],\n          level - SHIFT,\n          offset + (idx << level)\n        );\n      }\n    };\n  }\n}\n\nfunction makeList(origin, capacity, level, root, tail, ownerID, hash) {\n  var list = Object.create(ListPrototype);\n  list.size = capacity - origin;\n  list._origin = origin;\n  list._capacity = capacity;\n  list._level = level;\n  list._root = root;\n  list._tail = tail;\n  list.__ownerID = ownerID;\n  list.__hash = hash;\n  list.__altered = false;\n  return list;\n}\n\nvar EMPTY_LIST;\nfunction emptyList() {\n  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n}\n\nfunction updateList(list, index, value) {\n  index = wrapIndex(list, index);\n\n  if (index !== index) {\n    return list;\n  }\n\n  if (index >= list.size || index < 0) {\n    return list.withMutations(function (list) {\n      index < 0\n        ? setListBounds(list, index).set(0, value)\n        : setListBounds(list, 0, index + 1).set(index, value);\n    });\n  }\n\n  index += list._origin;\n\n  var newTail = list._tail;\n  var newRoot = list._root;\n  var didAlter = MakeRef();\n  if (index >= getTailOffset(list._capacity)) {\n    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n  } else {\n    newRoot = updateVNode(\n      newRoot,\n      list.__ownerID,\n      list._level,\n      index,\n      value,\n      didAlter\n    );\n  }\n\n  if (!didAlter.value) {\n    return list;\n  }\n\n  if (list.__ownerID) {\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n}\n\nfunction updateVNode(node, ownerID, level, index, value, didAlter) {\n  var idx = (index >>> level) & MASK;\n  var nodeHas = node && idx < node.array.length;\n  if (!nodeHas && value === undefined) {\n    return node;\n  }\n\n  var newNode;\n\n  if (level > 0) {\n    var lowerNode = node && node.array[idx];\n    var newLowerNode = updateVNode(\n      lowerNode,\n      ownerID,\n      level - SHIFT,\n      index,\n      value,\n      didAlter\n    );\n    if (newLowerNode === lowerNode) {\n      return node;\n    }\n    newNode = editableVNode(node, ownerID);\n    newNode.array[idx] = newLowerNode;\n    return newNode;\n  }\n\n  if (nodeHas && node.array[idx] === value) {\n    return node;\n  }\n\n  if (didAlter) {\n    SetRef(didAlter);\n  }\n\n  newNode = editableVNode(node, ownerID);\n  if (value === undefined && idx === newNode.array.length - 1) {\n    newNode.array.pop();\n  } else {\n    newNode.array[idx] = value;\n  }\n  return newNode;\n}\n\nfunction editableVNode(node, ownerID) {\n  if (ownerID && node && ownerID === node.ownerID) {\n    return node;\n  }\n  return new VNode(node ? node.array.slice() : [], ownerID);\n}\n\nfunction listNodeFor(list, rawIndex) {\n  if (rawIndex >= getTailOffset(list._capacity)) {\n    return list._tail;\n  }\n  if (rawIndex < 1 << (list._level + SHIFT)) {\n    var node = list._root;\n    var level = list._level;\n    while (node && level > 0) {\n      node = node.array[(rawIndex >>> level) & MASK];\n      level -= SHIFT;\n    }\n    return node;\n  }\n}\n\nfunction setListBounds(list, begin, end) {\n  // Sanitize begin & end using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  if (begin !== undefined) {\n    begin |= 0;\n  }\n  if (end !== undefined) {\n    end |= 0;\n  }\n  var owner = list.__ownerID || new OwnerID();\n  var oldOrigin = list._origin;\n  var oldCapacity = list._capacity;\n  var newOrigin = oldOrigin + begin;\n  var newCapacity =\n    end === undefined\n      ? oldCapacity\n      : end < 0\n      ? oldCapacity + end\n      : oldOrigin + end;\n  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n    return list;\n  }\n\n  // If it's going to end after it starts, it's empty.\n  if (newOrigin >= newCapacity) {\n    return list.clear();\n  }\n\n  var newLevel = list._level;\n  var newRoot = list._root;\n\n  // New origin might need creating a higher root.\n  var offsetShift = 0;\n  while (newOrigin + offsetShift < 0) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n    offsetShift += 1 << newLevel;\n  }\n  if (offsetShift) {\n    newOrigin += offsetShift;\n    oldOrigin += offsetShift;\n    newCapacity += offsetShift;\n    oldCapacity += offsetShift;\n  }\n\n  var oldTailOffset = getTailOffset(oldCapacity);\n  var newTailOffset = getTailOffset(newCapacity);\n\n  // New size might need creating a higher root.\n  while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n  }\n\n  // Locate or create the new tail.\n  var oldTail = list._tail;\n  var newTail =\n    newTailOffset < oldTailOffset\n      ? listNodeFor(list, newCapacity - 1)\n      : newTailOffset > oldTailOffset\n      ? new VNode([], owner)\n      : oldTail;\n\n  // Merge Tail into tree.\n  if (\n    oldTail &&\n    newTailOffset > oldTailOffset &&\n    newOrigin < oldCapacity &&\n    oldTail.array.length\n  ) {\n    newRoot = editableVNode(newRoot, owner);\n    var node = newRoot;\n    for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n      var idx = (oldTailOffset >>> level) & MASK;\n      node = node.array[idx] = editableVNode(node.array[idx], owner);\n    }\n    node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n  }\n\n  // If the size has been reduced, there's a chance the tail needs to be trimmed.\n  if (newCapacity < oldCapacity) {\n    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n  }\n\n  // If the new origin is within the tail, then we do not need a root.\n  if (newOrigin >= newTailOffset) {\n    newOrigin -= newTailOffset;\n    newCapacity -= newTailOffset;\n    newLevel = SHIFT;\n    newRoot = null;\n    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n    offsetShift = 0;\n\n    // Identify the new top root node of the subtree of the old root.\n    while (newRoot) {\n      var beginIndex = (newOrigin >>> newLevel) & MASK;\n      if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {\n        break;\n      }\n      if (beginIndex) {\n        offsetShift += (1 << newLevel) * beginIndex;\n      }\n      newLevel -= SHIFT;\n      newRoot = newRoot.array[beginIndex];\n    }\n\n    // Trim the new sides of the new root.\n    if (newRoot && newOrigin > oldOrigin) {\n      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n    }\n    if (newRoot && newTailOffset < oldTailOffset) {\n      newRoot = newRoot.removeAfter(\n        owner,\n        newLevel,\n        newTailOffset - offsetShift\n      );\n    }\n    if (offsetShift) {\n      newOrigin -= offsetShift;\n      newCapacity -= offsetShift;\n    }\n  }\n\n  if (list.__ownerID) {\n    list.size = newCapacity - newOrigin;\n    list._origin = newOrigin;\n    list._capacity = newCapacity;\n    list._level = newLevel;\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n}\n\nfunction getTailOffset(size) {\n  return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;\n}\n\nvar OrderedMap = /*@__PURE__*/(function (Map) {\n  function OrderedMap(value) {\n    return value === undefined || value === null\n      ? emptyOrderedMap()\n      : isOrderedMap(value)\n      ? value\n      : emptyOrderedMap().withMutations(function (map) {\n          var iter = KeyedCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v, k) { return map.set(k, v); });\n        });\n  }\n\n  if ( Map ) OrderedMap.__proto__ = Map;\n  OrderedMap.prototype = Object.create( Map && Map.prototype );\n  OrderedMap.prototype.constructor = OrderedMap;\n\n  OrderedMap.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedMap.prototype.toString = function toString () {\n    return this.__toString('OrderedMap {', '}');\n  };\n\n  // @pragma Access\n\n  OrderedMap.prototype.get = function get (k, notSetValue) {\n    var index = this._map.get(k);\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n  };\n\n  // @pragma Modification\n\n  OrderedMap.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._map.clear();\n      this._list.clear();\n      this.__altered = true;\n      return this;\n    }\n    return emptyOrderedMap();\n  };\n\n  OrderedMap.prototype.set = function set (k, v) {\n    return updateOrderedMap(this, k, v);\n  };\n\n  OrderedMap.prototype.remove = function remove (k) {\n    return updateOrderedMap(this, k, NOT_SET);\n  };\n\n  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._list.__iterate(\n      function (entry) { return entry && fn(entry[1], entry[0], this$1$1); },\n      reverse\n    );\n  };\n\n  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n    return this._list.fromEntrySeq().__iterator(type, reverse);\n  };\n\n  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    var newList = this._list.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyOrderedMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      this._map = newMap;\n      this._list = newList;\n      return this;\n    }\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n  };\n\n  return OrderedMap;\n}(Map));\n\nOrderedMap.isOrderedMap = isOrderedMap;\n\nOrderedMap.prototype[IS_ORDERED_SYMBOL] = true;\nOrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\nfunction makeOrderedMap(map, list, ownerID, hash) {\n  var omap = Object.create(OrderedMap.prototype);\n  omap.size = map ? map.size : 0;\n  omap._map = map;\n  omap._list = list;\n  omap.__ownerID = ownerID;\n  omap.__hash = hash;\n  omap.__altered = false;\n  return omap;\n}\n\nvar EMPTY_ORDERED_MAP;\nfunction emptyOrderedMap() {\n  return (\n    EMPTY_ORDERED_MAP ||\n    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))\n  );\n}\n\nfunction updateOrderedMap(omap, k, v) {\n  var map = omap._map;\n  var list = omap._list;\n  var i = map.get(k);\n  var has = i !== undefined;\n  var newMap;\n  var newList;\n  if (v === NOT_SET) {\n    // removed\n    if (!has) {\n      return omap;\n    }\n    if (list.size >= SIZE && list.size >= map.size * 2) {\n      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n      newMap = newList\n        .toKeyedSeq()\n        .map(function (entry) { return entry[0]; })\n        .flip()\n        .toMap();\n      if (omap.__ownerID) {\n        newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n      }\n    } else {\n      newMap = map.remove(k);\n      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n    }\n  } else if (has) {\n    if (v === list.get(i)[1]) {\n      return omap;\n    }\n    newMap = map;\n    newList = list.set(i, [k, v]);\n  } else {\n    newMap = map.set(k, list.size);\n    newList = list.set(list.size, [k, v]);\n  }\n  if (omap.__ownerID) {\n    omap.size = newMap.size;\n    omap._map = newMap;\n    omap._list = newList;\n    omap.__hash = undefined;\n    omap.__altered = true;\n    return omap;\n  }\n  return makeOrderedMap(newMap, newList);\n}\n\nvar IS_STACK_SYMBOL = '@@__IMMUTABLE_STACK__@@';\n\nfunction isStack(maybeStack) {\n  return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);\n}\n\nvar Stack = /*@__PURE__*/(function (IndexedCollection) {\n  function Stack(value) {\n    return value === undefined || value === null\n      ? emptyStack()\n      : isStack(value)\n      ? value\n      : emptyStack().pushAll(value);\n  }\n\n  if ( IndexedCollection ) Stack.__proto__ = IndexedCollection;\n  Stack.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );\n  Stack.prototype.constructor = Stack;\n\n  Stack.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Stack.prototype.toString = function toString () {\n    return this.__toString('Stack [', ']');\n  };\n\n  // @pragma Access\n\n  Stack.prototype.get = function get (index, notSetValue) {\n    var head = this._head;\n    index = wrapIndex(this, index);\n    while (head && index--) {\n      head = head.next;\n    }\n    return head ? head.value : notSetValue;\n  };\n\n  Stack.prototype.peek = function peek () {\n    return this._head && this._head.value;\n  };\n\n  // @pragma Modification\n\n  Stack.prototype.push = function push (/*...values*/) {\n    var arguments$1 = arguments;\n\n    if (arguments.length === 0) {\n      return this;\n    }\n    var newSize = this.size + arguments.length;\n    var head = this._head;\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n      head = {\n        value: arguments$1[ii],\n        next: head,\n      };\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pushAll = function pushAll (iter) {\n    iter = IndexedCollection(iter);\n    if (iter.size === 0) {\n      return this;\n    }\n    if (this.size === 0 && isStack(iter)) {\n      return iter;\n    }\n    assertNotInfinite(iter.size);\n    var newSize = this.size;\n    var head = this._head;\n    iter.__iterate(function (value) {\n      newSize++;\n      head = {\n        value: value,\n        next: head,\n      };\n    }, /* reverse */ true);\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pop = function pop () {\n    return this.slice(1);\n  };\n\n  Stack.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._head = undefined;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyStack();\n  };\n\n  Stack.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    var resolvedBegin = resolveBegin(begin, this.size);\n    var resolvedEnd = resolveEnd(end, this.size);\n    if (resolvedEnd !== this.size) {\n      // super.slice(begin, end);\n      return IndexedCollection.prototype.slice.call(this, begin, end);\n    }\n    var newSize = this.size - resolvedBegin;\n    var head = this._head;\n    while (resolvedBegin--) {\n      head = head.next;\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  // @pragma Mutability\n\n  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyStack();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeStack(this.size, this._head, ownerID, this.__hash);\n  };\n\n  // @pragma Iteration\n\n  Stack.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterate(\n        function (v, k) { return fn(v, k, this$1$1); },\n        reverse\n      );\n    }\n    var iterations = 0;\n    var node = this._head;\n    while (node) {\n      if (fn(node.value, iterations++, this) === false) {\n        break;\n      }\n      node = node.next;\n    }\n    return iterations;\n  };\n\n  Stack.prototype.__iterator = function __iterator (type, reverse) {\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterator(type, reverse);\n    }\n    var iterations = 0;\n    var node = this._head;\n    return new Iterator(function () {\n      if (node) {\n        var value = node.value;\n        node = node.next;\n        return iteratorValue(type, iterations++, value);\n      }\n      return iteratorDone();\n    });\n  };\n\n  return Stack;\n}(IndexedCollection));\n\nStack.isStack = isStack;\n\nvar StackPrototype = Stack.prototype;\nStackPrototype[IS_STACK_SYMBOL] = true;\nStackPrototype.shift = StackPrototype.pop;\nStackPrototype.unshift = StackPrototype.push;\nStackPrototype.unshiftAll = StackPrototype.pushAll;\nStackPrototype.withMutations = withMutations;\nStackPrototype.wasAltered = wasAltered;\nStackPrototype.asImmutable = asImmutable;\nStackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;\nStackPrototype['@@transducer/step'] = function (result, arr) {\n  return result.unshift(arr);\n};\nStackPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nfunction makeStack(size, head, ownerID, hash) {\n  var map = Object.create(StackPrototype);\n  map.size = size;\n  map._head = head;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_STACK;\nfunction emptyStack() {\n  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n}\n\nvar IS_SET_SYMBOL = '@@__IMMUTABLE_SET__@@';\n\nfunction isSet(maybeSet) {\n  return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);\n}\n\nfunction isOrderedSet(maybeOrderedSet) {\n  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n}\n\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (\n    !isCollection(b) ||\n    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n    (a.__hash !== undefined &&\n      b.__hash !== undefined &&\n      a.__hash !== b.__hash) ||\n    isKeyed(a) !== isKeyed(b) ||\n    isIndexed(a) !== isIndexed(b) ||\n    isOrdered(a) !== isOrdered(b)\n  ) {\n    return false;\n  }\n\n  if (a.size === 0 && b.size === 0) {\n    return true;\n  }\n\n  var notAssociative = !isAssociative(a);\n\n  if (isOrdered(a)) {\n    var entries = a.entries();\n    return (\n      b.every(function (v, k) {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done\n    );\n  }\n\n  var flipped = false;\n\n  if (a.size === undefined) {\n    if (b.size === undefined) {\n      if (typeof a.cacheResult === 'function') {\n        a.cacheResult();\n      }\n    } else {\n      flipped = true;\n      var _ = a;\n      a = b;\n      b = _;\n    }\n  }\n\n  var allEqual = true;\n  var bSize = b.__iterate(function (v, k) {\n    if (\n      notAssociative\n        ? !a.has(v)\n        : flipped\n        ? !is(v, a.get(k, NOT_SET))\n        : !is(a.get(k, NOT_SET), v)\n    ) {\n      allEqual = false;\n      return false;\n    }\n  });\n\n  return allEqual && a.size === bSize;\n}\n\nfunction mixin(ctor, methods) {\n  var keyCopier = function (key) {\n    ctor.prototype[key] = methods[key];\n  };\n  Object.keys(methods).forEach(keyCopier);\n  Object.getOwnPropertySymbols &&\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n  return ctor;\n}\n\nfunction toJS(value) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  if (!isCollection(value)) {\n    if (!isDataStructure(value)) {\n      return value;\n    }\n    value = Seq(value);\n  }\n  if (isKeyed(value)) {\n    var result$1 = {};\n    value.__iterate(function (v, k) {\n      result$1[k] = toJS(v);\n    });\n    return result$1;\n  }\n  var result = [];\n  value.__iterate(function (v) {\n    result.push(toJS(v));\n  });\n  return result;\n}\n\nvar Set = /*@__PURE__*/(function (SetCollection) {\n  function Set(value) {\n    return value === undefined || value === null\n      ? emptySet()\n      : isSet(value) && !isOrdered(value)\n      ? value\n      : emptySet().withMutations(function (set) {\n          var iter = SetCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v) { return set.add(v); });\n        });\n  }\n\n  if ( SetCollection ) Set.__proto__ = SetCollection;\n  Set.prototype = Object.create( SetCollection && SetCollection.prototype );\n  Set.prototype.constructor = Set;\n\n  Set.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Set.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  Set.intersect = function intersect (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.union = function union (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.union.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.prototype.toString = function toString () {\n    return this.__toString('Set {', '}');\n  };\n\n  // @pragma Access\n\n  Set.prototype.has = function has (value) {\n    return this._map.has(value);\n  };\n\n  // @pragma Modification\n\n  Set.prototype.add = function add (value) {\n    return updateSet(this, this._map.set(value, value));\n  };\n\n  Set.prototype.remove = function remove (value) {\n    return updateSet(this, this._map.remove(value));\n  };\n\n  Set.prototype.clear = function clear () {\n    return updateSet(this, this._map.clear());\n  };\n\n  // @pragma Composition\n\n  Set.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    // keep track if the set is altered by the map function\n    var didChanges = false;\n\n    var newMap = updateSet(\n      this,\n      this._map.mapEntries(function (ref) {\n        var v = ref[1];\n\n        var mapped = mapper.call(context, v, v, this$1$1);\n\n        if (mapped !== v) {\n          didChanges = true;\n        }\n\n        return [mapped, mapped];\n      }, context)\n    );\n\n    return didChanges ? newMap : this;\n  };\n\n  Set.prototype.union = function union () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    iters = iters.filter(function (x) { return x.size !== 0; });\n    if (iters.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n      return this.constructor(iters[0]);\n    }\n    return this.withMutations(function (set) {\n      for (var ii = 0; ii < iters.length; ii++) {\n        if (typeof iters[ii] === 'string') {\n          set.add(iters[ii]);\n        } else {\n          SetCollection(iters[ii]).forEach(function (value) { return set.add(value); });\n        }\n      }\n    });\n  };\n\n  Set.prototype.intersect = function intersect () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (!iters.every(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.subtract = function subtract () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (iters.some(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator));\n  };\n\n  Set.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator, mapper));\n  };\n\n  Set.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered();\n  };\n\n  Set.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._map.__iterate(function (k) { return fn(k, k, this$1$1); }, reverse);\n  };\n\n  Set.prototype.__iterator = function __iterator (type, reverse) {\n    return this._map.__iterator(type, reverse);\n  };\n\n  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return this.__empty();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return this.__make(newMap, ownerID);\n  };\n\n  return Set;\n}(SetCollection));\n\nSet.isSet = isSet;\n\nvar SetPrototype = Set.prototype;\nSetPrototype[IS_SET_SYMBOL] = true;\nSetPrototype[DELETE] = SetPrototype.remove;\nSetPrototype.merge = SetPrototype.concat = SetPrototype.union;\nSetPrototype.withMutations = withMutations;\nSetPrototype.asImmutable = asImmutable;\nSetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;\nSetPrototype['@@transducer/step'] = function (result, arr) {\n  return result.add(arr);\n};\nSetPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nSetPrototype.__empty = emptySet;\nSetPrototype.__make = makeSet;\n\nfunction updateSet(set, newMap) {\n  if (set.__ownerID) {\n    set.size = newMap.size;\n    set._map = newMap;\n    return set;\n  }\n  return newMap === set._map\n    ? set\n    : newMap.size === 0\n    ? set.__empty()\n    : set.__make(newMap);\n}\n\nfunction makeSet(map, ownerID) {\n  var set = Object.create(SetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_SET;\nfunction emptySet() {\n  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n}\n\n/**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */\nvar Range = /*@__PURE__*/(function (IndexedSeq) {\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      return new Range(start, end, step);\n    }\n    invariant(step !== 0, 'Cannot step a Range by 0');\n    start = start || 0;\n    if (end === undefined) {\n      end = Infinity;\n    }\n    step = step === undefined ? 1 : Math.abs(step);\n    if (end < start) {\n      step = -step;\n    }\n    this._start = start;\n    this._end = end;\n    this._step = step;\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n    if (this.size === 0) {\n      if (EMPTY_RANGE) {\n        return EMPTY_RANGE;\n      }\n      EMPTY_RANGE = this;\n    }\n  }\n\n  if ( IndexedSeq ) Range.__proto__ = IndexedSeq;\n  Range.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  Range.prototype.constructor = Range;\n\n  Range.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Range []';\n    }\n    return (\n      'Range [ ' +\n      this._start +\n      '...' +\n      this._end +\n      (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]'\n    );\n  };\n\n  Range.prototype.get = function get (index, notSetValue) {\n    return this.has(index)\n      ? this._start + wrapIndex(this, index) * this._step\n      : notSetValue;\n  };\n\n  Range.prototype.includes = function includes (searchValue) {\n    var possibleIndex = (searchValue - this._start) / this._step;\n    return (\n      possibleIndex >= 0 &&\n      possibleIndex < this.size &&\n      possibleIndex === Math.floor(possibleIndex)\n    );\n  };\n\n  Range.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    begin = resolveBegin(begin, this.size);\n    end = resolveEnd(end, this.size);\n    if (end <= begin) {\n      return new Range(0, 0);\n    }\n    return new Range(\n      this.get(begin, this._end),\n      this.get(end, this._end),\n      this._step\n    );\n  };\n\n  Range.prototype.indexOf = function indexOf (searchValue) {\n    var offsetValue = searchValue - this._start;\n    if (offsetValue % this._step === 0) {\n      var index = offsetValue / this._step;\n      if (index >= 0 && index < this.size) {\n        return index;\n      }\n    }\n    return -1;\n  };\n\n  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    return this.indexOf(searchValue);\n  };\n\n  Range.prototype.__iterate = function __iterate (fn, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    while (i !== size) {\n      if (fn(value, reverse ? size - ++i : i++, this) === false) {\n        break;\n      }\n      value += reverse ? -step : step;\n    }\n    return i;\n  };\n\n  Range.prototype.__iterator = function __iterator (type, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var v = value;\n      value += reverse ? -step : step;\n      return iteratorValue(type, reverse ? size - ++i : i++, v);\n    });\n  };\n\n  Range.prototype.equals = function equals (other) {\n    return other instanceof Range\n      ? this._start === other._start &&\n          this._end === other._end &&\n          this._step === other._step\n      : deepEqual(this, other);\n  };\n\n  return Range;\n}(IndexedSeq));\n\nvar EMPTY_RANGE;\n\nfunction getIn$1(collection, searchKeyPath, notSetValue) {\n  var keyPath = coerceKeyPath(searchKeyPath);\n  var i = 0;\n  while (i !== keyPath.length) {\n    collection = get(collection, keyPath[i++], NOT_SET);\n    if (collection === NOT_SET) {\n      return notSetValue;\n    }\n  }\n  return collection;\n}\n\nfunction getIn(searchKeyPath, notSetValue) {\n  return getIn$1(this, searchKeyPath, notSetValue);\n}\n\nfunction hasIn$1(collection, keyPath) {\n  return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;\n}\n\nfunction hasIn(searchKeyPath) {\n  return hasIn$1(this, searchKeyPath);\n}\n\nfunction toObject() {\n  assertNotInfinite(this.size);\n  var object = {};\n  this.__iterate(function (v, k) {\n    object[k] = v;\n  });\n  return object;\n}\n\n// Note: all of these methods are deprecated.\nCollection.isIterable = isCollection;\nCollection.isKeyed = isKeyed;\nCollection.isIndexed = isIndexed;\nCollection.isAssociative = isAssociative;\nCollection.isOrdered = isOrdered;\n\nCollection.Iterator = Iterator;\n\nmixin(Collection, {\n  // ### Conversion to other types\n\n  toArray: function toArray() {\n    assertNotInfinite(this.size);\n    var array = new Array(this.size || 0);\n    var useTuples = isKeyed(this);\n    var i = 0;\n    this.__iterate(function (v, k) {\n      // Keyed collections produce an array of tuples.\n      array[i++] = useTuples ? [k, v] : v;\n    });\n    return array;\n  },\n\n  toIndexedSeq: function toIndexedSeq() {\n    return new ToIndexedSequence(this);\n  },\n\n  toJS: function toJS$1() {\n    return toJS(this);\n  },\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, true);\n  },\n\n  toMap: function toMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return Map(this.toKeyedSeq());\n  },\n\n  toObject: toObject,\n\n  toOrderedMap: function toOrderedMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedMap(this.toKeyedSeq());\n  },\n\n  toOrderedSet: function toOrderedSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSet: function toSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return Set(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSetSeq: function toSetSeq() {\n    return new ToSetSequence(this);\n  },\n\n  toSeq: function toSeq() {\n    return isIndexed(this)\n      ? this.toIndexedSeq()\n      : isKeyed(this)\n      ? this.toKeyedSeq()\n      : this.toSetSeq();\n  },\n\n  toStack: function toStack() {\n    // Use Late Binding here to solve the circular dependency.\n    return Stack(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toList: function toList() {\n    // Use Late Binding here to solve the circular dependency.\n    return List(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  // ### Common JavaScript methods and properties\n\n  toString: function toString() {\n    return '[Collection]';\n  },\n\n  __toString: function __toString(head, tail) {\n    if (this.size === 0) {\n      return head + tail;\n    }\n    return (\n      head +\n      ' ' +\n      this.toSeq().map(this.__toStringMapper).join(', ') +\n      ' ' +\n      tail\n    );\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  concat: function concat() {\n    var values = [], len = arguments.length;\n    while ( len-- ) values[ len ] = arguments[ len ];\n\n    return reify(this, concatFactory(this, values));\n  },\n\n  includes: function includes(searchValue) {\n    return this.some(function (value) { return is(value, searchValue); });\n  },\n\n  entries: function entries() {\n    return this.__iterator(ITERATE_ENTRIES);\n  },\n\n  every: function every(predicate, context) {\n    assertNotInfinite(this.size);\n    var returnValue = true;\n    this.__iterate(function (v, k, c) {\n      if (!predicate.call(context, v, k, c)) {\n        returnValue = false;\n        return false;\n      }\n    });\n    return returnValue;\n  },\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, true));\n  },\n\n  partition: function partition(predicate, context) {\n    return partitionFactory(this, predicate, context);\n  },\n\n  find: function find(predicate, context, notSetValue) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[1] : notSetValue;\n  },\n\n  forEach: function forEach(sideEffect, context) {\n    assertNotInfinite(this.size);\n    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n  },\n\n  join: function join(separator) {\n    assertNotInfinite(this.size);\n    separator = separator !== undefined ? '' + separator : ',';\n    var joined = '';\n    var isFirst = true;\n    this.__iterate(function (v) {\n      isFirst ? (isFirst = false) : (joined += separator);\n      joined += v !== null && v !== undefined ? v.toString() : '';\n    });\n    return joined;\n  },\n\n  keys: function keys() {\n    return this.__iterator(ITERATE_KEYS);\n  },\n\n  map: function map(mapper, context) {\n    return reify(this, mapFactory(this, mapper, context));\n  },\n\n  reduce: function reduce$1(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      false\n    );\n  },\n\n  reduceRight: function reduceRight(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      true\n    );\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, true));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, true));\n  },\n\n  some: function some(predicate, context) {\n    return !this.every(not(predicate), context);\n  },\n\n  sort: function sort(comparator) {\n    return reify(this, sortFactory(this, comparator));\n  },\n\n  values: function values() {\n    return this.__iterator(ITERATE_VALUES);\n  },\n\n  // ### More sequential methods\n\n  butLast: function butLast() {\n    return this.slice(0, -1);\n  },\n\n  isEmpty: function isEmpty() {\n    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n  },\n\n  count: function count(predicate, context) {\n    return ensureSize(\n      predicate ? this.toSeq().filter(predicate, context) : this\n    );\n  },\n\n  countBy: function countBy(grouper, context) {\n    return countByFactory(this, grouper, context);\n  },\n\n  equals: function equals(other) {\n    return deepEqual(this, other);\n  },\n\n  entrySeq: function entrySeq() {\n    var collection = this;\n    if (collection._cache) {\n      // We cache as an entries array, so we can just return the cache!\n      return new ArraySeq(collection._cache);\n    }\n    var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n    return entriesSequence;\n  },\n\n  filterNot: function filterNot(predicate, context) {\n    return this.filter(not(predicate), context);\n  },\n\n  findEntry: function findEntry(predicate, context, notSetValue) {\n    var found = notSetValue;\n    this.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        found = [k, v];\n        return false;\n      }\n    });\n    return found;\n  },\n\n  findKey: function findKey(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry && entry[0];\n  },\n\n  findLast: function findLast(predicate, context, notSetValue) {\n    return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n  },\n\n  findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findEntry(predicate, context, notSetValue);\n  },\n\n  findLastKey: function findLastKey(predicate, context) {\n    return this.toKeyedSeq().reverse().findKey(predicate, context);\n  },\n\n  first: function first(notSetValue) {\n    return this.find(returnTrue, null, notSetValue);\n  },\n\n  flatMap: function flatMap(mapper, context) {\n    return reify(this, flatMapFactory(this, mapper, context));\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, true));\n  },\n\n  fromEntrySeq: function fromEntrySeq() {\n    return new FromEntriesSequence(this);\n  },\n\n  get: function get(searchKey, notSetValue) {\n    return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n  },\n\n  getIn: getIn,\n\n  groupBy: function groupBy(grouper, context) {\n    return groupByFactory(this, grouper, context);\n  },\n\n  has: function has(searchKey) {\n    return this.get(searchKey, NOT_SET) !== NOT_SET;\n  },\n\n  hasIn: hasIn,\n\n  isSubset: function isSubset(iter) {\n    iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n    return this.every(function (value) { return iter.includes(value); });\n  },\n\n  isSuperset: function isSuperset(iter) {\n    iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n    return iter.isSubset(this);\n  },\n\n  keyOf: function keyOf(searchValue) {\n    return this.findKey(function (value) { return is(value, searchValue); });\n  },\n\n  keySeq: function keySeq() {\n    return this.toSeq().map(keyMapper).toIndexedSeq();\n  },\n\n  last: function last(notSetValue) {\n    return this.toSeq().reverse().first(notSetValue);\n  },\n\n  lastKeyOf: function lastKeyOf(searchValue) {\n    return this.toKeyedSeq().reverse().keyOf(searchValue);\n  },\n\n  max: function max(comparator) {\n    return maxFactory(this, comparator);\n  },\n\n  maxBy: function maxBy(mapper, comparator) {\n    return maxFactory(this, comparator, mapper);\n  },\n\n  min: function min(comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator\n    );\n  },\n\n  minBy: function minBy(mapper, comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator,\n      mapper\n    );\n  },\n\n  rest: function rest() {\n    return this.slice(1);\n  },\n\n  skip: function skip(amount) {\n    return amount === 0 ? this : this.slice(Math.max(0, amount));\n  },\n\n  skipLast: function skipLast(amount) {\n    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, true));\n  },\n\n  skipUntil: function skipUntil(predicate, context) {\n    return this.skipWhile(not(predicate), context);\n  },\n\n  sortBy: function sortBy(mapper, comparator) {\n    return reify(this, sortFactory(this, comparator, mapper));\n  },\n\n  take: function take(amount) {\n    return this.slice(0, Math.max(0, amount));\n  },\n\n  takeLast: function takeLast(amount) {\n    return this.slice(-Math.max(0, amount));\n  },\n\n  takeWhile: function takeWhile(predicate, context) {\n    return reify(this, takeWhileFactory(this, predicate, context));\n  },\n\n  takeUntil: function takeUntil(predicate, context) {\n    return this.takeWhile(not(predicate), context);\n  },\n\n  update: function update(fn) {\n    return fn(this);\n  },\n\n  valueSeq: function valueSeq() {\n    return this.toIndexedSeq();\n  },\n\n  // ### Hashable Object\n\n  hashCode: function hashCode() {\n    return this.__hash || (this.__hash = hashCollection(this));\n  },\n\n  // ### Internal\n\n  // abstract __iterate(fn, reverse)\n\n  // abstract __iterator(type, reverse)\n});\n\nvar CollectionPrototype = Collection.prototype;\nCollectionPrototype[IS_COLLECTION_SYMBOL] = true;\nCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\nCollectionPrototype.toJSON = CollectionPrototype.toArray;\nCollectionPrototype.__toStringMapper = quoteString;\nCollectionPrototype.inspect = CollectionPrototype.toSource = function () {\n  return this.toString();\n};\nCollectionPrototype.chain = CollectionPrototype.flatMap;\nCollectionPrototype.contains = CollectionPrototype.includes;\n\nmixin(KeyedCollection, {\n  // ### More sequential methods\n\n  flip: function flip() {\n    return reify(this, flipFactory(this));\n  },\n\n  mapEntries: function mapEntries(mapper, context) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    return reify(\n      this,\n      this.toSeq()\n        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1$1); })\n        .fromEntrySeq()\n    );\n  },\n\n  mapKeys: function mapKeys(mapper, context) {\n    var this$1$1 = this;\n\n    return reify(\n      this,\n      this.toSeq()\n        .flip()\n        .map(function (k, v) { return mapper.call(context, k, v, this$1$1); })\n        .flip()\n    );\n  },\n});\n\nvar KeyedCollectionPrototype = KeyedCollection.prototype;\nKeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;\nKeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nKeyedCollectionPrototype.toJSON = toObject;\nKeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\nmixin(IndexedCollection, {\n  // ### Conversion to other types\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, false);\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, false));\n  },\n\n  findIndex: function findIndex(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  indexOf: function indexOf(searchValue) {\n    var key = this.keyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  lastIndexOf: function lastIndexOf(searchValue) {\n    var key = this.lastKeyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, false));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, false));\n  },\n\n  splice: function splice(index, removeNum /*, ...values*/) {\n    var numArgs = arguments.length;\n    removeNum = Math.max(removeNum || 0, 0);\n    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n      return this;\n    }\n    // If index is negative, it should resolve relative to the size of the\n    // collection. However size may be expensive to compute if not cached, so\n    // only call count() if the number is in fact negative.\n    index = resolveBegin(index, index < 0 ? this.count() : this.size);\n    var spliced = this.slice(0, index);\n    return reify(\n      this,\n      numArgs === 1\n        ? spliced\n        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n    );\n  },\n\n  // ### More collection methods\n\n  findLastIndex: function findLastIndex(predicate, context) {\n    var entry = this.findLastEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  first: function first(notSetValue) {\n    return this.get(0, notSetValue);\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, false));\n  },\n\n  get: function get(index, notSetValue) {\n    index = wrapIndex(this, index);\n    return index < 0 ||\n      this.size === Infinity ||\n      (this.size !== undefined && index > this.size)\n      ? notSetValue\n      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n  },\n\n  has: function has(index) {\n    index = wrapIndex(this, index);\n    return (\n      index >= 0 &&\n      (this.size !== undefined\n        ? this.size === Infinity || index < this.size\n        : this.indexOf(index) !== -1)\n    );\n  },\n\n  interpose: function interpose(separator) {\n    return reify(this, interposeFactory(this, separator));\n  },\n\n  interleave: function interleave(/*...collections*/) {\n    var collections = [this].concat(arrCopy(arguments));\n    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n    var interleaved = zipped.flatten(true);\n    if (zipped.size) {\n      interleaved.size = zipped.size * collections.length;\n    }\n    return reify(this, interleaved);\n  },\n\n  keySeq: function keySeq() {\n    return Range(0, this.size);\n  },\n\n  last: function last(notSetValue) {\n    return this.get(-1, notSetValue);\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, false));\n  },\n\n  zip: function zip(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections));\n  },\n\n  zipAll: function zipAll(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n  },\n\n  zipWith: function zipWith(zipper /*, ...collections */) {\n    var collections = arrCopy(arguments);\n    collections[0] = this;\n    return reify(this, zipWithFactory(this, zipper, collections));\n  },\n});\n\nvar IndexedCollectionPrototype = IndexedCollection.prototype;\nIndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;\nIndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;\n\nmixin(SetCollection, {\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  get: function get(value, notSetValue) {\n    return this.has(value) ? value : notSetValue;\n  },\n\n  includes: function includes(value) {\n    return this.has(value);\n  },\n\n  // ### More sequential methods\n\n  keySeq: function keySeq() {\n    return this.valueSeq();\n  },\n});\n\nvar SetCollectionPrototype = SetCollection.prototype;\nSetCollectionPrototype.has = CollectionPrototype.includes;\nSetCollectionPrototype.contains = SetCollectionPrototype.includes;\nSetCollectionPrototype.keys = SetCollectionPrototype.values;\n\n// Mixin subclasses\n\nmixin(KeyedSeq, KeyedCollectionPrototype);\nmixin(IndexedSeq, IndexedCollectionPrototype);\nmixin(SetSeq, SetCollectionPrototype);\n\n// #pragma Helper functions\n\nfunction reduce(collection, reducer, reduction, context, useFirst, reverse) {\n  assertNotInfinite(collection.size);\n  collection.__iterate(function (v, k, c) {\n    if (useFirst) {\n      useFirst = false;\n      reduction = v;\n    } else {\n      reduction = reducer.call(context, reduction, v, k, c);\n    }\n  }, reverse);\n  return reduction;\n}\n\nfunction keyMapper(v, k) {\n  return k;\n}\n\nfunction entryMapper(v, k) {\n  return [k, v];\n}\n\nfunction not(predicate) {\n  return function () {\n    return !predicate.apply(this, arguments);\n  };\n}\n\nfunction neg(predicate) {\n  return function () {\n    return -predicate.apply(this, arguments);\n  };\n}\n\nfunction defaultZipper() {\n  return arrCopy(arguments);\n}\n\nfunction defaultNegComparator(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\nfunction hashCollection(collection) {\n  if (collection.size === Infinity) {\n    return 0;\n  }\n  var ordered = isOrdered(collection);\n  var keyed = isKeyed(collection);\n  var h = ordered ? 1 : 0;\n  var size = collection.__iterate(\n    keyed\n      ? ordered\n        ? function (v, k) {\n            h = (31 * h + hashMerge(hash(v), hash(k))) | 0;\n          }\n        : function (v, k) {\n            h = (h + hashMerge(hash(v), hash(k))) | 0;\n          }\n      : ordered\n      ? function (v) {\n          h = (31 * h + hash(v)) | 0;\n        }\n      : function (v) {\n          h = (h + hash(v)) | 0;\n        }\n  );\n  return murmurHashOfSize(size, h);\n}\n\nfunction murmurHashOfSize(size, h) {\n  h = imul(h, 0xcc9e2d51);\n  h = imul((h << 15) | (h >>> -15), 0x1b873593);\n  h = imul((h << 13) | (h >>> -13), 5);\n  h = ((h + 0xe6546b64) | 0) ^ size;\n  h = imul(h ^ (h >>> 16), 0x85ebca6b);\n  h = imul(h ^ (h >>> 13), 0xc2b2ae35);\n  h = smi(h ^ (h >>> 16));\n  return h;\n}\n\nfunction hashMerge(a, b) {\n  return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int\n}\n\nvar OrderedSet = /*@__PURE__*/(function (Set) {\n  function OrderedSet(value) {\n    return value === undefined || value === null\n      ? emptyOrderedSet()\n      : isOrderedSet(value)\n      ? value\n      : emptyOrderedSet().withMutations(function (set) {\n          var iter = SetCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v) { return set.add(v); });\n        });\n  }\n\n  if ( Set ) OrderedSet.__proto__ = Set;\n  OrderedSet.prototype = Object.create( Set && Set.prototype );\n  OrderedSet.prototype.constructor = OrderedSet;\n\n  OrderedSet.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function toString () {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n  return OrderedSet;\n}(Set));\n\nOrderedSet.isOrderedSet = isOrderedSet;\n\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\nOrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;\n\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\n\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return (\n    EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))\n  );\n}\n\nfunction throwOnInvalidDefaultValues(defaultValues) {\n  if (isRecord(defaultValues)) {\n    throw new Error(\n      'Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.'\n    );\n  }\n\n  if (isImmutable(defaultValues)) {\n    throw new Error(\n      'Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.'\n    );\n  }\n\n  if (defaultValues === null || typeof defaultValues !== 'object') {\n    throw new Error(\n      'Can not call `Record` with a non-object as default values. Use a plain javascript object instead.'\n    );\n  }\n}\n\nvar Record = function Record(defaultValues, name) {\n  var hasInitialized;\n\n  throwOnInvalidDefaultValues(defaultValues);\n\n  var RecordType = function Record(values) {\n    var this$1$1 = this;\n\n    if (values instanceof RecordType) {\n      return values;\n    }\n    if (!(this instanceof RecordType)) {\n      return new RecordType(values);\n    }\n    if (!hasInitialized) {\n      hasInitialized = true;\n      var keys = Object.keys(defaultValues);\n      var indices = (RecordTypePrototype._indices = {});\n      // Deprecated: left to attempt not to break any external code which\n      // relies on a ._name property existing on record instances.\n      // Use Record.getDescriptiveName() instead\n      RecordTypePrototype._name = name;\n      RecordTypePrototype._keys = keys;\n      RecordTypePrototype._defaultValues = defaultValues;\n      for (var i = 0; i < keys.length; i++) {\n        var propName = keys[i];\n        indices[propName] = i;\n        if (RecordTypePrototype[propName]) {\n          /* eslint-disable no-console */\n          typeof console === 'object' &&\n            console.warn &&\n            console.warn(\n              'Cannot define ' +\n                recordName(this) +\n                ' with property \"' +\n                propName +\n                '\" since that property name is part of the Record API.'\n            );\n          /* eslint-enable no-console */\n        } else {\n          setProp(RecordTypePrototype, propName);\n        }\n      }\n    }\n    this.__ownerID = undefined;\n    this._values = List().withMutations(function (l) {\n      l.setSize(this$1$1._keys.length);\n      KeyedCollection(values).forEach(function (v, k) {\n        l.set(this$1$1._indices[k], v === this$1$1._defaultValues[k] ? undefined : v);\n      });\n    });\n    return this;\n  };\n\n  var RecordTypePrototype = (RecordType.prototype =\n    Object.create(RecordPrototype));\n  RecordTypePrototype.constructor = RecordType;\n\n  if (name) {\n    RecordType.displayName = name;\n  }\n\n  return RecordType;\n};\n\nRecord.prototype.toString = function toString () {\n  var str = recordName(this) + ' { ';\n  var keys = this._keys;\n  var k;\n  for (var i = 0, l = keys.length; i !== l; i++) {\n    k = keys[i];\n    str += (i ? ', ' : '') + k + ': ' + quoteString(this.get(k));\n  }\n  return str + ' }';\n};\n\nRecord.prototype.equals = function equals (other) {\n  return (\n    this === other ||\n    (isRecord(other) && recordSeq(this).equals(recordSeq(other)))\n  );\n};\n\nRecord.prototype.hashCode = function hashCode () {\n  return recordSeq(this).hashCode();\n};\n\n// @pragma Access\n\nRecord.prototype.has = function has (k) {\n  return this._indices.hasOwnProperty(k);\n};\n\nRecord.prototype.get = function get (k, notSetValue) {\n  if (!this.has(k)) {\n    return notSetValue;\n  }\n  var index = this._indices[k];\n  var value = this._values.get(index);\n  return value === undefined ? this._defaultValues[k] : value;\n};\n\n// @pragma Modification\n\nRecord.prototype.set = function set (k, v) {\n  if (this.has(k)) {\n    var newValues = this._values.set(\n      this._indices[k],\n      v === this._defaultValues[k] ? undefined : v\n    );\n    if (newValues !== this._values && !this.__ownerID) {\n      return makeRecord(this, newValues);\n    }\n  }\n  return this;\n};\n\nRecord.prototype.remove = function remove (k) {\n  return this.set(k);\n};\n\nRecord.prototype.clear = function clear () {\n  var newValues = this._values.clear().setSize(this._keys.length);\n\n  return this.__ownerID ? this : makeRecord(this, newValues);\n};\n\nRecord.prototype.wasAltered = function wasAltered () {\n  return this._values.wasAltered();\n};\n\nRecord.prototype.toSeq = function toSeq () {\n  return recordSeq(this);\n};\n\nRecord.prototype.toJS = function toJS$1 () {\n  return toJS(this);\n};\n\nRecord.prototype.entries = function entries () {\n  return this.__iterator(ITERATE_ENTRIES);\n};\n\nRecord.prototype.__iterator = function __iterator (type, reverse) {\n  return recordSeq(this).__iterator(type, reverse);\n};\n\nRecord.prototype.__iterate = function __iterate (fn, reverse) {\n  return recordSeq(this).__iterate(fn, reverse);\n};\n\nRecord.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n  if (ownerID === this.__ownerID) {\n    return this;\n  }\n  var newValues = this._values.__ensureOwner(ownerID);\n  if (!ownerID) {\n    this.__ownerID = ownerID;\n    this._values = newValues;\n    return this;\n  }\n  return makeRecord(this, newValues, ownerID);\n};\n\nRecord.isRecord = isRecord;\nRecord.getDescriptiveName = recordName;\nvar RecordPrototype = Record.prototype;\nRecordPrototype[IS_RECORD_SYMBOL] = true;\nRecordPrototype[DELETE] = RecordPrototype.remove;\nRecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\nRecordPrototype.getIn = getIn;\nRecordPrototype.hasIn = CollectionPrototype.hasIn;\nRecordPrototype.merge = merge$1;\nRecordPrototype.mergeWith = mergeWith$1;\nRecordPrototype.mergeIn = mergeIn;\nRecordPrototype.mergeDeep = mergeDeep;\nRecordPrototype.mergeDeepWith = mergeDeepWith;\nRecordPrototype.mergeDeepIn = mergeDeepIn;\nRecordPrototype.setIn = setIn;\nRecordPrototype.update = update;\nRecordPrototype.updateIn = updateIn;\nRecordPrototype.withMutations = withMutations;\nRecordPrototype.asMutable = asMutable;\nRecordPrototype.asImmutable = asImmutable;\nRecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\nRecordPrototype.toJSON = RecordPrototype.toObject =\n  CollectionPrototype.toObject;\nRecordPrototype.inspect = RecordPrototype.toSource = function () {\n  return this.toString();\n};\n\nfunction makeRecord(likeRecord, values, ownerID) {\n  var record = Object.create(Object.getPrototypeOf(likeRecord));\n  record._values = values;\n  record.__ownerID = ownerID;\n  return record;\n}\n\nfunction recordName(record) {\n  return record.constructor.displayName || record.constructor.name || 'Record';\n}\n\nfunction recordSeq(record) {\n  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n}\n\nfunction setProp(prototype, name) {\n  try {\n    Object.defineProperty(prototype, name, {\n      get: function () {\n        return this.get(name);\n      },\n      set: function (value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      },\n    });\n  } catch (error) {\n    // Object.defineProperty failed. Probably IE8.\n  }\n}\n\n/**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */\nvar Repeat = /*@__PURE__*/(function (IndexedSeq) {\n  function Repeat(value, times) {\n    if (!(this instanceof Repeat)) {\n      return new Repeat(value, times);\n    }\n    this._value = value;\n    this.size = times === undefined ? Infinity : Math.max(0, times);\n    if (this.size === 0) {\n      if (EMPTY_REPEAT) {\n        return EMPTY_REPEAT;\n      }\n      EMPTY_REPEAT = this;\n    }\n  }\n\n  if ( IndexedSeq ) Repeat.__proto__ = IndexedSeq;\n  Repeat.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  Repeat.prototype.constructor = Repeat;\n\n  Repeat.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Repeat []';\n    }\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n  };\n\n  Repeat.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._value : notSetValue;\n  };\n\n  Repeat.prototype.includes = function includes (searchValue) {\n    return is(this._value, searchValue);\n  };\n\n  Repeat.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    return wholeSlice(begin, end, size)\n      ? this\n      : new Repeat(\n          this._value,\n          resolveEnd(end, size) - resolveBegin(begin, size)\n        );\n  };\n\n  Repeat.prototype.reverse = function reverse () {\n    return this;\n  };\n\n  Repeat.prototype.indexOf = function indexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return 0;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return this.size;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n    var size = this.size;\n    var i = 0;\n    while (i !== size) {\n      if (fn(this._value, reverse ? size - ++i : i++, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  Repeat.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    return new Iterator(function () { return i === size\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? size - ++i : i++, this$1$1._value); }\n    );\n  };\n\n  Repeat.prototype.equals = function equals (other) {\n    return other instanceof Repeat\n      ? is(this._value, other._value)\n      : deepEqual(other);\n  };\n\n  return Repeat;\n}(IndexedSeq));\n\nvar EMPTY_REPEAT;\n\nfunction fromJS(value, converter) {\n  return fromJSWith(\n    [],\n    converter || defaultConverter,\n    value,\n    '',\n    converter && converter.length > 2 ? [] : undefined,\n    { '': value }\n  );\n}\n\nfunction fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n  if (\n    typeof value !== 'string' &&\n    !isImmutable(value) &&\n    (isArrayLike(value) || hasIterator(value) || isPlainObject(value))\n  ) {\n    if (~stack.indexOf(value)) {\n      throw new TypeError('Cannot convert circular structure to Immutable');\n    }\n    stack.push(value);\n    keyPath && key !== '' && keyPath.push(key);\n    var converted = converter.call(\n      parentValue,\n      key,\n      Seq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }\n      ),\n      keyPath && keyPath.slice()\n    );\n    stack.pop();\n    keyPath && keyPath.pop();\n    return converted;\n  }\n  return value;\n}\n\nfunction defaultConverter(k, v) {\n  // Effectively the opposite of \"Collection.toSeq()\"\n  return isIndexed(v) ? v.toList() : isKeyed(v) ? v.toMap() : v.toSet();\n}\n\nvar version = \"4.2.4\";\n\nvar Immutable = {\n  version: version,\n\n  Collection: Collection,\n  // Note: Iterable is deprecated\n  Iterable: Collection,\n\n  Seq: Seq,\n  Map: Map,\n  OrderedMap: OrderedMap,\n  List: List,\n  Stack: Stack,\n  Set: Set,\n  OrderedSet: OrderedSet,\n\n  Record: Record,\n  Range: Range,\n  Repeat: Repeat,\n\n  is: is,\n  fromJS: fromJS,\n  hash: hash,\n\n  isImmutable: isImmutable,\n  isCollection: isCollection,\n  isKeyed: isKeyed,\n  isIndexed: isIndexed,\n  isAssociative: isAssociative,\n  isOrdered: isOrdered,\n  isValueObject: isValueObject,\n  isPlainObject: isPlainObject,\n  isSeq: isSeq,\n  isList: isList,\n  isMap: isMap,\n  isOrderedMap: isOrderedMap,\n  isStack: isStack,\n  isSet: isSet,\n  isOrderedSet: isOrderedSet,\n  isRecord: isRecord,\n\n  get: get,\n  getIn: getIn$1,\n  has: has,\n  hasIn: hasIn$1,\n  merge: merge,\n  mergeDeep: mergeDeep$1,\n  mergeWith: mergeWith,\n  mergeDeepWith: mergeDeepWith$1,\n  remove: remove,\n  removeIn: removeIn,\n  set: set,\n  setIn: setIn$1,\n  update: update$1,\n  updateIn: updateIn$1,\n};\n\n// Note: Iterable is deprecated\nvar Iterable = Collection;\n\nexport default Immutable;\nexport { Collection, Iterable, List, Map, OrderedMap, OrderedSet, Range, Record, Repeat, Seq, Set, Stack, fromJS, get, getIn$1 as getIn, has, hasIn$1 as hasIn, hash, is, isAssociative, isCollection, isImmutable, isIndexed, isKeyed, isList, isMap, isOrdered, isOrderedMap, isOrderedSet, isPlainObject, isRecord, isSeq, isSet, isStack, isValueObject, merge, mergeDeep$1 as mergeDeep, mergeDeepWith$1 as mergeDeepWith, mergeWith, remove, removeIn, set, setIn$1 as setIn, update$1 as update, updateIn$1 as updateIn, version };\n"}},"immutable.js":{"file":{"contents":"/**\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Immutable = {}));\n}(this, (function (exports) { 'use strict';\n\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  function MakeRef() {\n    return { value: false };\n  }\n\n  function SetRef(ref) {\n    if (ref) {\n      ref.value = true;\n    }\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (\n      ((begin === 0 && !isNeg(begin)) ||\n        (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size))\n    );\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    // Sanitize indices using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    return index === undefined\n      ? defaultIndex\n      : isNeg(index)\n      ? size === Infinity\n        ? size\n        : Math.max(0, size + index) | 0\n      : size === undefined || size === index\n      ? index\n      : Math.min(size, index) | 0;\n  }\n\n  function isNeg(value) {\n    // Account for -0 which is negative, but not less than 0.\n    return value < 0 || (value === 0 && 1 / value === -Infinity);\n  }\n\n  var IS_COLLECTION_SYMBOL = '@@__IMMUTABLE_ITERABLE__@@';\n\n  function isCollection(maybeCollection) {\n    return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);\n  }\n\n  var IS_KEYED_SYMBOL = '@@__IMMUTABLE_KEYED__@@';\n\n  function isKeyed(maybeKeyed) {\n    return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);\n  }\n\n  var IS_INDEXED_SYMBOL = '@@__IMMUTABLE_INDEXED__@@';\n\n  function isIndexed(maybeIndexed) {\n    return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  var Collection = function Collection(value) {\n    return isCollection(value) ? value : Seq(value);\n  };\n\n  var KeyedCollection = /*@__PURE__*/(function (Collection) {\n    function KeyedCollection(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n    if ( Collection ) KeyedCollection.__proto__ = Collection;\n    KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n    KeyedCollection.prototype.constructor = KeyedCollection;\n\n    return KeyedCollection;\n  }(Collection));\n\n  var IndexedCollection = /*@__PURE__*/(function (Collection) {\n    function IndexedCollection(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n    if ( Collection ) IndexedCollection.__proto__ = Collection;\n    IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n    IndexedCollection.prototype.constructor = IndexedCollection;\n\n    return IndexedCollection;\n  }(Collection));\n\n  var SetCollection = /*@__PURE__*/(function (Collection) {\n    function SetCollection(value) {\n      return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n    if ( Collection ) SetCollection.__proto__ = Collection;\n    SetCollection.prototype = Object.create( Collection && Collection.prototype );\n    SetCollection.prototype.constructor = SetCollection;\n\n    return SetCollection;\n  }(Collection));\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var IS_SEQ_SYMBOL = '@@__IMMUTABLE_SEQ__@@';\n\n  function isSeq(maybeSeq) {\n    return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);\n  }\n\n  var IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';\n\n  function isRecord(maybeRecord) {\n    return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);\n  }\n\n  function isImmutable(maybeImmutable) {\n    return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n  }\n\n  var IS_ORDERED_SYMBOL = '@@__IMMUTABLE_ORDERED__@@';\n\n  function isOrdered(maybeOrdered) {\n    return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);\n  }\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n  var Iterator = function Iterator(next) {\n    this.next = next;\n  };\n\n  Iterator.prototype.toString = function toString () {\n    return '[Iterator]';\n  };\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect = Iterator.prototype.toSource = function () {\n    return this.toString();\n  };\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult\n      ? (iteratorResult.value = value)\n      : (iteratorResult = {\n          value: value,\n          done: false,\n        });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    if (Array.isArray(maybeIterable)) {\n      // IE11 trick as it does not support `Symbol.iterator`\n      return true;\n    }\n\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn =\n      iterable &&\n      ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n        iterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isEntriesIterable(maybeIterable) {\n    var iteratorFn = getIteratorFn(maybeIterable);\n    return iteratorFn && iteratorFn === maybeIterable.entries;\n  }\n\n  function isKeysIterable(maybeIterable) {\n    var iteratorFn = getIteratorFn(maybeIterable);\n    return iteratorFn && iteratorFn === maybeIterable.keys;\n  }\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function isArrayLike(value) {\n    if (Array.isArray(value) || typeof value === 'string') {\n      return true;\n    }\n\n    return (\n      value &&\n      typeof value === 'object' &&\n      Number.isInteger(value.length) &&\n      value.length >= 0 &&\n      (value.length === 0\n        ? // Only {length: 0} is considered Array-like.\n          Object.keys(value).length === 1\n        : // An object is only Array-like if it has a property where the last value\n          // in the array-like may be found (which could be undefined).\n          value.hasOwnProperty(value.length - 1))\n    );\n  }\n\n  var Seq = /*@__PURE__*/(function (Collection) {\n    function Seq(value) {\n      return value === undefined || value === null\n        ? emptySequence()\n        : isImmutable(value)\n        ? value.toSeq()\n        : seqFromValue(value);\n    }\n\n    if ( Collection ) Seq.__proto__ = Collection;\n    Seq.prototype = Object.create( Collection && Collection.prototype );\n    Seq.prototype.constructor = Seq;\n\n    Seq.prototype.toSeq = function toSeq () {\n      return this;\n    };\n\n    Seq.prototype.toString = function toString () {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function cacheResult () {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function __iterate (fn, reverse) {\n      var cache = this._cache;\n      if (cache) {\n        var size = cache.length;\n        var i = 0;\n        while (i !== size) {\n          var entry = cache[reverse ? size - ++i : i++];\n          if (fn(entry[1], entry[0], this) === false) {\n            break;\n          }\n        }\n        return i;\n      }\n      return this.__iterateUncached(fn, reverse);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function __iterator (type, reverse) {\n      var cache = this._cache;\n      if (cache) {\n        var size = cache.length;\n        var i = 0;\n        return new Iterator(function () {\n          if (i === size) {\n            return iteratorDone();\n          }\n          var entry = cache[reverse ? size - ++i : i++];\n          return iteratorValue(type, entry[0], entry[1]);\n        });\n      }\n      return this.__iteratorUncached(type, reverse);\n    };\n\n    return Seq;\n  }(Collection));\n\n  var KeyedSeq = /*@__PURE__*/(function (Seq) {\n    function KeyedSeq(value) {\n      return value === undefined || value === null\n        ? emptySequence().toKeyedSeq()\n        : isCollection(value)\n        ? isKeyed(value)\n          ? value.toSeq()\n          : value.fromEntrySeq()\n        : isRecord(value)\n        ? value.toSeq()\n        : keyedSeqFromValue(value);\n    }\n\n    if ( Seq ) KeyedSeq.__proto__ = Seq;\n    KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n    KeyedSeq.prototype.constructor = KeyedSeq;\n\n    KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n      return this;\n    };\n\n    return KeyedSeq;\n  }(Seq));\n\n  var IndexedSeq = /*@__PURE__*/(function (Seq) {\n    function IndexedSeq(value) {\n      return value === undefined || value === null\n        ? emptySequence()\n        : isCollection(value)\n        ? isKeyed(value)\n          ? value.entrySeq()\n          : value.toIndexedSeq()\n        : isRecord(value)\n        ? value.toSeq().entrySeq()\n        : indexedSeqFromValue(value);\n    }\n\n    if ( Seq ) IndexedSeq.__proto__ = Seq;\n    IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n    IndexedSeq.prototype.constructor = IndexedSeq;\n\n    IndexedSeq.of = function of (/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function toString () {\n      return this.__toString('Seq [', ']');\n    };\n\n    return IndexedSeq;\n  }(Seq));\n\n  var SetSeq = /*@__PURE__*/(function (Seq) {\n    function SetSeq(value) {\n      return (\n        isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)\n      ).toSetSeq();\n    }\n\n    if ( Seq ) SetSeq.__proto__ = Seq;\n    SetSeq.prototype = Object.create( Seq && Seq.prototype );\n    SetSeq.prototype.constructor = SetSeq;\n\n    SetSeq.of = function of (/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function toSetSeq () {\n      return this;\n    };\n\n    return SetSeq;\n  }(Seq));\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  Seq.prototype[IS_SEQ_SYMBOL] = true;\n\n  // #pragma Root Sequences\n\n  var ArraySeq = /*@__PURE__*/(function (IndexedSeq) {\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n    ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n    ArraySeq.prototype.constructor = ArraySeq;\n\n    ArraySeq.prototype.get = function get (index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n      var array = this._array;\n      var size = array.length;\n      var i = 0;\n      while (i !== size) {\n        var ii = reverse ? size - ++i : i++;\n        if (fn(array[ii], ii, this) === false) {\n          break;\n        }\n      }\n      return i;\n    };\n\n    ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n      var array = this._array;\n      var size = array.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var ii = reverse ? size - ++i : i++;\n        return iteratorValue(type, ii, array[ii]);\n      });\n    };\n\n    return ArraySeq;\n  }(IndexedSeq));\n\n  var ObjectSeq = /*@__PURE__*/(function (KeyedSeq) {\n    function ObjectSeq(object) {\n      var keys = Object.keys(object).concat(\n        Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []\n      );\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n    ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n    ObjectSeq.prototype.constructor = ObjectSeq;\n\n    ObjectSeq.prototype.get = function get (key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function has (key) {\n      return hasOwnProperty.call(this._object, key);\n    };\n\n    ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var size = keys.length;\n      var i = 0;\n      while (i !== size) {\n        var key = keys[reverse ? size - ++i : i++];\n        if (fn(object[key], key, this) === false) {\n          break;\n        }\n      }\n      return i;\n    };\n\n    ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var size = keys.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var key = keys[reverse ? size - ++i : i++];\n        return iteratorValue(type, key, object[key]);\n      });\n    };\n\n    return ObjectSeq;\n  }(KeyedSeq));\n  ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;\n\n  var CollectionSeq = /*@__PURE__*/(function (IndexedSeq) {\n    function CollectionSeq(collection) {\n      this._collection = collection;\n      this.size = collection.length || collection.size;\n    }\n\n    if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n    CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n    CollectionSeq.prototype.constructor = CollectionSeq;\n\n    CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var collection = this._collection;\n      var iterator = getIterator(collection);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var collection = this._collection;\n      var iterator = getIterator(collection);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function () {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n    return CollectionSeq;\n  }(IndexedSeq));\n\n  // # pragma Helper functions\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (seq) {\n      return seq.fromEntrySeq();\n    }\n    if (typeof value === 'object') {\n      return new ObjectSeq(value);\n    }\n    throw new TypeError(\n      'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n        value\n    );\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (seq) {\n      return seq;\n    }\n    throw new TypeError(\n      'Expected Array or collection object of values: ' + value\n    );\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (seq) {\n      return isEntriesIterable(value)\n        ? seq.fromEntrySeq()\n        : isKeysIterable(value)\n        ? seq.toSetSeq()\n        : seq;\n    }\n    if (typeof value === 'object') {\n      return new ObjectSeq(value);\n    }\n    throw new TypeError(\n      'Expected Array or collection object of values, or keyed object: ' + value\n    );\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return isArrayLike(value)\n      ? new ArraySeq(value)\n      : hasIterator(value)\n      ? new CollectionSeq(value)\n      : undefined;\n  }\n\n  var IS_MAP_SYMBOL = '@@__IMMUTABLE_MAP__@@';\n\n  function isMap(maybeMap) {\n    return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);\n  }\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  function isValueObject(maybeValue) {\n    return Boolean(\n      maybeValue &&\n        typeof maybeValue.equals === 'function' &&\n        typeof maybeValue.hashCode === 'function'\n    );\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections are Value Objects: they implement `equals()`\n   * and `hashCode()`.\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (\n      typeof valueA.valueOf === 'function' &&\n      typeof valueB.valueOf === 'function'\n    ) {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    return !!(\n      isValueObject(valueA) &&\n      isValueObject(valueB) &&\n      valueA.equals(valueB)\n    );\n  }\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2\n      ? Math.imul\n      : function imul(a, b) {\n          a |= 0; // int\n          b |= 0; // int\n          var c = a & 0xffff;\n          var d = b & 0xffff;\n          // Shift by 0 fixes the sign on the high part.\n          return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int\n        };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);\n  }\n\n  var defaultValueOf = Object.prototype.valueOf;\n\n  function hash(o) {\n    if (o == null) {\n      return hashNullish(o);\n    }\n\n    if (typeof o.hashCode === 'function') {\n      // Drop any high bits from accidentally long hash codes.\n      return smi(o.hashCode(o));\n    }\n\n    var v = valueOf(o);\n\n    if (v == null) {\n      return hashNullish(v);\n    }\n\n    switch (typeof v) {\n      case 'boolean':\n        // The hash values for built-in constants are a 1 value for each 5-byte\n        // shift region expect for the first, which encodes the value. This\n        // reduces the odds of a hash collision for these common values.\n        return v ? 0x42108421 : 0x42108420;\n      case 'number':\n        return hashNumber(v);\n      case 'string':\n        return v.length > STRING_HASH_CACHE_MIN_STRLEN\n          ? cachedHashString(v)\n          : hashString(v);\n      case 'object':\n      case 'function':\n        return hashJSObj(v);\n      case 'symbol':\n        return hashSymbol(v);\n      default:\n        if (typeof v.toString === 'function') {\n          return hashString(v.toString());\n        }\n        throw new Error('Value type ' + typeof v + ' cannot be hashed.');\n    }\n  }\n\n  function hashNullish(nullish) {\n    return nullish === null ? 0x42108422 : /* undefined */ 0x42108423;\n  }\n\n  // Compress arbitrarily large numbers into smi hashes.\n  function hashNumber(n) {\n    if (n !== n || n === Infinity) {\n      return 0;\n    }\n    var hash = n | 0;\n    if (hash !== n) {\n      hash ^= n * 0xffffffff;\n    }\n    while (n > 0xffffffff) {\n      n /= 0xffffffff;\n      hash ^= n;\n    }\n    return smi(hash);\n  }\n\n  function cachedHashString(string) {\n    var hashed = stringHashCache[string];\n    if (hashed === undefined) {\n      hashed = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hashed;\n    }\n    return hashed;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hashed = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hashed = (31 * hashed + string.charCodeAt(ii)) | 0;\n    }\n    return smi(hashed);\n  }\n\n  function hashSymbol(sym) {\n    var hashed = symbolMap[sym];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    hashed = nextHash();\n\n    symbolMap[sym] = hashed;\n\n    return hashed;\n  }\n\n  function hashJSObj(obj) {\n    var hashed;\n    if (usingWeakMap) {\n      hashed = weakMap.get(obj);\n      if (hashed !== undefined) {\n        return hashed;\n      }\n    }\n\n    hashed = obj[UID_HASH_KEY];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    if (!canDefineProperty) {\n      hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hashed !== undefined) {\n        return hashed;\n      }\n\n      hashed = getIENodeHash(obj);\n      if (hashed !== undefined) {\n        return hashed;\n      }\n    }\n\n    hashed = nextHash();\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hashed);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: hashed,\n      });\n    } else if (\n      obj.propertyIsEnumerable !== undefined &&\n      obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n    ) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function () {\n        return this.constructor.prototype.propertyIsEnumerable.apply(\n          this,\n          arguments\n        );\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hashed;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hashed;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function () {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  })();\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  function valueOf(obj) {\n    return obj.valueOf !== defaultValueOf && typeof obj.valueOf === 'function'\n      ? obj.valueOf(obj)\n      : obj;\n  }\n\n  function nextHash() {\n    var nextHash = ++_objHashUID;\n    if (_objHashUID & 0x40000000) {\n      _objHashUID = 0;\n    }\n    return nextHash;\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var symbolMap = Object.create(null);\n\n  var _objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  var ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq) {\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    if ( KeyedSeq ) ToKeyedSequence.__proto__ = KeyedSeq;\n    ToKeyedSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n    ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n    ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function has (key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function reverse () {\n      var this$1$1 = this;\n\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function () { return this$1$1._iter.toSeq().reverse(); };\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function map (mapper, context) {\n      var this$1$1 = this;\n\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function () { return this$1$1._iter.toSeq().map(mapper, context); };\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1$1 = this;\n\n      return this._iter.__iterate(function (v, k) { return fn(v, k, this$1$1); }, reverse);\n    };\n\n    ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n      return this._iter.__iterator(type, reverse);\n    };\n\n    return ToKeyedSequence;\n  }(KeyedSeq));\n  ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;\n\n  var ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq) {\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    if ( IndexedSeq ) ToIndexedSequence.__proto__ = IndexedSeq;\n    ToIndexedSequence.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n    ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n    ToIndexedSequence.prototype.includes = function includes (value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1$1 = this;\n\n      var i = 0;\n      reverse && ensureSize(this);\n      return this._iter.__iterate(\n        function (v) { return fn(v, reverse ? this$1$1.size - ++i : i++, this$1$1); },\n        reverse\n      );\n    };\n\n    ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n      var this$1$1 = this;\n\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var i = 0;\n      reverse && ensureSize(this);\n      return new Iterator(function () {\n        var step = iterator.next();\n        return step.done\n          ? step\n          : iteratorValue(\n              type,\n              reverse ? this$1$1.size - ++i : i++,\n              step.value,\n              step\n            );\n      });\n    };\n\n    return ToIndexedSequence;\n  }(IndexedSeq));\n\n  var ToSetSequence = /*@__PURE__*/(function (SetSeq) {\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    if ( SetSeq ) ToSetSequence.__proto__ = SetSeq;\n    ToSetSequence.prototype = Object.create( SetSeq && SetSeq.prototype );\n    ToSetSequence.prototype.constructor = ToSetSequence;\n\n    ToSetSequence.prototype.has = function has (key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1$1 = this;\n\n      return this._iter.__iterate(function (v) { return fn(v, v, this$1$1); }, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        return step.done\n          ? step\n          : iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n    return ToSetSequence;\n  }(SetSeq));\n\n  var FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq) {\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    if ( KeyedSeq ) FromEntriesSequence.__proto__ = KeyedSeq;\n    FromEntriesSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n    FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n    FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1$1 = this;\n\n      return this._iter.__iterate(function (entry) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return fn(\n            indexedCollection ? entry.get(1) : entry[1],\n            indexedCollection ? entry.get(0) : entry[0],\n            this$1$1\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function () {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedCollection = isCollection(entry);\n            return iteratorValue(\n              type,\n              indexedCollection ? entry.get(0) : entry[0],\n              indexedCollection ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n    return FromEntriesSequence;\n  }(KeyedSeq));\n\n  ToIndexedSequence.prototype.cacheResult =\n    ToKeyedSequence.prototype.cacheResult =\n    ToSetSequence.prototype.cacheResult =\n    FromEntriesSequence.prototype.cacheResult =\n      cacheResultThrough;\n\n  function flipFactory(collection) {\n    var flipSequence = makeSequence(collection);\n    flipSequence._iter = collection;\n    flipSequence.size = collection.size;\n    flipSequence.flip = function () { return collection; };\n    flipSequence.reverse = function () {\n      var reversedSequence = collection.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function () { return collection.reverse(); };\n      return reversedSequence;\n    };\n    flipSequence.has = function (key) { return collection.includes(key); };\n    flipSequence.includes = function (key) { return collection.has(key); };\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {\n      var this$1$1 = this;\n\n      return collection.__iterate(function (v, k) { return fn(k, v, this$1$1) !== false; }, reverse);\n    };\n    flipSequence.__iteratorUncached = function (type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = collection.__iterator(type, reverse);\n        return new Iterator(function () {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return collection.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    };\n    return flipSequence;\n  }\n\n  function mapFactory(collection, mapper, context) {\n    var mappedSequence = makeSequence(collection);\n    mappedSequence.size = collection.size;\n    mappedSequence.has = function (key) { return collection.has(key); };\n    mappedSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v === NOT_SET\n        ? notSetValue\n        : mapper.call(context, v, key, collection);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {\n      var this$1$1 = this;\n\n      return collection.__iterate(\n        function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1$1) !== false; },\n        reverse\n      );\n    };\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, collection),\n          step\n        );\n      });\n    };\n    return mappedSequence;\n  }\n\n  function reverseFactory(collection, useKeys) {\n    var this$1$1 = this;\n\n    var reversedSequence = makeSequence(collection);\n    reversedSequence._iter = collection;\n    reversedSequence.size = collection.size;\n    reversedSequence.reverse = function () { return collection; };\n    if (collection.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(collection);\n        flipSequence.reverse = function () { return collection.flip(); };\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n    reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n    reversedSequence.includes = function (value) { return collection.includes(value); };\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {\n      var this$1$1 = this;\n\n      var i = 0;\n      reverse && ensureSize(collection);\n      return collection.__iterate(\n        function (v, k) { return fn(v, useKeys ? k : reverse ? this$1$1.size - ++i : i++, this$1$1); },\n        !reverse\n      );\n    };\n    reversedSequence.__iterator = function (type, reverse) {\n      var i = 0;\n      reverse && ensureSize(collection);\n      var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        return iteratorValue(\n          type,\n          useKeys ? entry[0] : reverse ? this$1$1.size - ++i : i++,\n          entry[1],\n          step\n        );\n      });\n    };\n    return reversedSequence;\n  }\n\n  function filterFactory(collection, predicate, context, useKeys) {\n    var filterSequence = makeSequence(collection);\n    if (useKeys) {\n      filterSequence.has = function (key) {\n        var v = collection.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n      };\n      filterSequence.get = function (key, notSetValue) {\n        var v = collection.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, collection)\n          ? v\n          : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {\n      var this$1$1 = this;\n\n      var iterations = 0;\n      collection.__iterate(function (v, k, c) {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$1$1);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function () {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, collection)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    };\n    return filterSequence;\n  }\n\n  function countByFactory(collection, grouper, context) {\n    var groups = Map().asMutable();\n    collection.__iterate(function (v, k) {\n      groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n    });\n    return groups.asImmutable();\n  }\n\n  function groupByFactory(collection, grouper, context) {\n    var isKeyedIter = isKeyed(collection);\n    var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n    collection.__iterate(function (v, k) {\n      groups.update(\n        grouper.call(context, v, k, collection),\n        function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n      );\n    });\n    var coerce = collectionClass(collection);\n    return groups.map(function (arr) { return reify(collection, coerce(arr)); }).asImmutable();\n  }\n\n  function partitionFactory(collection, predicate, context) {\n    var isKeyedIter = isKeyed(collection);\n    var groups = [[], []];\n    collection.__iterate(function (v, k) {\n      groups[predicate.call(context, v, k, collection) ? 1 : 0].push(\n        isKeyedIter ? [k, v] : v\n      );\n    });\n    var coerce = collectionClass(collection);\n    return groups.map(function (arr) { return reify(collection, coerce(arr)); });\n  }\n\n  function sliceFactory(collection, begin, end, useKeys) {\n    var originalSize = collection.size;\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return collection;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this collection's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(collection);\n\n    // If collection.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size =\n      sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;\n\n    if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize\n          ? collection.get(index + resolvedBegin, notSetValue)\n          : notSetValue;\n      };\n    }\n\n    sliceSeq.__iterateUncached = function (fn, reverse) {\n      var this$1$1 = this;\n\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      collection.__iterate(function (v, k) {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return (\n            fn(v, useKeys ? k : iterations - 1, this$1$1) !== false &&\n            iterations !== sliceSize\n          );\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function (type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      if (sliceSize === 0) {\n        return new Iterator(iteratorDone);\n      }\n      var iterator = collection.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function () {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES || step.done) {\n          return step;\n        }\n        if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        }\n        return iteratorValue(type, iterations - 1, step.value[1], step);\n      });\n    };\n\n    return sliceSeq;\n  }\n\n  function takeWhileFactory(collection, predicate, context) {\n    var takeSequence = makeSequence(collection);\n    takeSequence.__iterateUncached = function (fn, reverse) {\n      var this$1$1 = this;\n\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      collection.__iterate(\n        function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1$1); }\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function (type, reverse) {\n      var this$1$1 = this;\n\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function () {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$1$1)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n  function skipWhileFactory(collection, predicate, context, useKeys) {\n    var skipSequence = makeSequence(collection);\n    skipSequence.__iterateUncached = function (fn, reverse) {\n      var this$1$1 = this;\n\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      collection.__iterate(function (v, k, c) {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$1$1);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function (type, reverse) {\n      var this$1$1 = this;\n\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function () {\n        var step;\n        var k;\n        var v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            }\n            if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            }\n            return iteratorValue(type, iterations++, step.value[1], step);\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$1$1));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n  function concatFactory(collection, values) {\n    var isKeyedCollection = isKeyed(collection);\n    var iters = [collection]\n      .concat(values)\n      .map(function (v) {\n        if (!isCollection(v)) {\n          v = isKeyedCollection\n            ? keyedSeqFromValue(v)\n            : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n        } else if (isKeyedCollection) {\n          v = KeyedCollection(v);\n        }\n        return v;\n      })\n      .filter(function (v) { return v.size !== 0; });\n\n    if (iters.length === 0) {\n      return collection;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (\n        singleton === collection ||\n        (isKeyedCollection && isKeyed(singleton)) ||\n        (isIndexed(collection) && isIndexed(singleton))\n      ) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedCollection) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(collection)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(function (sum, seq) {\n      if (sum !== undefined) {\n        var size = seq.size;\n        if (size !== undefined) {\n          return sum + size;\n        }\n      }\n    }, 0);\n    return concatSeq;\n  }\n\n  function flattenFactory(collection, depth, useKeys) {\n    var flatSequence = makeSequence(collection);\n    flatSequence.__iterateUncached = function (fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {\n        iter.__iterate(function (v, k) {\n          if ((!depth || currentDepth < depth) && isCollection(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else {\n            iterations++;\n            if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n              stopped = true;\n            }\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(collection, 0);\n      return iterations;\n    };\n    flatSequence.__iteratorUncached = function (type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = collection.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function () {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isCollection(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    };\n    return flatSequence;\n  }\n\n  function flatMapFactory(collection, mapper, context) {\n    var coerce = collectionClass(collection);\n    return collection\n      .toSeq()\n      .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n      .flatten(true);\n  }\n\n  function interposeFactory(collection, separator) {\n    var interposedSequence = makeSequence(collection);\n    interposedSequence.size = collection.size && collection.size * 2 - 1;\n    interposedSequence.__iterateUncached = function (fn, reverse) {\n      var this$1$1 = this;\n\n      var iterations = 0;\n      collection.__iterate(\n        function (v) { return (!iterations || fn(separator, iterations++, this$1$1) !== false) &&\n          fn(v, iterations++, this$1$1) !== false; },\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function () {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2\n          ? iteratorValue(type, iterations++, separator)\n          : iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n  function sortFactory(collection, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedCollection = isKeyed(collection);\n    var index = 0;\n    var entries = collection\n      .toSeq()\n      .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n      .valueSeq()\n      .toArray();\n    entries\n      .sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; })\n      .forEach(\n        isKeyedCollection\n          ? function (v, i) {\n              entries[i].length = 2;\n            }\n          : function (v, i) {\n              entries[i] = v[1];\n            }\n      );\n    return isKeyedCollection\n      ? KeyedSeq(entries)\n      : isIndexed(collection)\n      ? IndexedSeq(entries)\n      : SetSeq(entries);\n  }\n\n  function maxFactory(collection, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = collection\n        .toSeq()\n        .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n        .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });\n      return entry && entry[0];\n    }\n    return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (\n      (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||\n      comp > 0\n    );\n  }\n\n  function zipWithFactory(keyIter, zipper, iters, zipAll) {\n    var zipSequence = makeSequence(keyIter);\n    var sizes = new ArraySeq(iters).map(function (i) { return i.size; });\n    zipSequence.size = zipAll ? sizes.max() : sizes.min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function (fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function (type, reverse) {\n      var iterators = iters.map(\n        function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function () {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function (i) { return i.next(); });\n          isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(\n            null,\n            steps.map(function (s) { return s.value; })\n          )\n        );\n      });\n    };\n    return zipSequence;\n  }\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function collectionClass(collection) {\n    return isKeyed(collection)\n      ? KeyedCollection\n      : isIndexed(collection)\n      ? IndexedCollection\n      : SetCollection;\n  }\n\n  function makeSequence(collection) {\n    return Object.create(\n      (isKeyed(collection)\n        ? KeyedSeq\n        : isIndexed(collection)\n        ? IndexedSeq\n        : SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    }\n    return Seq.prototype.cacheResult.call(this);\n  }\n\n  function defaultComparator(a, b) {\n    if (a === undefined && b === undefined) {\n      return 0;\n    }\n\n    if (a === undefined) {\n      return 1;\n    }\n\n    if (b === undefined) {\n      return -1;\n    }\n\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function invariant(condition, error) {\n    if (!condition) { throw new Error(error); }\n  }\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  function coerceKeyPath(keyPath) {\n    if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n      return keyPath;\n    }\n    if (isOrdered(keyPath)) {\n      return keyPath.toArray();\n    }\n    throw new TypeError(\n      'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n    );\n  }\n\n  var toString = Object.prototype.toString;\n\n  function isPlainObject(value) {\n    // The base prototype's toString deals with Argument objects and native namespaces like Math\n    if (\n      !value ||\n      typeof value !== 'object' ||\n      toString.call(value) !== '[object Object]'\n    ) {\n      return false;\n    }\n\n    var proto = Object.getPrototypeOf(value);\n    if (proto === null) {\n      return true;\n    }\n\n    // Iteratively going up the prototype chain is needed for cross-realm environments (differing contexts, iframes, etc)\n    var parentProto = proto;\n    var nextProto = Object.getPrototypeOf(proto);\n    while (nextProto !== null) {\n      parentProto = nextProto;\n      nextProto = Object.getPrototypeOf(parentProto);\n    }\n    return parentProto === proto;\n  }\n\n  /**\n   * Returns true if the value is a potentially-persistent data structure, either\n   * provided by Immutable.js or a plain Array or Object.\n   */\n  function isDataStructure(value) {\n    return (\n      typeof value === 'object' &&\n      (isImmutable(value) || Array.isArray(value) || isPlainObject(value))\n    );\n  }\n\n  function quoteString(value) {\n    try {\n      return typeof value === 'string' ? JSON.stringify(value) : String(value);\n    } catch (_ignoreError) {\n      return JSON.stringify(value);\n    }\n  }\n\n  function has(collection, key) {\n    return isImmutable(collection)\n      ? collection.has(key)\n      : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n  }\n\n  function get(collection, key, notSetValue) {\n    return isImmutable(collection)\n      ? collection.get(key, notSetValue)\n      : !has(collection, key)\n      ? notSetValue\n      : typeof collection.get === 'function'\n      ? collection.get(key)\n      : collection[key];\n  }\n\n  function shallowCopy(from) {\n    if (Array.isArray(from)) {\n      return arrCopy(from);\n    }\n    var to = {};\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n    return to;\n  }\n\n  function remove(collection, key) {\n    if (!isDataStructure(collection)) {\n      throw new TypeError(\n        'Cannot update non-data-structure value: ' + collection\n      );\n    }\n    if (isImmutable(collection)) {\n      if (!collection.remove) {\n        throw new TypeError(\n          'Cannot update immutable value without .remove() method: ' + collection\n        );\n      }\n      return collection.remove(key);\n    }\n    if (!hasOwnProperty.call(collection, key)) {\n      return collection;\n    }\n    var collectionCopy = shallowCopy(collection);\n    if (Array.isArray(collectionCopy)) {\n      collectionCopy.splice(key, 1);\n    } else {\n      delete collectionCopy[key];\n    }\n    return collectionCopy;\n  }\n\n  function set(collection, key, value) {\n    if (!isDataStructure(collection)) {\n      throw new TypeError(\n        'Cannot update non-data-structure value: ' + collection\n      );\n    }\n    if (isImmutable(collection)) {\n      if (!collection.set) {\n        throw new TypeError(\n          'Cannot update immutable value without .set() method: ' + collection\n        );\n      }\n      return collection.set(key, value);\n    }\n    if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n      return collection;\n    }\n    var collectionCopy = shallowCopy(collection);\n    collectionCopy[key] = value;\n    return collectionCopy;\n  }\n\n  function updateIn$1(collection, keyPath, notSetValue, updater) {\n    if (!updater) {\n      updater = notSetValue;\n      notSetValue = undefined;\n    }\n    var updatedValue = updateInDeeply(\n      isImmutable(collection),\n      collection,\n      coerceKeyPath(keyPath),\n      0,\n      notSetValue,\n      updater\n    );\n    return updatedValue === NOT_SET ? notSetValue : updatedValue;\n  }\n\n  function updateInDeeply(\n    inImmutable,\n    existing,\n    keyPath,\n    i,\n    notSetValue,\n    updater\n  ) {\n    var wasNotSet = existing === NOT_SET;\n    if (i === keyPath.length) {\n      var existingValue = wasNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    if (!wasNotSet && !isDataStructure(existing)) {\n      throw new TypeError(\n        'Cannot update within non-data-structure value in path [' +\n          keyPath.slice(0, i).map(quoteString) +\n          ']: ' +\n          existing\n      );\n    }\n    var key = keyPath[i];\n    var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n    var nextUpdated = updateInDeeply(\n      nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),\n      nextExisting,\n      keyPath,\n      i + 1,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting\n      ? existing\n      : nextUpdated === NOT_SET\n      ? remove(existing, key)\n      : set(\n          wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,\n          key,\n          nextUpdated\n        );\n  }\n\n  function setIn$1(collection, keyPath, value) {\n    return updateIn$1(collection, keyPath, NOT_SET, function () { return value; });\n  }\n\n  function setIn(keyPath, v) {\n    return setIn$1(this, keyPath, v);\n  }\n\n  function removeIn(collection, keyPath) {\n    return updateIn$1(collection, keyPath, function () { return NOT_SET; });\n  }\n\n  function deleteIn(keyPath) {\n    return removeIn(this, keyPath);\n  }\n\n  function update$1(collection, key, notSetValue, updater) {\n    return updateIn$1(collection, [key], notSetValue, updater);\n  }\n\n  function update(key, notSetValue, updater) {\n    return arguments.length === 1\n      ? key(this)\n      : update$1(this, key, notSetValue, updater);\n  }\n\n  function updateIn(keyPath, notSetValue, updater) {\n    return updateIn$1(this, keyPath, notSetValue, updater);\n  }\n\n  function merge$1() {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    return mergeIntoKeyedWith(this, iters);\n  }\n\n  function mergeWith$1(merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    if (typeof merger !== 'function') {\n      throw new TypeError('Invalid merger function: ' + merger);\n    }\n    return mergeIntoKeyedWith(this, iters, merger);\n  }\n\n  function mergeIntoKeyedWith(collection, collections, merger) {\n    var iters = [];\n    for (var ii = 0; ii < collections.length; ii++) {\n      var collection$1 = KeyedCollection(collections[ii]);\n      if (collection$1.size !== 0) {\n        iters.push(collection$1);\n      }\n    }\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (\n      collection.toSeq().size === 0 &&\n      !collection.__ownerID &&\n      iters.length === 1\n    ) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function (collection) {\n      var mergeIntoCollection = merger\n        ? function (value, key) {\n            update$1(collection, key, NOT_SET, function (oldVal) { return oldVal === NOT_SET ? value : merger(oldVal, value, key); }\n            );\n          }\n        : function (value, key) {\n            collection.set(key, value);\n          };\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoCollection);\n      }\n    });\n  }\n\n  function merge(collection) {\n    var sources = [], len = arguments.length - 1;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n    return mergeWithSources(collection, sources);\n  }\n\n  function mergeWith(merger, collection) {\n    var sources = [], len = arguments.length - 2;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n    return mergeWithSources(collection, sources, merger);\n  }\n\n  function mergeDeep$1(collection) {\n    var sources = [], len = arguments.length - 1;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n    return mergeDeepWithSources(collection, sources);\n  }\n\n  function mergeDeepWith$1(merger, collection) {\n    var sources = [], len = arguments.length - 2;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n    return mergeDeepWithSources(collection, sources, merger);\n  }\n\n  function mergeDeepWithSources(collection, sources, merger) {\n    return mergeWithSources(collection, sources, deepMergerWith(merger));\n  }\n\n  function mergeWithSources(collection, sources, merger) {\n    if (!isDataStructure(collection)) {\n      throw new TypeError(\n        'Cannot merge into non-data-structure value: ' + collection\n      );\n    }\n    if (isImmutable(collection)) {\n      return typeof merger === 'function' && collection.mergeWith\n        ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))\n        : collection.merge\n        ? collection.merge.apply(collection, sources)\n        : collection.concat.apply(collection, sources);\n    }\n    var isArray = Array.isArray(collection);\n    var merged = collection;\n    var Collection = isArray ? IndexedCollection : KeyedCollection;\n    var mergeItem = isArray\n      ? function (value) {\n          // Copy on write\n          if (merged === collection) {\n            merged = shallowCopy(merged);\n          }\n          merged.push(value);\n        }\n      : function (value, key) {\n          var hasVal = hasOwnProperty.call(merged, key);\n          var nextVal =\n            hasVal && merger ? merger(merged[key], value, key) : value;\n          if (!hasVal || nextVal !== merged[key]) {\n            // Copy on write\n            if (merged === collection) {\n              merged = shallowCopy(merged);\n            }\n            merged[key] = nextVal;\n          }\n        };\n    for (var i = 0; i < sources.length; i++) {\n      Collection(sources[i]).forEach(mergeItem);\n    }\n    return merged;\n  }\n\n  function deepMergerWith(merger) {\n    function deepMerger(oldValue, newValue, key) {\n      return isDataStructure(oldValue) &&\n        isDataStructure(newValue) &&\n        areMergeable(oldValue, newValue)\n        ? mergeWithSources(oldValue, [newValue], deepMerger)\n        : merger\n        ? merger(oldValue, newValue, key)\n        : newValue;\n    }\n    return deepMerger;\n  }\n\n  /**\n   * It's unclear what the desired behavior is for merging two collections that\n   * fall into separate categories between keyed, indexed, or set-like, so we only\n   * consider them mergeable if they fall into the same category.\n   */\n  function areMergeable(oldDataStructure, newDataStructure) {\n    var oldSeq = Seq(oldDataStructure);\n    var newSeq = Seq(newDataStructure);\n    // This logic assumes that a sequence can only fall into one of the three\n    // categories mentioned above (since there's no `isSetLike()` method).\n    return (\n      isIndexed(oldSeq) === isIndexed(newSeq) &&\n      isKeyed(oldSeq) === isKeyed(newSeq)\n    );\n  }\n\n  function mergeDeep() {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    return mergeDeepWithSources(this, iters);\n  }\n\n  function mergeDeepWith(merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeDeepWithSources(this, iters, merger);\n  }\n\n  function mergeIn(keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });\n  }\n\n  function mergeDeepIn(keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }\n    );\n  }\n\n  function withMutations(fn) {\n    var mutable = this.asMutable();\n    fn(mutable);\n    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n  }\n\n  function asMutable() {\n    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n  }\n\n  function asImmutable() {\n    return this.__ensureOwner();\n  }\n\n  function wasAltered() {\n    return this.__altered;\n  }\n\n  var Map = /*@__PURE__*/(function (KeyedCollection) {\n    function Map(value) {\n      return value === undefined || value === null\n        ? emptyMap()\n        : isMap(value) && !isOrdered(value)\n        ? value\n        : emptyMap().withMutations(function (map) {\n            var iter = KeyedCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v, k) { return map.set(k, v); });\n          });\n    }\n\n    if ( KeyedCollection ) Map.__proto__ = KeyedCollection;\n    Map.prototype = Object.create( KeyedCollection && KeyedCollection.prototype );\n    Map.prototype.constructor = Map;\n\n    Map.of = function of () {\n      var keyValues = [], len = arguments.length;\n      while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n      return emptyMap().withMutations(function (map) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function toString () {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function get (k, notSetValue) {\n      return this._root\n        ? this._root.get(0, undefined, k, notSetValue)\n        : notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function set (k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.remove = function remove (k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteAll = function deleteAll (keys) {\n      var collection = Collection(keys);\n\n      if (collection.size === 0) {\n        return this;\n      }\n\n      return this.withMutations(function (map) {\n        collection.forEach(function (key) { return map.remove(key); });\n      });\n    };\n\n    Map.prototype.clear = function clear () {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.sort = function sort (comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function sortBy (mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    Map.prototype.map = function map (mapper, context) {\n      var this$1$1 = this;\n\n      return this.withMutations(function (map) {\n        map.forEach(function (value, key) {\n          map.set(key, mapper.call(context, value, key, this$1$1));\n        });\n      });\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.__iterator = function __iterator (type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1$1 = this;\n\n      var iterations = 0;\n      this._root &&\n        this._root.iterate(function (entry) {\n          iterations++;\n          return fn(entry[1], entry[0], this$1$1);\n        }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        if (this.size === 0) {\n          return emptyMap();\n        }\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n    return Map;\n  }(KeyedCollection));\n\n  Map.isMap = isMap;\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SYMBOL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeAll = MapPrototype.deleteAll;\n  MapPrototype.setIn = setIn;\n  MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\n  MapPrototype.update = update;\n  MapPrototype.updateIn = updateIn;\n  MapPrototype.merge = MapPrototype.concat = merge$1;\n  MapPrototype.mergeWith = mergeWith$1;\n  MapPrototype.mergeDeep = mergeDeep;\n  MapPrototype.mergeDeepWith = mergeDeepWith;\n  MapPrototype.mergeIn = mergeIn;\n  MapPrototype.mergeDeepIn = mergeDeepIn;\n  MapPrototype.withMutations = withMutations;\n  MapPrototype.wasAltered = wasAltered;\n  MapPrototype.asImmutable = asImmutable;\n  MapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;\n  MapPrototype['@@transducer/step'] = function (result, arr) {\n    return result.set(arr[0], arr[1]);\n  };\n  MapPrototype['@@transducer/result'] = function (obj) {\n    return obj.asImmutable();\n  };\n\n  // #pragma Trie Nodes\n\n  var ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n    this.ownerID = ownerID;\n    this.entries = entries;\n  };\n\n  ArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    var entries = this.entries;\n    for (var ii = 0, len = entries.length; ii < len; ii++) {\n      if (is(key, entries[ii][0])) {\n        return entries[ii][1];\n      }\n    }\n    return notSetValue;\n  };\n\n  ArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    var removed = value === NOT_SET;\n\n    var entries = this.entries;\n    var idx = 0;\n    var len = entries.length;\n    for (; idx < len; idx++) {\n      if (is(key, entries[idx][0])) {\n        break;\n      }\n    }\n    var exists = idx < len;\n\n    if (exists ? entries[idx][1] === value : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n    (removed || !exists) && SetRef(didChangeSize);\n\n    if (removed && entries.length === 1) {\n      return; // undefined\n    }\n\n    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n      return createNodes(ownerID, entries, key, value);\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newEntries = isEditable ? entries : arrCopy(entries);\n\n    if (exists) {\n      if (removed) {\n        idx === len - 1\n          ? newEntries.pop()\n          : (newEntries[idx] = newEntries.pop());\n      } else {\n        newEntries[idx] = [key, value];\n      }\n    } else {\n      newEntries.push([key, value]);\n    }\n\n    if (isEditable) {\n      this.entries = newEntries;\n      return this;\n    }\n\n    return new ArrayMapNode(ownerID, newEntries);\n  };\n\n  var BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n    this.ownerID = ownerID;\n    this.bitmap = bitmap;\n    this.nodes = nodes;\n  };\n\n  BitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n    var bitmap = this.bitmap;\n    return (bitmap & bit) === 0\n      ? notSetValue\n      : this.nodes[popCount(bitmap & (bit - 1))].get(\n          shift + SHIFT,\n          keyHash,\n          key,\n          notSetValue\n        );\n  };\n\n  BitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var bit = 1 << keyHashFrag;\n    var bitmap = this.bitmap;\n    var exists = (bitmap & bit) !== 0;\n\n    if (!exists && value === NOT_SET) {\n      return this;\n    }\n\n    var idx = popCount(bitmap & (bit - 1));\n    var nodes = this.nodes;\n    var node = exists ? nodes[idx] : undefined;\n    var newNode = updateNode(\n      node,\n      ownerID,\n      shift + SHIFT,\n      keyHash,\n      key,\n      value,\n      didChangeSize,\n      didAlter\n    );\n\n    if (newNode === node) {\n      return this;\n    }\n\n    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n    }\n\n    if (\n      exists &&\n      !newNode &&\n      nodes.length === 2 &&\n      isLeafNode(nodes[idx ^ 1])\n    ) {\n      return nodes[idx ^ 1];\n    }\n\n    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n      return newNode;\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;\n    var newNodes = exists\n      ? newNode\n        ? setAt(nodes, idx, newNode, isEditable)\n        : spliceOut(nodes, idx, isEditable)\n      : spliceIn(nodes, idx, newNode, isEditable);\n\n    if (isEditable) {\n      this.bitmap = newBitmap;\n      this.nodes = newNodes;\n      return this;\n    }\n\n    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n  };\n\n  var HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n    this.ownerID = ownerID;\n    this.count = count;\n    this.nodes = nodes;\n  };\n\n  HashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var node = this.nodes[idx];\n    return node\n      ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n      : notSetValue;\n  };\n\n  HashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var removed = value === NOT_SET;\n    var nodes = this.nodes;\n    var node = nodes[idx];\n\n    if (removed && !node) {\n      return this;\n    }\n\n    var newNode = updateNode(\n      node,\n      ownerID,\n      shift + SHIFT,\n      keyHash,\n      key,\n      value,\n      didChangeSize,\n      didAlter\n    );\n    if (newNode === node) {\n      return this;\n    }\n\n    var newCount = this.count;\n    if (!node) {\n      newCount++;\n    } else if (!newNode) {\n      newCount--;\n      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n        return packNodes(ownerID, nodes, newCount, idx);\n      }\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newNodes = setAt(nodes, idx, newNode, isEditable);\n\n    if (isEditable) {\n      this.count = newCount;\n      this.nodes = newNodes;\n      return this;\n    }\n\n    return new HashArrayMapNode(ownerID, newCount, newNodes);\n  };\n\n  var HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n    this.ownerID = ownerID;\n    this.keyHash = keyHash;\n    this.entries = entries;\n  };\n\n  HashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    var entries = this.entries;\n    for (var ii = 0, len = entries.length; ii < len; ii++) {\n      if (is(key, entries[ii][0])) {\n        return entries[ii][1];\n      }\n    }\n    return notSetValue;\n  };\n\n  HashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n\n    var removed = value === NOT_SET;\n\n    if (keyHash !== this.keyHash) {\n      if (removed) {\n        return this;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n    }\n\n    var entries = this.entries;\n    var idx = 0;\n    var len = entries.length;\n    for (; idx < len; idx++) {\n      if (is(key, entries[idx][0])) {\n        break;\n      }\n    }\n    var exists = idx < len;\n\n    if (exists ? entries[idx][1] === value : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n    (removed || !exists) && SetRef(didChangeSize);\n\n    if (removed && len === 2) {\n      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newEntries = isEditable ? entries : arrCopy(entries);\n\n    if (exists) {\n      if (removed) {\n        idx === len - 1\n          ? newEntries.pop()\n          : (newEntries[idx] = newEntries.pop());\n      } else {\n        newEntries[idx] = [key, value];\n      }\n    } else {\n      newEntries.push([key, value]);\n    }\n\n    if (isEditable) {\n      this.entries = newEntries;\n      return this;\n    }\n\n    return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n  };\n\n  var ValueNode = function ValueNode(ownerID, keyHash, entry) {\n    this.ownerID = ownerID;\n    this.keyHash = keyHash;\n    this.entry = entry;\n  };\n\n  ValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n  };\n\n  ValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    var removed = value === NOT_SET;\n    var keyMatch = is(key, this.entry[0]);\n    if (keyMatch ? value === this.entry[1] : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n\n    if (removed) {\n      SetRef(didChangeSize);\n      return; // undefined\n    }\n\n    if (keyMatch) {\n      if (ownerID && ownerID === this.ownerID) {\n        this.entry[1] = value;\n        return this;\n      }\n      return new ValueNode(ownerID, this.keyHash, [key, value]);\n    }\n\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n  };\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate =\n    function (fn, reverse) {\n      var entries = this.entries;\n      for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n        if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n          return false;\n        }\n      }\n    };\n\n  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate =\n    function (fn, reverse) {\n      var nodes = this.nodes;\n      for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n        var node = nodes[reverse ? maxIndex - ii : ii];\n        if (node && node.iterate(fn, reverse) === false) {\n          return false;\n        }\n      }\n    };\n\n  // eslint-disable-next-line no-unused-vars\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  };\n\n  var MapIterator = /*@__PURE__*/(function (Iterator) {\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    if ( Iterator ) MapIterator.__proto__ = Iterator;\n    MapIterator.prototype = Object.create( Iterator && Iterator.prototype );\n    MapIterator.prototype.constructor = MapIterator;\n\n    MapIterator.prototype.next = function next () {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex = (void 0);\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(\n              type,\n              node.entries[this._reverse ? maxIndex - index : index]\n            );\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n    return MapIterator;\n  }(Iterator));\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev,\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef();\n      var didAlter = MakeRef();\n      newRoot = updateNode(\n        map._root,\n        map.__ownerID,\n        0,\n        undefined,\n        k,\n        v,\n        didChangeSize,\n        didAlter\n      );\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(\n    node,\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  ) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(\n      ownerID,\n      shift,\n      keyHash,\n      key,\n      value,\n      didChangeSize,\n      didAlter\n    );\n  }\n\n  function isLeafNode(node) {\n    return (\n      node.constructor === ValueNode || node.constructor === HashCollisionNode\n    );\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes =\n      idx1 === idx2\n        ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n        : ((newNode = new ValueNode(ownerID, keyHash, entry)),\n          idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function popCount(x) {\n    x -= (x >> 1) & 0x55555555;\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x += x >> 8;\n    x += x >> 16;\n    return x & 0x7f;\n  }\n\n  function setAt(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  var IS_LIST_SYMBOL = '@@__IMMUTABLE_LIST__@@';\n\n  function isList(maybeList) {\n    return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);\n  }\n\n  var List = /*@__PURE__*/(function (IndexedCollection) {\n    function List(value) {\n      var empty = emptyList();\n      if (value === undefined || value === null) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedCollection(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function (list) {\n        list.setSize(size);\n        iter.forEach(function (v, i) { return list.set(i, v); });\n      });\n    }\n\n    if ( IndexedCollection ) List.__proto__ = IndexedCollection;\n    List.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );\n    List.prototype.constructor = List;\n\n    List.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function toString () {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function get (index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function set (index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function remove (index) {\n      return !this.has(index)\n        ? this\n        : index === 0\n        ? this.shift()\n        : index === this.size - 1\n        ? this.pop()\n        : this.splice(index, 1);\n    };\n\n    List.prototype.insert = function insert (index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function clear () {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function push (/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function (list) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function pop () {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function unshift (/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function (list) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function shift () {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.concat = function concat (/*...collections*/) {\n      var arguments$1 = arguments;\n\n      var seqs = [];\n      for (var i = 0; i < arguments.length; i++) {\n        var argument = arguments$1[i];\n        var seq = IndexedCollection(\n          typeof argument !== 'string' && hasIterator(argument)\n            ? argument\n            : [argument]\n        );\n        if (seq.size !== 0) {\n          seqs.push(seq);\n        }\n      }\n      if (seqs.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n        return this.constructor(seqs[0]);\n      }\n      return this.withMutations(function (list) {\n        seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });\n      });\n    };\n\n    List.prototype.setSize = function setSize (size) {\n      return setListBounds(this, 0, size);\n    };\n\n    List.prototype.map = function map (mapper, context) {\n      var this$1$1 = this;\n\n      return this.withMutations(function (list) {\n        for (var i = 0; i < this$1$1.size; i++) {\n          list.set(i, mapper.call(context, list.get(i), i, this$1$1));\n        }\n      });\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function slice (begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function __iterator (type, reverse) {\n      var index = reverse ? this.size : 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function () {\n        var value = values();\n        return value === DONE\n          ? iteratorDone()\n          : iteratorValue(type, reverse ? --index : index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function __iterate (fn, reverse) {\n      var index = reverse ? this.size : 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, reverse ? --index : index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        if (this.size === 0) {\n          return emptyList();\n        }\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeList(\n        this._origin,\n        this._capacity,\n        this._level,\n        this._root,\n        this._tail,\n        ownerID,\n        this.__hash\n      );\n    };\n\n    return List;\n  }(IndexedCollection));\n\n  List.isList = isList;\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SYMBOL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.merge = ListPrototype.concat;\n  ListPrototype.setIn = setIn;\n  ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\n  ListPrototype.update = update;\n  ListPrototype.updateIn = updateIn;\n  ListPrototype.mergeIn = mergeIn;\n  ListPrototype.mergeDeepIn = mergeDeepIn;\n  ListPrototype.withMutations = withMutations;\n  ListPrototype.wasAltered = wasAltered;\n  ListPrototype.asImmutable = asImmutable;\n  ListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;\n  ListPrototype['@@transducer/step'] = function (result, arr) {\n    return result.push(arr);\n  };\n  ListPrototype['@@transducer/result'] = function (obj) {\n    return obj.asImmutable();\n  };\n\n  var VNode = function VNode(array, ownerID) {\n    this.array = array;\n    this.ownerID = ownerID;\n  };\n\n  // TODO: seems like these methods are very similar\n\n  VNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n    if (index === level ? 1 << level : this.array.length === 0) {\n      return this;\n    }\n    var originIndex = (index >>> level) & MASK;\n    if (originIndex >= this.array.length) {\n      return new VNode([], ownerID);\n    }\n    var removingFirst = originIndex === 0;\n    var newChild;\n    if (level > 0) {\n      var oldChild = this.array[originIndex];\n      newChild =\n        oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n      if (newChild === oldChild && removingFirst) {\n        return this;\n      }\n    }\n    if (removingFirst && !newChild) {\n      return this;\n    }\n    var editable = editableVNode(this, ownerID);\n    if (!removingFirst) {\n      for (var ii = 0; ii < originIndex; ii++) {\n        editable.array[ii] = undefined;\n      }\n    }\n    if (newChild) {\n      editable.array[originIndex] = newChild;\n    }\n    return editable;\n  };\n\n  VNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n    if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n      return this;\n    }\n    var sizeIndex = ((index - 1) >>> level) & MASK;\n    if (sizeIndex >= this.array.length) {\n      return this;\n    }\n\n    var newChild;\n    if (level > 0) {\n      var oldChild = this.array[sizeIndex];\n      newChild =\n        oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n      if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n        return this;\n      }\n    }\n\n    var editable = editableVNode(this, ownerID);\n    editable.array.splice(sizeIndex + 1);\n    if (newChild) {\n      editable.array[sizeIndex] = newChild;\n    }\n    return editable;\n  };\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0\n        ? iterateLeaf(node, offset)\n        : iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function () {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function () {\n        while (true) {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx],\n            level - SHIFT,\n            offset + (idx << level)\n          );\n        }\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function (list) {\n        index < 0\n          ? setListBounds(list, index).set(0, value)\n          : setListBounds(list, 0, index + 1).set(index, value);\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef();\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(\n        newRoot,\n        list.__ownerID,\n        list._level,\n        index,\n        value,\n        didAlter\n      );\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(\n        lowerNode,\n        ownerID,\n        level - SHIFT,\n        index,\n        value,\n        didAlter\n      );\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    if (didAlter) {\n      SetRef(didAlter);\n    }\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin |= 0;\n    }\n    if (end !== undefined) {\n      end |= 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity =\n      end === undefined\n        ? oldCapacity\n        : end < 0\n        ? oldCapacity + end\n        : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(\n        newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n        owner\n      );\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(\n        newRoot && newRoot.array.length ? [newRoot] : [],\n        owner\n      );\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail =\n      newTailOffset < oldTailOffset\n        ? listNodeFor(list, newCapacity - 1)\n        : newTailOffset > oldTailOffset\n        ? new VNode([], owner)\n        : oldTail;\n\n    // Merge Tail into tree.\n    if (\n      oldTail &&\n      newTailOffset > oldTailOffset &&\n      newOrigin < oldCapacity &&\n      oldTail.array.length\n    ) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n      // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(\n          owner,\n          newLevel,\n          newTailOffset - offsetShift\n        );\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;\n  }\n\n  var OrderedMap = /*@__PURE__*/(function (Map) {\n    function OrderedMap(value) {\n      return value === undefined || value === null\n        ? emptyOrderedMap()\n        : isOrderedMap(value)\n        ? value\n        : emptyOrderedMap().withMutations(function (map) {\n            var iter = KeyedCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v, k) { return map.set(k, v); });\n          });\n    }\n\n    if ( Map ) OrderedMap.__proto__ = Map;\n    OrderedMap.prototype = Object.create( Map && Map.prototype );\n    OrderedMap.prototype.constructor = OrderedMap;\n\n    OrderedMap.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function toString () {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function get (k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function clear () {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        this.__altered = true;\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function set (k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function remove (k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1$1 = this;\n\n      return this._list.__iterate(\n        function (entry) { return entry && fn(entry[1], entry[0], this$1$1); },\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        if (this.size === 0) {\n          return emptyOrderedMap();\n        }\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n    return OrderedMap;\n  }(Map));\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    omap.__altered = false;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return (\n      EMPTY_ORDERED_MAP ||\n      (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))\n    );\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) {\n      // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n        newMap = newList\n          .toKeyedSeq()\n          .map(function (entry) { return entry[0]; })\n          .flip()\n          .toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else if (has) {\n      if (v === list.get(i)[1]) {\n        return omap;\n      }\n      newMap = map;\n      newList = list.set(i, [k, v]);\n    } else {\n      newMap = map.set(k, list.size);\n      newList = list.set(list.size, [k, v]);\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      omap.__altered = true;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  var IS_STACK_SYMBOL = '@@__IMMUTABLE_STACK__@@';\n\n  function isStack(maybeStack) {\n    return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);\n  }\n\n  var Stack = /*@__PURE__*/(function (IndexedCollection) {\n    function Stack(value) {\n      return value === undefined || value === null\n        ? emptyStack()\n        : isStack(value)\n        ? value\n        : emptyStack().pushAll(value);\n    }\n\n    if ( IndexedCollection ) Stack.__proto__ = IndexedCollection;\n    Stack.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );\n    Stack.prototype.constructor = Stack;\n\n    Stack.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function toString () {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function get (index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function peek () {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function push (/*...values*/) {\n      var arguments$1 = arguments;\n\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments$1[ii],\n          next: head,\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function pushAll (iter) {\n      iter = IndexedCollection(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      if (this.size === 0 && isStack(iter)) {\n        return iter;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.__iterate(function (value) {\n        newSize++;\n        head = {\n          value: value,\n          next: head,\n        };\n      }, /* reverse */ true);\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function pop () {\n      return this.slice(1);\n    };\n\n    Stack.prototype.clear = function clear () {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function slice (begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        if (this.size === 0) {\n          return emptyStack();\n        }\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1$1 = this;\n\n      if (reverse) {\n        return new ArraySeq(this.toArray()).__iterate(\n          function (v, k) { return fn(v, k, this$1$1); },\n          reverse\n        );\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function __iterator (type, reverse) {\n      if (reverse) {\n        return new ArraySeq(this.toArray()).__iterator(type, reverse);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function () {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n    return Stack;\n  }(IndexedCollection));\n\n  Stack.isStack = isStack;\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SYMBOL] = true;\n  StackPrototype.shift = StackPrototype.pop;\n  StackPrototype.unshift = StackPrototype.push;\n  StackPrototype.unshiftAll = StackPrototype.pushAll;\n  StackPrototype.withMutations = withMutations;\n  StackPrototype.wasAltered = wasAltered;\n  StackPrototype.asImmutable = asImmutable;\n  StackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;\n  StackPrototype['@@transducer/step'] = function (result, arr) {\n    return result.unshift(arr);\n  };\n  StackPrototype['@@transducer/result'] = function (obj) {\n    return obj.asImmutable();\n  };\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  var IS_SET_SYMBOL = '@@__IMMUTABLE_SET__@@';\n\n  function isSet(maybeSet) {\n    return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);\n  }\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isCollection(b) ||\n      (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n      (a.__hash !== undefined &&\n        b.__hash !== undefined &&\n        a.__hash !== b.__hash) ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return (\n        b.every(function (v, k) {\n          var entry = entries.next().value;\n          return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n        }) && entries.next().done\n      );\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function (v, k) {\n      if (\n        notAssociative\n          ? !a.has(v)\n          : flipped\n          ? !is(v, a.get(k, NOT_SET))\n          : !is(a.get(k, NOT_SET), v)\n      ) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  function mixin(ctor, methods) {\n    var keyCopier = function (key) {\n      ctor.prototype[key] = methods[key];\n    };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  function toJS(value) {\n    if (!value || typeof value !== 'object') {\n      return value;\n    }\n    if (!isCollection(value)) {\n      if (!isDataStructure(value)) {\n        return value;\n      }\n      value = Seq(value);\n    }\n    if (isKeyed(value)) {\n      var result$1 = {};\n      value.__iterate(function (v, k) {\n        result$1[k] = toJS(v);\n      });\n      return result$1;\n    }\n    var result = [];\n    value.__iterate(function (v) {\n      result.push(toJS(v));\n    });\n    return result;\n  }\n\n  var Set = /*@__PURE__*/(function (SetCollection) {\n    function Set(value) {\n      return value === undefined || value === null\n        ? emptySet()\n        : isSet(value) && !isOrdered(value)\n        ? value\n        : emptySet().withMutations(function (set) {\n            var iter = SetCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v) { return set.add(v); });\n          });\n    }\n\n    if ( SetCollection ) Set.__proto__ = SetCollection;\n    Set.prototype = Object.create( SetCollection && SetCollection.prototype );\n    Set.prototype.constructor = Set;\n\n    Set.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function fromKeys (value) {\n      return this(KeyedCollection(value).keySeq());\n    };\n\n    Set.intersect = function intersect (sets) {\n      sets = Collection(sets).toArray();\n      return sets.length\n        ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n        : emptySet();\n    };\n\n    Set.union = function union (sets) {\n      sets = Collection(sets).toArray();\n      return sets.length\n        ? SetPrototype.union.apply(Set(sets.pop()), sets)\n        : emptySet();\n    };\n\n    Set.prototype.toString = function toString () {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function has (value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function add (value) {\n      return updateSet(this, this._map.set(value, value));\n    };\n\n    Set.prototype.remove = function remove (value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function clear () {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.map = function map (mapper, context) {\n      var this$1$1 = this;\n\n      // keep track if the set is altered by the map function\n      var didChanges = false;\n\n      var newMap = updateSet(\n        this,\n        this._map.mapEntries(function (ref) {\n          var v = ref[1];\n\n          var mapped = mapper.call(context, v, v, this$1$1);\n\n          if (mapped !== v) {\n            didChanges = true;\n          }\n\n          return [mapped, mapped];\n        }, context)\n      );\n\n      return didChanges ? newMap : this;\n    };\n\n    Set.prototype.union = function union () {\n      var iters = [], len = arguments.length;\n      while ( len-- ) iters[ len ] = arguments[ len ];\n\n      iters = iters.filter(function (x) { return x.size !== 0; });\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function (set) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          if (typeof iters[ii] === 'string') {\n            set.add(iters[ii]);\n          } else {\n            SetCollection(iters[ii]).forEach(function (value) { return set.add(value); });\n          }\n        }\n      });\n    };\n\n    Set.prototype.intersect = function intersect () {\n      var iters = [], len = arguments.length;\n      while ( len-- ) iters[ len ] = arguments[ len ];\n\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function (iter) { return SetCollection(iter); });\n      var toRemove = [];\n      this.forEach(function (value) {\n        if (!iters.every(function (iter) { return iter.includes(value); })) {\n          toRemove.push(value);\n        }\n      });\n      return this.withMutations(function (set) {\n        toRemove.forEach(function (value) {\n          set.remove(value);\n        });\n      });\n    };\n\n    Set.prototype.subtract = function subtract () {\n      var iters = [], len = arguments.length;\n      while ( len-- ) iters[ len ] = arguments[ len ];\n\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function (iter) { return SetCollection(iter); });\n      var toRemove = [];\n      this.forEach(function (value) {\n        if (iters.some(function (iter) { return iter.includes(value); })) {\n          toRemove.push(value);\n        }\n      });\n      return this.withMutations(function (set) {\n        toRemove.forEach(function (value) {\n          set.remove(value);\n        });\n      });\n    };\n\n    Set.prototype.sort = function sort (comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function sortBy (mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function wasAltered () {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1$1 = this;\n\n      return this._map.__iterate(function (k) { return fn(k, k, this$1$1); }, reverse);\n    };\n\n    Set.prototype.__iterator = function __iterator (type, reverse) {\n      return this._map.__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        if (this.size === 0) {\n          return this.__empty();\n        }\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n    return Set;\n  }(SetCollection));\n\n  Set.isSet = isSet;\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SYMBOL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.merge = SetPrototype.concat = SetPrototype.union;\n  SetPrototype.withMutations = withMutations;\n  SetPrototype.asImmutable = asImmutable;\n  SetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;\n  SetPrototype['@@transducer/step'] = function (result, arr) {\n    return result.add(arr);\n  };\n  SetPrototype['@@transducer/result'] = function (obj) {\n    return obj.asImmutable();\n  };\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map\n      ? set\n      : newMap.size === 0\n      ? set.__empty()\n      : set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  /**\n   * Returns a lazy seq of nums from start (inclusive) to end\n   * (exclusive), by step, where start defaults to 0, step to 1, and end to\n   * infinity. When start is equal to end, returns empty list.\n   */\n  var Range = /*@__PURE__*/(function (IndexedSeq) {\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    if ( IndexedSeq ) Range.__proto__ = IndexedSeq;\n    Range.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n    Range.prototype.constructor = Range;\n\n    Range.prototype.toString = function toString () {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return (\n        'Range [ ' +\n        this._start +\n        '...' +\n        this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n        ' ]'\n      );\n    };\n\n    Range.prototype.get = function get (index, notSetValue) {\n      return this.has(index)\n        ? this._start + wrapIndex(this, index) * this._step\n        : notSetValue;\n    };\n\n    Range.prototype.includes = function includes (searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return (\n        possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex)\n      );\n    };\n\n    Range.prototype.slice = function slice (begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(\n        this.get(begin, this._end),\n        this.get(end, this._end),\n        this._step\n      );\n    };\n\n    Range.prototype.indexOf = function indexOf (searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index;\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function __iterate (fn, reverse) {\n      var size = this.size;\n      var step = this._step;\n      var value = reverse ? this._start + (size - 1) * step : this._start;\n      var i = 0;\n      while (i !== size) {\n        if (fn(value, reverse ? size - ++i : i++, this) === false) {\n          break;\n        }\n        value += reverse ? -step : step;\n      }\n      return i;\n    };\n\n    Range.prototype.__iterator = function __iterator (type, reverse) {\n      var size = this.size;\n      var step = this._step;\n      var value = reverse ? this._start + (size - 1) * step : this._start;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var v = value;\n        value += reverse ? -step : step;\n        return iteratorValue(type, reverse ? size - ++i : i++, v);\n      });\n    };\n\n    Range.prototype.equals = function equals (other) {\n      return other instanceof Range\n        ? this._start === other._start &&\n            this._end === other._end &&\n            this._step === other._step\n        : deepEqual(this, other);\n    };\n\n    return Range;\n  }(IndexedSeq));\n\n  var EMPTY_RANGE;\n\n  function getIn$1(collection, searchKeyPath, notSetValue) {\n    var keyPath = coerceKeyPath(searchKeyPath);\n    var i = 0;\n    while (i !== keyPath.length) {\n      collection = get(collection, keyPath[i++], NOT_SET);\n      if (collection === NOT_SET) {\n        return notSetValue;\n      }\n    }\n    return collection;\n  }\n\n  function getIn(searchKeyPath, notSetValue) {\n    return getIn$1(this, searchKeyPath, notSetValue);\n  }\n\n  function hasIn$1(collection, keyPath) {\n    return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;\n  }\n\n  function hasIn(searchKeyPath) {\n    return hasIn$1(this, searchKeyPath);\n  }\n\n  function toObject() {\n    assertNotInfinite(this.size);\n    var object = {};\n    this.__iterate(function (v, k) {\n      object[k] = v;\n    });\n    return object;\n  }\n\n  // Note: all of these methods are deprecated.\n  Collection.isIterable = isCollection;\n  Collection.isKeyed = isKeyed;\n  Collection.isIndexed = isIndexed;\n  Collection.isAssociative = isAssociative;\n  Collection.isOrdered = isOrdered;\n\n  Collection.Iterator = Iterator;\n\n  mixin(Collection, {\n    // ### Conversion to other types\n\n    toArray: function toArray() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      var useTuples = isKeyed(this);\n      var i = 0;\n      this.__iterate(function (v, k) {\n        // Keyed collections produce an array of tuples.\n        array[i++] = useTuples ? [k, v] : v;\n      });\n      return array;\n    },\n\n    toIndexedSeq: function toIndexedSeq() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function toJS$1() {\n      return toJS(this);\n    },\n\n    toKeyedSeq: function toKeyedSeq() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function toMap() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: toObject,\n\n    toOrderedMap: function toOrderedMap() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function toOrderedSet() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function toSet() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function toSetSeq() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function toSeq() {\n      return isIndexed(this)\n        ? this.toIndexedSeq()\n        : isKeyed(this)\n        ? this.toKeyedSeq()\n        : this.toSetSeq();\n    },\n\n    toStack: function toStack() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function toList() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    // ### Common JavaScript methods and properties\n\n    toString: function toString() {\n      return '[Collection]';\n    },\n\n    __toString: function __toString(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return (\n        head +\n        ' ' +\n        this.toSeq().map(this.__toStringMapper).join(', ') +\n        ' ' +\n        tail\n      );\n    },\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function concat() {\n      var values = [], len = arguments.length;\n      while ( len-- ) values[ len ] = arguments[ len ];\n\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function includes(searchValue) {\n      return this.some(function (value) { return is(value, searchValue); });\n    },\n\n    entries: function entries() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function every(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function (v, k, c) {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function filter(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    partition: function partition(predicate, context) {\n      return partitionFactory(this, predicate, context);\n    },\n\n    find: function find(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function forEach(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function join(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function (v) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function keys() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function map(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function reduce$1(reducer, initialReduction, context) {\n      return reduce(\n        this,\n        reducer,\n        initialReduction,\n        context,\n        arguments.length < 2,\n        false\n      );\n    },\n\n    reduceRight: function reduceRight(reducer, initialReduction, context) {\n      return reduce(\n        this,\n        reducer,\n        initialReduction,\n        context,\n        arguments.length < 2,\n        true\n      );\n    },\n\n    reverse: function reverse() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function slice(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function some(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function sort(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function values() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n    // ### More sequential methods\n\n    butLast: function butLast() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function isEmpty() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n    },\n\n    count: function count(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function countBy(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function equals(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function entrySeq() {\n      var collection = this;\n      if (collection._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(collection._cache);\n      }\n      var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n      return entriesSequence;\n    },\n\n    filterNot: function filterNot(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function findEntry(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function (v, k, c) {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function findKey(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function findLast(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n      return this.toKeyedSeq()\n        .reverse()\n        .findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function findLastKey(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function first(notSetValue) {\n      return this.find(returnTrue, null, notSetValue);\n    },\n\n    flatMap: function flatMap(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function flatten(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function fromEntrySeq() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function get(searchKey, notSetValue) {\n      return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n    },\n\n    getIn: getIn,\n\n    groupBy: function groupBy(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function has(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: hasIn,\n\n    isSubset: function isSubset(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n      return this.every(function (value) { return iter.includes(value); });\n    },\n\n    isSuperset: function isSuperset(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function keyOf(searchValue) {\n      return this.findKey(function (value) { return is(value, searchValue); });\n    },\n\n    keySeq: function keySeq() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function last(notSetValue) {\n      return this.toSeq().reverse().first(notSetValue);\n    },\n\n    lastKeyOf: function lastKeyOf(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function max(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function maxBy(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function min(comparator) {\n      return maxFactory(\n        this,\n        comparator ? neg(comparator) : defaultNegComparator\n      );\n    },\n\n    minBy: function minBy(mapper, comparator) {\n      return maxFactory(\n        this,\n        comparator ? neg(comparator) : defaultNegComparator,\n        mapper\n      );\n    },\n\n    rest: function rest() {\n      return this.slice(1);\n    },\n\n    skip: function skip(amount) {\n      return amount === 0 ? this : this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function skipLast(amount) {\n      return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n    },\n\n    skipWhile: function skipWhile(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function skipUntil(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function sortBy(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function take(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function takeLast(amount) {\n      return this.slice(-Math.max(0, amount));\n    },\n\n    takeWhile: function takeWhile(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function takeUntil(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    update: function update(fn) {\n      return fn(this);\n    },\n\n    valueSeq: function valueSeq() {\n      return this.toIndexedSeq();\n    },\n\n    // ### Hashable Object\n\n    hashCode: function hashCode() {\n      return this.__hash || (this.__hash = hashCollection(this));\n    },\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  var CollectionPrototype = Collection.prototype;\n  CollectionPrototype[IS_COLLECTION_SYMBOL] = true;\n  CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\n  CollectionPrototype.toJSON = CollectionPrototype.toArray;\n  CollectionPrototype.__toStringMapper = quoteString;\n  CollectionPrototype.inspect = CollectionPrototype.toSource = function () {\n    return this.toString();\n  };\n  CollectionPrototype.chain = CollectionPrototype.flatMap;\n  CollectionPrototype.contains = CollectionPrototype.includes;\n\n  mixin(KeyedCollection, {\n    // ### More sequential methods\n\n    flip: function flip() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function mapEntries(mapper, context) {\n      var this$1$1 = this;\n\n      var iterations = 0;\n      return reify(\n        this,\n        this.toSeq()\n          .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1$1); })\n          .fromEntrySeq()\n      );\n    },\n\n    mapKeys: function mapKeys(mapper, context) {\n      var this$1$1 = this;\n\n      return reify(\n        this,\n        this.toSeq()\n          .flip()\n          .map(function (k, v) { return mapper.call(context, k, v, this$1$1); })\n          .flip()\n      );\n    },\n  });\n\n  var KeyedCollectionPrototype = KeyedCollection.prototype;\n  KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;\n  KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\n  KeyedCollectionPrototype.toJSON = toObject;\n  KeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\n  mixin(IndexedCollection, {\n    // ### Conversion to other types\n\n    toKeyedSeq: function toKeyedSeq() {\n      return new ToKeyedSequence(this, false);\n    },\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function filter(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function findIndex(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function indexOf(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function lastIndexOf(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function reverse() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function slice(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function splice(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum || 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1\n          ? spliced\n          : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n    // ### More collection methods\n\n    findLastIndex: function findLastIndex(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function first(notSetValue) {\n      return this.get(0, notSetValue);\n    },\n\n    flatten: function flatten(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function get(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index < 0 ||\n        this.size === Infinity ||\n        (this.size !== undefined && index > this.size)\n        ? notSetValue\n        : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n    },\n\n    has: function has(index) {\n      index = wrapIndex(this, index);\n      return (\n        index >= 0 &&\n        (this.size !== undefined\n          ? this.size === Infinity || index < this.size\n          : this.indexOf(index) !== -1)\n      );\n    },\n\n    interpose: function interpose(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function interleave(/*...collections*/) {\n      var collections = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * collections.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function keySeq() {\n      return Range(0, this.size);\n    },\n\n    last: function last(notSetValue) {\n      return this.get(-1, notSetValue);\n    },\n\n    skipWhile: function skipWhile(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function zip(/*, ...collections */) {\n      var collections = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, collections));\n    },\n\n    zipAll: function zipAll(/*, ...collections */) {\n      var collections = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n    },\n\n    zipWith: function zipWith(zipper /*, ...collections */) {\n      var collections = arrCopy(arguments);\n      collections[0] = this;\n      return reify(this, zipWithFactory(this, zipper, collections));\n    },\n  });\n\n  var IndexedCollectionPrototype = IndexedCollection.prototype;\n  IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;\n  IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;\n\n  mixin(SetCollection, {\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function get(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function includes(value) {\n      return this.has(value);\n    },\n\n    // ### More sequential methods\n\n    keySeq: function keySeq() {\n      return this.valueSeq();\n    },\n  });\n\n  var SetCollectionPrototype = SetCollection.prototype;\n  SetCollectionPrototype.has = CollectionPrototype.includes;\n  SetCollectionPrototype.contains = SetCollectionPrototype.includes;\n  SetCollectionPrototype.keys = SetCollectionPrototype.values;\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedCollectionPrototype);\n  mixin(IndexedSeq, IndexedCollectionPrototype);\n  mixin(SetSeq, SetCollectionPrototype);\n\n  // #pragma Helper functions\n\n  function reduce(collection, reducer, reduction, context, useFirst, reverse) {\n    assertNotInfinite(collection.size);\n    collection.__iterate(function (v, k, c) {\n      if (useFirst) {\n        useFirst = false;\n        reduction = v;\n      } else {\n        reduction = reducer.call(context, reduction, v, k, c);\n      }\n    }, reverse);\n    return reduction;\n  }\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function () {\n      return !predicate.apply(this, arguments);\n    };\n  }\n\n  function neg(predicate) {\n    return function () {\n      return -predicate.apply(this, arguments);\n    };\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashCollection(collection) {\n    if (collection.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(collection);\n    var keyed = isKeyed(collection);\n    var h = ordered ? 1 : 0;\n    var size = collection.__iterate(\n      keyed\n        ? ordered\n          ? function (v, k) {\n              h = (31 * h + hashMerge(hash(v), hash(k))) | 0;\n            }\n          : function (v, k) {\n              h = (h + hashMerge(hash(v), hash(k))) | 0;\n            }\n        : ordered\n        ? function (v) {\n            h = (31 * h + hash(v)) | 0;\n          }\n        : function (v) {\n            h = (h + hash(v)) | 0;\n          }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xcc9e2d51);\n    h = imul((h << 15) | (h >>> -15), 0x1b873593);\n    h = imul((h << 13) | (h >>> -13), 5);\n    h = ((h + 0xe6546b64) | 0) ^ size;\n    h = imul(h ^ (h >>> 16), 0x85ebca6b);\n    h = imul(h ^ (h >>> 13), 0xc2b2ae35);\n    h = smi(h ^ (h >>> 16));\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int\n  }\n\n  var OrderedSet = /*@__PURE__*/(function (Set) {\n    function OrderedSet(value) {\n      return value === undefined || value === null\n        ? emptyOrderedSet()\n        : isOrderedSet(value)\n        ? value\n        : emptyOrderedSet().withMutations(function (set) {\n            var iter = SetCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v) { return set.add(v); });\n          });\n    }\n\n    if ( Set ) OrderedSet.__proto__ = Set;\n    OrderedSet.prototype = Object.create( Set && Set.prototype );\n    OrderedSet.prototype.constructor = OrderedSet;\n\n    OrderedSet.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function fromKeys (value) {\n      return this(KeyedCollection(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function toString () {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n    return OrderedSet;\n  }(Set));\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\n  OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\n  OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\n  OrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return (\n      EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))\n    );\n  }\n\n  function throwOnInvalidDefaultValues(defaultValues) {\n    if (isRecord(defaultValues)) {\n      throw new Error(\n        'Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.'\n      );\n    }\n\n    if (isImmutable(defaultValues)) {\n      throw new Error(\n        'Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.'\n      );\n    }\n\n    if (defaultValues === null || typeof defaultValues !== 'object') {\n      throw new Error(\n        'Can not call `Record` with a non-object as default values. Use a plain javascript object instead.'\n      );\n    }\n  }\n\n  var Record = function Record(defaultValues, name) {\n    var hasInitialized;\n\n    throwOnInvalidDefaultValues(defaultValues);\n\n    var RecordType = function Record(values) {\n      var this$1$1 = this;\n\n      if (values instanceof RecordType) {\n        return values;\n      }\n      if (!(this instanceof RecordType)) {\n        return new RecordType(values);\n      }\n      if (!hasInitialized) {\n        hasInitialized = true;\n        var keys = Object.keys(defaultValues);\n        var indices = (RecordTypePrototype._indices = {});\n        // Deprecated: left to attempt not to break any external code which\n        // relies on a ._name property existing on record instances.\n        // Use Record.getDescriptiveName() instead\n        RecordTypePrototype._name = name;\n        RecordTypePrototype._keys = keys;\n        RecordTypePrototype._defaultValues = defaultValues;\n        for (var i = 0; i < keys.length; i++) {\n          var propName = keys[i];\n          indices[propName] = i;\n          if (RecordTypePrototype[propName]) {\n            /* eslint-disable no-console */\n            typeof console === 'object' &&\n              console.warn &&\n              console.warn(\n                'Cannot define ' +\n                  recordName(this) +\n                  ' with property \"' +\n                  propName +\n                  '\" since that property name is part of the Record API.'\n              );\n            /* eslint-enable no-console */\n          } else {\n            setProp(RecordTypePrototype, propName);\n          }\n        }\n      }\n      this.__ownerID = undefined;\n      this._values = List().withMutations(function (l) {\n        l.setSize(this$1$1._keys.length);\n        KeyedCollection(values).forEach(function (v, k) {\n          l.set(this$1$1._indices[k], v === this$1$1._defaultValues[k] ? undefined : v);\n        });\n      });\n      return this;\n    };\n\n    var RecordTypePrototype = (RecordType.prototype =\n      Object.create(RecordPrototype));\n    RecordTypePrototype.constructor = RecordType;\n\n    if (name) {\n      RecordType.displayName = name;\n    }\n\n    return RecordType;\n  };\n\n  Record.prototype.toString = function toString () {\n    var str = recordName(this) + ' { ';\n    var keys = this._keys;\n    var k;\n    for (var i = 0, l = keys.length; i !== l; i++) {\n      k = keys[i];\n      str += (i ? ', ' : '') + k + ': ' + quoteString(this.get(k));\n    }\n    return str + ' }';\n  };\n\n  Record.prototype.equals = function equals (other) {\n    return (\n      this === other ||\n      (isRecord(other) && recordSeq(this).equals(recordSeq(other)))\n    );\n  };\n\n  Record.prototype.hashCode = function hashCode () {\n    return recordSeq(this).hashCode();\n  };\n\n  // @pragma Access\n\n  Record.prototype.has = function has (k) {\n    return this._indices.hasOwnProperty(k);\n  };\n\n  Record.prototype.get = function get (k, notSetValue) {\n    if (!this.has(k)) {\n      return notSetValue;\n    }\n    var index = this._indices[k];\n    var value = this._values.get(index);\n    return value === undefined ? this._defaultValues[k] : value;\n  };\n\n  // @pragma Modification\n\n  Record.prototype.set = function set (k, v) {\n    if (this.has(k)) {\n      var newValues = this._values.set(\n        this._indices[k],\n        v === this._defaultValues[k] ? undefined : v\n      );\n      if (newValues !== this._values && !this.__ownerID) {\n        return makeRecord(this, newValues);\n      }\n    }\n    return this;\n  };\n\n  Record.prototype.remove = function remove (k) {\n    return this.set(k);\n  };\n\n  Record.prototype.clear = function clear () {\n    var newValues = this._values.clear().setSize(this._keys.length);\n\n    return this.__ownerID ? this : makeRecord(this, newValues);\n  };\n\n  Record.prototype.wasAltered = function wasAltered () {\n    return this._values.wasAltered();\n  };\n\n  Record.prototype.toSeq = function toSeq () {\n    return recordSeq(this);\n  };\n\n  Record.prototype.toJS = function toJS$1 () {\n    return toJS(this);\n  };\n\n  Record.prototype.entries = function entries () {\n    return this.__iterator(ITERATE_ENTRIES);\n  };\n\n  Record.prototype.__iterator = function __iterator (type, reverse) {\n    return recordSeq(this).__iterator(type, reverse);\n  };\n\n  Record.prototype.__iterate = function __iterate (fn, reverse) {\n    return recordSeq(this).__iterate(fn, reverse);\n  };\n\n  Record.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newValues = this._values.__ensureOwner(ownerID);\n    if (!ownerID) {\n      this.__ownerID = ownerID;\n      this._values = newValues;\n      return this;\n    }\n    return makeRecord(this, newValues, ownerID);\n  };\n\n  Record.isRecord = isRecord;\n  Record.getDescriptiveName = recordName;\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[IS_RECORD_SYMBOL] = true;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\n  RecordPrototype.getIn = getIn;\n  RecordPrototype.hasIn = CollectionPrototype.hasIn;\n  RecordPrototype.merge = merge$1;\n  RecordPrototype.mergeWith = mergeWith$1;\n  RecordPrototype.mergeIn = mergeIn;\n  RecordPrototype.mergeDeep = mergeDeep;\n  RecordPrototype.mergeDeepWith = mergeDeepWith;\n  RecordPrototype.mergeDeepIn = mergeDeepIn;\n  RecordPrototype.setIn = setIn;\n  RecordPrototype.update = update;\n  RecordPrototype.updateIn = updateIn;\n  RecordPrototype.withMutations = withMutations;\n  RecordPrototype.asMutable = asMutable;\n  RecordPrototype.asImmutable = asImmutable;\n  RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\n  RecordPrototype.toJSON = RecordPrototype.toObject =\n    CollectionPrototype.toObject;\n  RecordPrototype.inspect = RecordPrototype.toSource = function () {\n    return this.toString();\n  };\n\n  function makeRecord(likeRecord, values, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._values = values;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record.constructor.displayName || record.constructor.name || 'Record';\n  }\n\n  function recordSeq(record) {\n    return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n  }\n\n  function setProp(prototype, name) {\n    try {\n      Object.defineProperty(prototype, name, {\n        get: function () {\n          return this.get(name);\n        },\n        set: function (value) {\n          invariant(this.__ownerID, 'Cannot set on an immutable record.');\n          this.set(name, value);\n        },\n      });\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  /**\n   * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n   * undefined, returns an infinite sequence of `value`.\n   */\n  var Repeat = /*@__PURE__*/(function (IndexedSeq) {\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    if ( IndexedSeq ) Repeat.__proto__ = IndexedSeq;\n    Repeat.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n    Repeat.prototype.constructor = Repeat;\n\n    Repeat.prototype.toString = function toString () {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function get (index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function includes (searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function slice (begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size)\n        ? this\n        : new Repeat(\n            this._value,\n            resolveEnd(end, size) - resolveBegin(begin, size)\n          );\n    };\n\n    Repeat.prototype.reverse = function reverse () {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function indexOf (searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n      var size = this.size;\n      var i = 0;\n      while (i !== size) {\n        if (fn(this._value, reverse ? size - ++i : i++, this) === false) {\n          break;\n        }\n      }\n      return i;\n    };\n\n    Repeat.prototype.__iterator = function __iterator (type, reverse) {\n      var this$1$1 = this;\n\n      var size = this.size;\n      var i = 0;\n      return new Iterator(function () { return i === size\n          ? iteratorDone()\n          : iteratorValue(type, reverse ? size - ++i : i++, this$1$1._value); }\n      );\n    };\n\n    Repeat.prototype.equals = function equals (other) {\n      return other instanceof Repeat\n        ? is(this._value, other._value)\n        : deepEqual(other);\n    };\n\n    return Repeat;\n  }(IndexedSeq));\n\n  var EMPTY_REPEAT;\n\n  function fromJS(value, converter) {\n    return fromJSWith(\n      [],\n      converter || defaultConverter,\n      value,\n      '',\n      converter && converter.length > 2 ? [] : undefined,\n      { '': value }\n    );\n  }\n\n  function fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n    if (\n      typeof value !== 'string' &&\n      !isImmutable(value) &&\n      (isArrayLike(value) || hasIterator(value) || isPlainObject(value))\n    ) {\n      if (~stack.indexOf(value)) {\n        throw new TypeError('Cannot convert circular structure to Immutable');\n      }\n      stack.push(value);\n      keyPath && key !== '' && keyPath.push(key);\n      var converted = converter.call(\n        parentValue,\n        key,\n        Seq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }\n        ),\n        keyPath && keyPath.slice()\n      );\n      stack.pop();\n      keyPath && keyPath.pop();\n      return converted;\n    }\n    return value;\n  }\n\n  function defaultConverter(k, v) {\n    // Effectively the opposite of \"Collection.toSeq()\"\n    return isIndexed(v) ? v.toList() : isKeyed(v) ? v.toMap() : v.toSet();\n  }\n\n  var version = \"4.2.4\";\n\n  var Immutable = {\n    version: version,\n\n    Collection: Collection,\n    // Note: Iterable is deprecated\n    Iterable: Collection,\n\n    Seq: Seq,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS,\n    hash: hash,\n\n    isImmutable: isImmutable,\n    isCollection: isCollection,\n    isKeyed: isKeyed,\n    isIndexed: isIndexed,\n    isAssociative: isAssociative,\n    isOrdered: isOrdered,\n    isValueObject: isValueObject,\n    isPlainObject: isPlainObject,\n    isSeq: isSeq,\n    isList: isList,\n    isMap: isMap,\n    isOrderedMap: isOrderedMap,\n    isStack: isStack,\n    isSet: isSet,\n    isOrderedSet: isOrderedSet,\n    isRecord: isRecord,\n\n    get: get,\n    getIn: getIn$1,\n    has: has,\n    hasIn: hasIn$1,\n    merge: merge,\n    mergeDeep: mergeDeep$1,\n    mergeWith: mergeWith,\n    mergeDeepWith: mergeDeepWith$1,\n    remove: remove,\n    removeIn: removeIn,\n    set: set,\n    setIn: setIn$1,\n    update: update$1,\n    updateIn: updateIn$1,\n  };\n\n  // Note: Iterable is deprecated\n  var Iterable = Collection;\n\n  exports.Collection = Collection;\n  exports.Iterable = Iterable;\n  exports.List = List;\n  exports.Map = Map;\n  exports.OrderedMap = OrderedMap;\n  exports.OrderedSet = OrderedSet;\n  exports.Range = Range;\n  exports.Record = Record;\n  exports.Repeat = Repeat;\n  exports.Seq = Seq;\n  exports.Set = Set;\n  exports.Stack = Stack;\n  exports.default = Immutable;\n  exports.fromJS = fromJS;\n  exports.get = get;\n  exports.getIn = getIn$1;\n  exports.has = has;\n  exports.hasIn = hasIn$1;\n  exports.hash = hash;\n  exports.is = is;\n  exports.isAssociative = isAssociative;\n  exports.isCollection = isCollection;\n  exports.isImmutable = isImmutable;\n  exports.isIndexed = isIndexed;\n  exports.isKeyed = isKeyed;\n  exports.isList = isList;\n  exports.isMap = isMap;\n  exports.isOrdered = isOrdered;\n  exports.isOrderedMap = isOrderedMap;\n  exports.isOrderedSet = isOrderedSet;\n  exports.isPlainObject = isPlainObject;\n  exports.isRecord = isRecord;\n  exports.isSeq = isSeq;\n  exports.isSet = isSet;\n  exports.isStack = isStack;\n  exports.isValueObject = isValueObject;\n  exports.merge = merge;\n  exports.mergeDeep = mergeDeep$1;\n  exports.mergeDeepWith = mergeDeepWith$1;\n  exports.mergeWith = mergeWith;\n  exports.remove = remove;\n  exports.removeIn = removeIn;\n  exports.set = set;\n  exports.setIn = setIn$1;\n  exports.update = update$1;\n  exports.updateIn = updateIn$1;\n  exports.version = version;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"}},"immutable.js.flow":{"file":{"contents":"/**\n * This file provides type definitions for use with the Flow type checker.\n *\n * An important caveat when using these definitions is that the types for\n * `Collection.Keyed`, `Collection.Indexed`, `Seq.Keyed`, and so on are stubs.\n * When referring to those types, you can get the proper definitions by\n * importing the types `KeyedCollection`, `IndexedCollection`, `KeyedSeq`, etc.\n * For example,\n *\n *     import { Seq } from 'immutable'\n *     import type { IndexedCollection, IndexedSeq } from 'immutable'\n *\n *     const someSeq: IndexedSeq<number> = Seq.Indexed.of(1, 2, 3)\n *\n *     function takesASeq<T, TS: IndexedCollection<T>>(iter: TS): TS {\n *       return iter.butLast()\n *     }\n *\n *     takesASeq(someSeq)\n *\n * @flow strict\n */\n\n// Helper type that represents plain objects allowed as arguments to\n// some constructors and functions.\ntype PlainObjInput<K, V> = { +[key: K]: V, __proto__: null };\n\ntype K<T> = $Keys<T>;\n\n// Helper types to extract the \"keys\" and \"values\" use by the *In() methods.\ntype $KeyOf<C> = $Call<\n  (<K>(?_Collection<K, mixed>) => K) &\n    (<T>(?$ReadOnlyArray<T>) => number) &\n    (<T>(?RecordInstance<T> | T) => $Keys<T>) &\n    (<T: Object>(T) => $Keys<T>),\n  C\n>;\n\ntype $ValOf<C, K = $KeyOf<C>> = $Call<\n  (<V>(?_Collection<any, V>) => V) &\n    (<T>(?$ReadOnlyArray<T>) => T) &\n    (<T, K: $Keys<T>>(?RecordInstance<T> | T, K) => $ElementType<T, K>) &\n    (<T: Object>(T) => $Values<T>),\n  C,\n  K\n>;\n\ntype $IterableOf<C> = $Call<\n  (<V: Array<any> | IndexedCollection<any> | SetCollection<any>>(\n    V\n  ) => Iterable<$ValOf<V>>) &\n    (<\n      V:\n        | KeyedCollection<any, any>\n        | RecordInstance<any>\n        | PlainObjInput<any, any>\n    >(\n      V\n    ) => Iterable<[$KeyOf<V>, $ValOf<V>]>),\n  C\n>;\n\ndeclare class _Collection<K, +V> implements ValueObject {\n  equals(other: mixed): boolean;\n  hashCode(): number;\n  get(key: K, ..._: []): V | void;\n  get<NSV>(key: K, notSetValue: NSV): V | NSV;\n  has(key: K): boolean;\n  includes(value: V): boolean;\n  contains(value: V): boolean;\n  first<NSV>(notSetValue?: NSV): V | NSV;\n  last<NSV>(notSetValue?: NSV): V | NSV;\n\n  hasIn(keyPath: Iterable<mixed>): boolean;\n\n  getIn(keyPath: [], notSetValue?: mixed): this;\n  getIn<NSV>(keyPath: [K], notSetValue: NSV): V | NSV;\n  getIn<NSV, K2: $KeyOf<V>>(\n    keyPath: [K, K2],\n    notSetValue: NSV\n  ): $ValOf<V, K2> | NSV;\n  getIn<NSV, K2: $KeyOf<V>, K3: $KeyOf<$ValOf<V, K2>>>(\n    keyPath: [K, K2, K3],\n    notSetValue: NSV\n  ): $ValOf<$ValOf<V, K2>, K3> | NSV;\n  getIn<\n    NSV,\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>\n  >(\n    keyPath: [K, K2, K3, K4],\n    notSetValue: NSV\n  ): $ValOf<$ValOf<$ValOf<V, K2>, K3>, K4> | NSV;\n  getIn<\n    NSV,\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>>\n  >(\n    keyPath: [K, K2, K3, K4, K5],\n    notSetValue: NSV\n  ): $ValOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>, K5> | NSV;\n\n  update<U>(updater: (value: this) => U): U;\n\n  toJS(): Array<any> | { [key: string]: mixed };\n  toJSON(): Array<V> | { [key: string]: V };\n  toArray(): Array<V> | Array<[K, V]>;\n  toObject(): { [key: string]: V };\n  toMap(): Map<K, V>;\n  toOrderedMap(): OrderedMap<K, V>;\n  toSet(): Set<V>;\n  toOrderedSet(): OrderedSet<V>;\n  toList(): List<V>;\n  toStack(): Stack<V>;\n  toSeq(): Seq<K, V>;\n  toKeyedSeq(): KeyedSeq<K, V>;\n  toIndexedSeq(): IndexedSeq<V>;\n  toSetSeq(): SetSeq<V>;\n\n  keys(): Iterator<K>;\n  values(): Iterator<V>;\n  entries(): Iterator<[K, V]>;\n\n  keySeq(): IndexedSeq<K>;\n  valueSeq(): IndexedSeq<V>;\n  entrySeq(): IndexedSeq<[K, V]>;\n\n  reverse(): this;\n  sort(comparator?: (valueA: V, valueB: V) => number): this;\n\n  sortBy<C>(\n    comparatorValueMapper: (value: V, key: K, iter: this) => C,\n    comparator?: (valueA: C, valueB: C) => number\n  ): this;\n\n  groupBy<G>(\n    grouper: (value: V, key: K, iter: this) => G,\n    context?: mixed\n  ): KeyedSeq<G, this>;\n\n  forEach(\n    sideEffect: (value: V, key: K, iter: this) => any,\n    context?: mixed\n  ): number;\n\n  slice(begin?: number, end?: number): this;\n  rest(): this;\n  butLast(): this;\n  skip(amount: number): this;\n  skipLast(amount: number): this;\n  skipWhile(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): this;\n  skipUntil(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): this;\n  take(amount: number): this;\n  takeLast(amount: number): this;\n  takeWhile(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): this;\n  takeUntil(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): this;\n\n  filterNot(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): this;\n\n  reduce<R>(\n    reducer: (reduction: R, value: V, key: K, iter: this) => R,\n    initialReduction: R,\n    context?: mixed\n  ): R;\n  reduce<R>(reducer: (reduction: V | R, value: V, key: K, iter: this) => R): R;\n\n  reduceRight<R>(\n    reducer: (reduction: R, value: V, key: K, iter: this) => R,\n    initialReduction: R,\n    context?: mixed\n  ): R;\n  reduceRight<R>(\n    reducer: (reduction: V | R, value: V, key: K, iter: this) => R\n  ): R;\n\n  every(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): boolean;\n  some(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): boolean;\n  join(separator?: string): string;\n  isEmpty(): boolean;\n  count(\n    predicate?: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): number;\n  countBy<G>(\n    grouper: (value: V, key: K, iter: this) => G,\n    context?: mixed\n  ): Map<G, number>;\n\n  find<NSV>(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed,\n    notSetValue?: NSV\n  ): V | NSV;\n  findLast<NSV>(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed,\n    notSetValue?: NSV\n  ): V | NSV;\n\n  findEntry(predicate: (value: V, key: K, iter: this) => mixed): [K, V] | void;\n  findLastEntry(\n    predicate: (value: V, key: K, iter: this) => mixed\n  ): [K, V] | void;\n\n  findKey(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): K | void;\n  findLastKey(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): K | void;\n\n  keyOf(searchValue: V): K | void;\n  lastKeyOf(searchValue: V): K | void;\n\n  max(comparator?: (valueA: V, valueB: V) => number): V;\n  maxBy<C>(\n    comparatorValueMapper: (value: V, key: K, iter: this) => C,\n    comparator?: (valueA: C, valueB: C) => number\n  ): V;\n  min(comparator?: (valueA: V, valueB: V) => number): V;\n  minBy<C>(\n    comparatorValueMapper: (value: V, key: K, iter: this) => C,\n    comparator?: (valueA: C, valueB: C) => number\n  ): V;\n\n  isSubset(iter: Iterable<V>): boolean;\n  isSuperset(iter: Iterable<V>): boolean;\n}\n\ndeclare function isImmutable(\n  maybeImmutable: mixed\n): boolean %checks(maybeImmutable instanceof Collection);\ndeclare function isCollection(\n  maybeCollection: mixed\n): boolean %checks(maybeCollection instanceof Collection);\ndeclare function isKeyed(\n  maybeKeyed: mixed\n): boolean %checks(maybeKeyed instanceof KeyedCollection);\ndeclare function isIndexed(\n  maybeIndexed: mixed\n): boolean %checks(maybeIndexed instanceof IndexedCollection);\ndeclare function isAssociative(\n  maybeAssociative: mixed\n): boolean %checks(maybeAssociative instanceof KeyedCollection ||\n  maybeAssociative instanceof IndexedCollection);\ndeclare function isOrdered(\n  maybeOrdered: mixed\n): boolean %checks(maybeOrdered instanceof IndexedCollection ||\n  maybeOrdered instanceof OrderedMap ||\n  maybeOrdered instanceof OrderedSet);\ndeclare function isValueObject(maybeValue: mixed): boolean;\n\ndeclare function isSeq(maybeSeq: any): boolean %checks(maybeSeq instanceof Seq);\ndeclare function isList(maybeList: any): boolean %checks(maybeList instanceof\n  List);\ndeclare function isMap(maybeMap: any): boolean %checks(maybeMap instanceof Map);\ndeclare function isOrderedMap(\n  maybeOrderedMap: any\n): boolean %checks(maybeOrderedMap instanceof OrderedMap);\ndeclare function isStack(maybeStack: any): boolean %checks(maybeStack instanceof\n  Stack);\ndeclare function isSet(maybeSet: any): boolean %checks(maybeSet instanceof Set);\ndeclare function isOrderedSet(\n  maybeOrderedSet: any\n): boolean %checks(maybeOrderedSet instanceof OrderedSet);\ndeclare function isRecord(\n  maybeRecord: any\n): boolean %checks(maybeRecord instanceof Record);\n\ndeclare interface ValueObject {\n  equals(other: mixed): boolean;\n  hashCode(): number;\n}\n\ndeclare class Collection<K, +V> extends _Collection<K, V> {\n  static Keyed: typeof KeyedCollection;\n  static Indexed: typeof IndexedCollection;\n  static Set: typeof SetCollection;\n\n  static isCollection: typeof isCollection;\n  static isKeyed: typeof isKeyed;\n  static isIndexed: typeof isIndexed;\n  static isAssociative: typeof isAssociative;\n  static isOrdered: typeof isOrdered;\n}\n\ndeclare class KeyedCollection<K, +V> extends Collection<K, V> {\n  static <K, V>(\n    values?: Iterable<[K, V]> | PlainObjInput<K, V>\n  ): KeyedCollection<K, V>;\n\n  toJS(): { [key: string]: mixed };\n  toJSON(): { [key: string]: V };\n  toArray(): Array<[K, V]>;\n  @@iterator(): Iterator<[K, V]>;\n  toSeq(): KeyedSeq<K, V>;\n  flip(): KeyedCollection<V, K>;\n\n  concat<KC, VC>(\n    ...iters: Array<Iterable<[KC, VC]> | PlainObjInput<KC, VC>>\n  ): KeyedCollection<K | KC, V | VC>;\n\n  filter(predicate: typeof Boolean): KeyedCollection<K, $NonMaybeType<V>>;\n  filter(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): KeyedCollection<K, V>;\n\n  partition(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: V, key: K, iter: this) => M,\n    context?: mixed\n  ): KeyedCollection<K, M>;\n\n  mapKeys<M>(\n    mapper: (key: K, value: V, iter: this) => M,\n    context?: mixed\n  ): KeyedCollection<M, V>;\n\n  mapEntries<KM, VM>(\n    mapper: (entry: [K, V], index: number, iter: this) => [KM, VM],\n    context?: mixed\n  ): KeyedCollection<KM, VM>;\n\n  flatMap<KM, VM>(\n    mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n    context?: mixed\n  ): KeyedCollection<KM, VM>;\n\n  flatten(depth?: number): KeyedCollection<any, any>;\n  flatten(shallow?: boolean): KeyedCollection<any, any>;\n}\n\nCollection.Keyed = KeyedCollection;\n\ndeclare class IndexedCollection<+T> extends Collection<number, T> {\n  static <T>(iter?: Iterable<T>): IndexedCollection<T>;\n\n  toJS(): Array<mixed>;\n  toJSON(): Array<T>;\n  toArray(): Array<T>;\n  @@iterator(): Iterator<T>;\n  toSeq(): IndexedSeq<T>;\n  fromEntrySeq<K, V>(): KeyedSeq<K, V>;\n  interpose(separator: T): this;\n  interleave(...collections: Iterable<T>[]): this;\n  splice(index: number, removeNum: number, ...values: T[]): this;\n\n  zip<A>(a: Iterable<A>, ..._: []): IndexedCollection<[T, A]>;\n  zip<A, B>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): IndexedCollection<[T, A, B]>;\n  zip<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): IndexedCollection<[T, A, B, C]>;\n  zip<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): IndexedCollection<[T, A, B, C, D]>;\n  zip<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): IndexedCollection<[T, A, B, C, D, E]>;\n\n  zipAll<A>(a: Iterable<A>, ..._: []): IndexedCollection<[T | void, A | void]>;\n  zipAll<A, B>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): IndexedCollection<[T | void, A | void, B | void]>;\n  zipAll<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): IndexedCollection<[T | void, A | void, B | void, C | void]>;\n  zipAll<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): IndexedCollection<[T | void, A | void, B | void, C | void, D | void]>;\n  zipAll<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): IndexedCollection<\n    [T | void, A | void, B | void, C | void, D | void, E | void]\n  >;\n\n  zipWith<A, R>(\n    zipper: (value: T, a: A) => R,\n    a: Iterable<A>,\n    ..._: []\n  ): IndexedCollection<R>;\n  zipWith<A, B, R>(\n    zipper: (value: T, a: A, b: B) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): IndexedCollection<R>;\n  zipWith<A, B, C, R>(\n    zipper: (value: T, a: A, b: B, c: C) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): IndexedCollection<R>;\n  zipWith<A, B, C, D, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): IndexedCollection<R>;\n  zipWith<A, B, C, D, E, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D, e: E) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): IndexedCollection<R>;\n\n  indexOf(searchValue: T): number;\n  lastIndexOf(searchValue: T): number;\n  findIndex(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): number;\n  findLastIndex(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): number;\n\n  concat<C>(...iters: Array<Iterable<C> | C>): IndexedCollection<T | C>;\n\n  filter(predicate: typeof Boolean): IndexedCollection<$NonMaybeType<T>>;\n  filter(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): IndexedCollection<T>;\n\n  partition(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: T, index: number, iter: this) => M,\n    context?: mixed\n  ): IndexedCollection<M>;\n\n  flatMap<M>(\n    mapper: (value: T, index: number, iter: this) => Iterable<M>,\n    context?: mixed\n  ): IndexedCollection<M>;\n\n  flatten(depth?: number): IndexedCollection<any>;\n  flatten(shallow?: boolean): IndexedCollection<any>;\n}\n\ndeclare class SetCollection<+T> extends Collection<T, T> {\n  static <T>(iter?: Iterable<T>): SetCollection<T>;\n\n  toJS(): Array<mixed>;\n  toJSON(): Array<T>;\n  toArray(): Array<T>;\n  @@iterator(): Iterator<T>;\n  toSeq(): SetSeq<T>;\n\n  concat<U>(...collections: Iterable<U>[]): SetCollection<T | U>;\n\n  // `filter`, `map` and `flatMap` cannot be defined further up the hierarchy,\n  // because the implementation for `KeyedCollection` allows the value type to\n  // change without constraining the key type. That does not work for\n  // `SetCollection` - the value and key types *must* match.\n  filter(predicate: typeof Boolean): SetCollection<$NonMaybeType<T>>;\n  filter(\n    predicate: (value: T, value: T, iter: this) => mixed,\n    context?: mixed\n  ): SetCollection<T>;\n\n  partition(\n    predicate: (value: T, value: T, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: T, value: T, iter: this) => M,\n    context?: mixed\n  ): SetCollection<M>;\n\n  flatMap<M>(\n    mapper: (value: T, value: T, iter: this) => Iterable<M>,\n    context?: mixed\n  ): SetCollection<M>;\n\n  flatten(depth?: number): SetCollection<any>;\n  flatten(shallow?: boolean): SetCollection<any>;\n}\n\ndeclare function isSeq(maybeSeq: mixed): boolean %checks(maybeSeq instanceof\n  Seq);\ndeclare class Seq<K, +V> extends _Collection<K, V> {\n  static Keyed: typeof KeyedSeq;\n  static Indexed: typeof IndexedSeq;\n  static Set: typeof SetSeq;\n\n  static <K, V>(values: KeyedSeq<K, V>): KeyedSeq<K, V>;\n  static <T>(values: SetSeq<T>): SetSeq<K, V>;\n  static <T>(values: Iterable<T>): IndexedSeq<T>;\n  static <K, V>(values?: PlainObjInput<K, V>): KeyedSeq<K, V>;\n\n  static isSeq: typeof isSeq;\n\n  size: number | void;\n  cacheResult(): this;\n  toSeq(): this;\n}\n\ndeclare class KeyedSeq<K, +V> extends Seq<K, V> mixins KeyedCollection<K, V> {\n  static <K, V>(\n    values?: Iterable<[K, V]> | PlainObjInput<K, V>\n  ): KeyedSeq<K, V>;\n\n  // Override specialized return types\n  flip(): KeyedSeq<V, K>;\n\n  concat<KC, VC>(\n    ...iters: Array<Iterable<[KC, VC]> | PlainObjInput<KC, VC>>\n  ): KeyedSeq<K | KC, V | VC>;\n\n  filter(predicate: typeof Boolean): KeyedSeq<K, $NonMaybeType<V>>;\n  filter(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): KeyedSeq<K, V>;\n\n  partition(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: V, key: K, iter: this) => M,\n    context?: mixed\n  ): KeyedSeq<K, M>;\n\n  mapKeys<M>(\n    mapper: (key: K, value: V, iter: this) => M,\n    context?: mixed\n  ): KeyedSeq<M, V>;\n\n  mapEntries<KM, VM>(\n    mapper: (entry: [K, V], index: number, iter: this) => [KM, VM],\n    context?: mixed\n  ): KeyedSeq<KM, VM>;\n\n  flatMap<KM, VM>(\n    mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n    context?: mixed\n  ): KeyedSeq<KM, VM>;\n\n  flatten(depth?: number): KeyedSeq<any, any>;\n  flatten(shallow?: boolean): KeyedSeq<any, any>;\n}\n\ndeclare class IndexedSeq<+T>\n  extends Seq<number, T>\n  mixins IndexedCollection<T>\n{\n  static <T>(values?: Iterable<T>): IndexedSeq<T>;\n\n  static of<T>(...values: T[]): IndexedSeq<T>;\n\n  // Override specialized return types\n\n  concat<C>(...iters: Array<Iterable<C> | C>): IndexedSeq<T | C>;\n\n  filter(predicate: typeof Boolean): IndexedSeq<$NonMaybeType<T>>;\n  filter(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): IndexedSeq<T>;\n\n  partition(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: T, index: number, iter: this) => M,\n    context?: mixed\n  ): IndexedSeq<M>;\n\n  flatMap<M>(\n    mapper: (value: T, index: number, iter: this) => Iterable<M>,\n    context?: mixed\n  ): IndexedSeq<M>;\n\n  flatten(depth?: number): IndexedSeq<any>;\n  flatten(shallow?: boolean): IndexedSeq<any>;\n\n  zip<A>(a: Iterable<A>, ..._: []): IndexedSeq<[T, A]>;\n  zip<A, B>(a: Iterable<A>, b: Iterable<B>, ..._: []): IndexedSeq<[T, A, B]>;\n  zip<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): IndexedSeq<[T, A, B, C]>;\n  zip<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): IndexedSeq<[T, A, B, C, D]>;\n  zip<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): IndexedSeq<[T, A, B, C, D, E]>;\n\n  zipAll<A>(a: Iterable<A>, ..._: []): IndexedSeq<[T | void, A | void]>;\n  zipAll<A, B>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): IndexedSeq<[T | void, A | void, B | void]>;\n  zipAll<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): IndexedSeq<[T | void, A | void, B | void, C | void]>;\n  zipAll<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): IndexedSeq<[T | void, A | void, B | void, C | void, D | void]>;\n  zipAll<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): IndexedSeq<[T | void, A | void, B | void, C | void, D | void, E | void]>;\n\n  zipWith<A, R>(\n    zipper: (value: T, a: A) => R,\n    a: Iterable<A>,\n    ..._: []\n  ): IndexedSeq<R>;\n  zipWith<A, B, R>(\n    zipper: (value: T, a: A, b: B) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): IndexedSeq<R>;\n  zipWith<A, B, C, R>(\n    zipper: (value: T, a: A, b: B, c: C) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): IndexedSeq<R>;\n  zipWith<A, B, C, D, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): IndexedSeq<R>;\n  zipWith<A, B, C, D, E, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D, e: E) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): IndexedSeq<R>;\n}\n\ndeclare class SetSeq<+T> extends Seq<T, T> mixins SetCollection<T> {\n  static <T>(values?: Iterable<T>): SetSeq<T>;\n\n  static of<T>(...values: T[]): SetSeq<T>;\n\n  // Override specialized return types\n\n  concat<U>(...collections: Iterable<U>[]): SetSeq<T | U>;\n\n  filter(predicate: typeof Boolean): SetSeq<$NonMaybeType<T>>;\n  filter(\n    predicate: (value: T, value: T, iter: this) => mixed,\n    context?: mixed\n  ): SetSeq<T>;\n\n  partition(\n    predicate: (value: T, value: T, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: T, value: T, iter: this) => M,\n    context?: mixed\n  ): SetSeq<M>;\n\n  flatMap<M>(\n    mapper: (value: T, value: T, iter: this) => Iterable<M>,\n    context?: mixed\n  ): SetSeq<M>;\n\n  flatten(depth?: number): SetSeq<any>;\n  flatten(shallow?: boolean): SetSeq<any>;\n}\n\ndeclare class UpdatableInCollection<K, +V> {\n  setIn<S>(keyPath: [], value: S): S;\n  setIn(keyPath: [K], value: V): this;\n  setIn<K2: $KeyOf<V>, S: $ValOf<V, K2>>(keyPath: [K, K2], value: S): this;\n  setIn<K2: $KeyOf<V>, K3: $KeyOf<$ValOf<V, K2>>, S: $ValOf<$ValOf<V, K2>, K3>>(\n    keyPath: [K, K2, K3],\n    value: S\n  ): this;\n  setIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    S: $ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>\n  >(\n    keyPath: [K, K2, K3, K4],\n    value: S\n  ): this;\n  setIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>, K5>\n  >(\n    keyPath: [K, K2, K3, K4, K5],\n    value: S\n  ): this;\n\n  deleteIn(keyPath: []): void;\n  deleteIn(keyPath: [K]): this;\n  deleteIn<K2: $KeyOf<V>>(keyPath: [K, K2]): this;\n  deleteIn<K2: $KeyOf<V>, K3: $KeyOf<$ValOf<V, K2>>>(\n    keyPath: [K, K2, K3]\n  ): this;\n  deleteIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>\n  >(\n    keyPath: [K, K2, K3, K4]\n  ): this;\n  deleteIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>>\n  >(\n    keyPath: [K, K2, K3, K4, K5]\n  ): this;\n\n  removeIn(keyPath: []): void;\n  removeIn(keyPath: [K]): this;\n  removeIn<K2: $KeyOf<V>>(keyPath: [K, K2]): this;\n  removeIn<K2: $KeyOf<V>, K3: $KeyOf<$ValOf<V, K2>>>(\n    keyPath: [K, K2, K3]\n  ): this;\n  removeIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>\n  >(\n    keyPath: [K, K2, K3, K4]\n  ): this;\n  removeIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>>\n  >(\n    keyPath: [K, K2, K3, K4, K5]\n  ): this;\n\n  updateIn<U>(keyPath: [], notSetValue: mixed, updater: (value: this) => U): U;\n  updateIn<U>(keyPath: [], updater: (value: this) => U): U;\n  updateIn<NSV>(keyPath: [K], notSetValue: NSV, updater: (value: V) => V): this;\n  updateIn(keyPath: [K], updater: (value: V) => V): this;\n  updateIn<NSV, K2: $KeyOf<V>, S: $ValOf<V, K2>>(\n    keyPath: [K, K2],\n    notSetValue: NSV,\n    updater: (value: $ValOf<V, K2> | NSV) => S\n  ): this;\n  updateIn<K2: $KeyOf<V>, S: $ValOf<V, K2>>(\n    keyPath: [K, K2],\n    updater: (value: $ValOf<V, K2>) => S\n  ): this;\n  updateIn<\n    NSV,\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    S: $ValOf<$ValOf<V, K2>, K3>\n  >(\n    keyPath: [K, K2, K3],\n    notSetValue: NSV,\n    updater: (value: $ValOf<$ValOf<V, K2>, K3> | NSV) => S\n  ): this;\n  updateIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    S: $ValOf<$ValOf<V, K2>, K3>\n  >(\n    keyPath: [K, K2, K3],\n    updater: (value: $ValOf<$ValOf<V, K2>, K3>) => S\n  ): this;\n  updateIn<\n    NSV,\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    S: $ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>\n  >(\n    keyPath: [K, K2, K3, K4],\n    notSetValue: NSV,\n    updater: (value: $ValOf<$ValOf<$ValOf<V, K2>, K3>, K4> | NSV) => S\n  ): this;\n  updateIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    S: $ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>\n  >(\n    keyPath: [K, K2, K3, K4],\n    updater: (value: $ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>) => S\n  ): this;\n  updateIn<\n    NSV,\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>, K5>\n  >(\n    keyPath: [K, K2, K3, K4, K5],\n    notSetValue: NSV,\n    updater: (\n      value: $ValOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>, K5> | NSV\n    ) => S\n  ): this;\n  updateIn<\n    K2: $KeyOf<V>,\n    K3: $KeyOf<$ValOf<V, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<V, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>, K5>\n  >(\n    keyPath: [K, K2, K3, K4, K5],\n    updater: (value: $ValOf<$ValOf<$ValOf<$ValOf<V, K2>, K3>, K4>, K5>) => S\n  ): this;\n}\n\ndeclare function isList(maybeList: mixed): boolean %checks(maybeList instanceof\n  List);\ndeclare class List<+T>\n  extends IndexedCollection<T>\n  mixins UpdatableInCollection<number, T>\n{\n  static (collection?: Iterable<T>): List<T>;\n\n  static of<T>(...values: T[]): List<T>;\n\n  static isList: typeof isList;\n\n  size: number;\n\n  set<U>(index: number, value: U): List<T | U>;\n  delete(index: number): this;\n  remove(index: number): this;\n  insert<U>(index: number, value: U): List<T | U>;\n  clear(): this;\n  push<U>(...values: U[]): List<T | U>;\n  pop(): this;\n  unshift<U>(...values: U[]): List<T | U>;\n  shift(): this;\n\n  update<U>(updater: (value: this) => U): U;\n  update<U>(index: number, updater: (value: T) => U): List<T | U>;\n  update<U>(\n    index: number,\n    notSetValue: U,\n    updater: (value: T) => U\n  ): List<T | U>;\n\n  merge<U>(...collections: Iterable<U>[]): List<T | U>;\n\n  setSize(size: number): this;\n\n  mergeIn(keyPath: Iterable<mixed>, ...collections: Iterable<mixed>[]): this;\n  mergeDeepIn(\n    keyPath: Iterable<mixed>,\n    ...collections: Iterable<mixed>[]\n  ): this;\n\n  withMutations(mutator: (mutable: this) => mixed): this;\n  asMutable(): this;\n  wasAltered(): boolean;\n  asImmutable(): this;\n\n  // Override specialized return types\n\n  concat<C>(...iters: Array<Iterable<C> | C>): List<T | C>;\n\n  filter(predicate: typeof Boolean): List<$NonMaybeType<T>>;\n  filter(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): List<T>;\n\n  partition(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: T, index: number, iter: this) => M,\n    context?: mixed\n  ): List<M>;\n\n  flatMap<M>(\n    mapper: (value: T, index: number, iter: this) => Iterable<M>,\n    context?: mixed\n  ): List<M>;\n\n  flatten(depth?: number): List<any>;\n  flatten(shallow?: boolean): List<any>;\n\n  zip<A>(a: Iterable<A>, ..._: []): List<[T, A]>;\n  zip<A, B>(a: Iterable<A>, b: Iterable<B>, ..._: []): List<[T, A, B]>;\n  zip<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): List<[T, A, B, C]>;\n  zip<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): List<[T, A, B, C, D]>;\n  zip<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): List<[T, A, B, C, D, E]>;\n\n  zipAll<A>(a: Iterable<A>, ..._: []): List<[T | void, A | void]>;\n  zipAll<A, B>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): List<[T | void, A | void, B | void]>;\n  zipAll<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): List<[T | void, A | void, B | void, C | void]>;\n  zipAll<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): List<[T | void, A | void, B | void, C | void, D | void]>;\n  zipAll<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): List<[T | void, A | void, B | void, C | void, D | void, E | void]>;\n\n  zipWith<A, R>(\n    zipper: (value: T, a: A) => R,\n    a: Iterable<A>,\n    ..._: []\n  ): List<R>;\n  zipWith<A, B, R>(\n    zipper: (value: T, a: A, b: B) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): List<R>;\n  zipWith<A, B, C, R>(\n    zipper: (value: T, a: A, b: B, c: C) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): List<R>;\n  zipWith<A, B, C, D, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): List<R>;\n  zipWith<A, B, C, D, E, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D, e: E) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): List<R>;\n}\n\ndeclare function isMap(maybeMap: mixed): boolean %checks(maybeMap instanceof\n  Map);\ndeclare class Map<K, +V>\n  extends KeyedCollection<K, V>\n  mixins UpdatableInCollection<K, V>\n{\n  static <K, V>(values?: Iterable<[K, V]> | PlainObjInput<K, V>): Map<K, V>;\n\n  static isMap: typeof isMap;\n\n  size: number;\n\n  set<K_, V_>(key: K_, value: V_): Map<K | K_, V | V_>;\n  delete(key: K): this;\n  remove(key: K): this;\n  clear(): this;\n\n  deleteAll(keys: Iterable<K>): Map<K, V>;\n  removeAll(keys: Iterable<K>): Map<K, V>;\n\n  update<U>(updater: (value: this) => U): U;\n  update<V_>(key: K, updater: (value: V) => V_): Map<K, V | V_>;\n  update<V_>(\n    key: K,\n    notSetValue: V_,\n    updater: (value: V) => V_\n  ): Map<K, V | V_>;\n\n  merge<K_, V_>(\n    ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]\n  ): Map<K | K_, V | V_>;\n  concat<K_, V_>(\n    ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]\n  ): Map<K | K_, V | V_>;\n\n  mergeWith<K_, W, X>(\n    merger: (oldVal: V, newVal: W, key: K) => X,\n    ...collections: (Iterable<[K_, W]> | PlainObjInput<K_, W>)[]\n  ): Map<K | K_, V | W | X>;\n\n  mergeDeep<K_, V_>(\n    ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]\n  ): Map<K | K_, V | V_>;\n\n  mergeDeepWith<K_, V_>(\n    merger: (oldVal: any, newVal: any, key: any) => mixed,\n    ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]\n  ): Map<K | K_, V | V_>;\n\n  mergeIn(\n    keyPath: Iterable<mixed>,\n    ...collections: (Iterable<mixed> | PlainObjInput<mixed, mixed>)[]\n  ): this;\n  mergeDeepIn(\n    keyPath: Iterable<mixed>,\n    ...collections: (Iterable<mixed> | PlainObjInput<mixed, mixed>)[]\n  ): this;\n\n  withMutations(mutator: (mutable: this) => mixed): this;\n  asMutable(): this;\n  wasAltered(): boolean;\n  asImmutable(): this;\n\n  // Override specialized return types\n\n  flip(): Map<V, K>;\n\n  filter(predicate: typeof Boolean): Map<K, $NonMaybeType<V>>;\n  filter(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): Map<K, V>;\n\n  partition(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: V, key: K, iter: this) => M,\n    context?: mixed\n  ): Map<K, M>;\n\n  mapKeys<M>(\n    mapper: (key: K, value: V, iter: this) => M,\n    context?: mixed\n  ): Map<M, V>;\n\n  mapEntries<KM, VM>(\n    mapper: (entry: [K, V], index: number, iter: this) => [KM, VM],\n    context?: mixed\n  ): Map<KM, VM>;\n\n  flatMap<KM, VM>(\n    mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n    context?: mixed\n  ): Map<KM, VM>;\n\n  flatten(depth?: number): Map<any, any>;\n  flatten(shallow?: boolean): Map<any, any>;\n}\n\ndeclare function isOrderedMap(\n  maybeOrderedMap: mixed\n): boolean %checks(maybeOrderedMap instanceof OrderedMap);\ndeclare class OrderedMap<K, +V>\n  extends Map<K, V>\n  mixins UpdatableInCollection<K, V>\n{\n  static <K, V>(\n    values?: Iterable<[K, V]> | PlainObjInput<K, V>\n  ): OrderedMap<K, V>;\n\n  static isOrderedMap: typeof isOrderedMap;\n\n  size: number;\n\n  set<K_, V_>(key: K_, value: V_): OrderedMap<K | K_, V | V_>;\n  delete(key: K): this;\n  remove(key: K): this;\n  clear(): this;\n\n  update<U>(updater: (value: this) => U): U;\n  update<V_>(key: K, updater: (value: V) => V_): OrderedMap<K, V | V_>;\n  update<V_>(\n    key: K,\n    notSetValue: V_,\n    updater: (value: V) => V_\n  ): OrderedMap<K, V | V_>;\n\n  merge<K_, V_>(\n    ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]\n  ): OrderedMap<K | K_, V | V_>;\n  concat<K_, V_>(\n    ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]\n  ): OrderedMap<K | K_, V | V_>;\n\n  mergeWith<K_, W, X>(\n    merger: (oldVal: V, newVal: W, key: K) => X,\n    ...collections: (Iterable<[K_, W]> | PlainObjInput<K_, W>)[]\n  ): OrderedMap<K | K_, V | W | X>;\n\n  mergeDeep<K_, V_>(\n    ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]\n  ): OrderedMap<K | K_, V | V_>;\n\n  mergeDeepWith<K_, V_>(\n    merger: (oldVal: any, newVal: any, key: any) => mixed,\n    ...collections: (Iterable<[K_, V_]> | PlainObjInput<K_, V_>)[]\n  ): OrderedMap<K | K_, V | V_>;\n\n  mergeIn(\n    keyPath: Iterable<mixed>,\n    ...collections: (Iterable<mixed> | PlainObjInput<mixed, mixed>)[]\n  ): this;\n  mergeDeepIn(\n    keyPath: Iterable<mixed>,\n    ...collections: (Iterable<mixed> | PlainObjInput<mixed, mixed>)[]\n  ): this;\n\n  withMutations(mutator: (mutable: this) => mixed): this;\n  asMutable(): this;\n  wasAltered(): boolean;\n  asImmutable(): this;\n\n  // Override specialized return types\n\n  flip(): OrderedMap<V, K>;\n\n  filter(predicate: typeof Boolean): OrderedMap<K, $NonMaybeType<V>>;\n  filter(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): OrderedMap<K, V>;\n\n  partition(\n    predicate: (value: V, key: K, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: V, key: K, iter: this) => M,\n    context?: mixed\n  ): OrderedMap<K, M>;\n\n  mapKeys<M>(\n    mapper: (key: K, value: V, iter: this) => M,\n    context?: mixed\n  ): OrderedMap<M, V>;\n\n  mapEntries<KM, VM>(\n    mapper: (entry: [K, V], index: number, iter: this) => [KM, VM],\n    context?: mixed\n  ): OrderedMap<KM, VM>;\n\n  flatMap<KM, VM>(\n    mapper: (value: V, key: K, iter: this) => Iterable<[KM, VM]>,\n    context?: mixed\n  ): OrderedMap<KM, VM>;\n\n  flatten(depth?: number): OrderedMap<any, any>;\n  flatten(shallow?: boolean): OrderedMap<any, any>;\n}\n\ndeclare function isSet(maybeSet: mixed): boolean %checks(maybeSet instanceof\n  Set);\ndeclare class Set<+T> extends SetCollection<T> {\n  static <T>(values?: Iterable<T>): Set<T>;\n\n  static of<T>(...values: T[]): Set<T>;\n  static fromKeys<T>(\n    values: Iterable<[T, mixed]> | PlainObjInput<T, mixed>\n  ): Set<T>;\n\n  static intersect(sets: Iterable<Iterable<T>>): Set<T>;\n  static union(sets: Iterable<Iterable<T>>): Set<T>;\n\n  static isSet: typeof isSet;\n\n  size: number;\n\n  add<U>(value: U): Set<T | U>;\n  delete(value: T): this;\n  remove(value: T): this;\n  clear(): this;\n  union<U>(...collections: Iterable<U>[]): Set<T | U>;\n  merge<U>(...collections: Iterable<U>[]): Set<T | U>;\n  concat<U>(...collections: Iterable<U>[]): Set<T | U>;\n  intersect<U>(...collections: Iterable<U>[]): Set<T & U>;\n  subtract(...collections: Iterable<mixed>[]): this;\n\n  withMutations(mutator: (mutable: this) => mixed): this;\n  asMutable(): this;\n  wasAltered(): boolean;\n  asImmutable(): this;\n\n  // Override specialized return types\n\n  filter(predicate: typeof Boolean): Set<$NonMaybeType<T>>;\n  filter(\n    predicate: (value: T, value: T, iter: this) => mixed,\n    context?: mixed\n  ): Set<T>;\n\n  partition(\n    predicate: (value: T, value: T, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: T, value: T, iter: this) => M,\n    context?: mixed\n  ): Set<M>;\n\n  flatMap<M>(\n    mapper: (value: T, value: T, iter: this) => Iterable<M>,\n    context?: mixed\n  ): Set<M>;\n\n  flatten(depth?: number): Set<any>;\n  flatten(shallow?: boolean): Set<any>;\n}\n\n// Overrides except for `isOrderedSet` are for specialized return types\ndeclare function isOrderedSet(\n  maybeOrderedSet: mixed\n): boolean %checks(maybeOrderedSet instanceof OrderedSet);\ndeclare class OrderedSet<+T> extends Set<T> {\n  static <T>(values?: Iterable<T>): OrderedSet<T>;\n\n  static of<T>(...values: T[]): OrderedSet<T>;\n  static fromKeys<T>(\n    values: Iterable<[T, mixed]> | PlainObjInput<T, mixed>\n  ): OrderedSet<T>;\n\n  static isOrderedSet: typeof isOrderedSet;\n\n  size: number;\n\n  add<U>(value: U): OrderedSet<T | U>;\n  union<U>(...collections: Iterable<U>[]): OrderedSet<T | U>;\n  merge<U>(...collections: Iterable<U>[]): OrderedSet<T | U>;\n  concat<U>(...collections: Iterable<U>[]): OrderedSet<T | U>;\n  intersect<U>(...collections: Iterable<U>[]): OrderedSet<T & U>;\n\n  filter(predicate: typeof Boolean): OrderedSet<$NonMaybeType<T>>;\n  filter(\n    predicate: (value: T, value: T, iter: this) => mixed,\n    context?: mixed\n  ): OrderedSet<T>;\n\n  partition(\n    predicate: (value: T, value: T, iter: this) => mixed,\n    context?: mixed\n  ): [this, this];\n\n  map<M>(\n    mapper: (value: T, value: T, iter: this) => M,\n    context?: mixed\n  ): OrderedSet<M>;\n\n  flatMap<M>(\n    mapper: (value: T, value: T, iter: this) => Iterable<M>,\n    context?: mixed\n  ): OrderedSet<M>;\n\n  flatten(depth?: number): OrderedSet<any>;\n  flatten(shallow?: boolean): OrderedSet<any>;\n\n  zip<A>(a: Iterable<A>, ..._: []): OrderedSet<[T, A]>;\n  zip<A, B>(a: Iterable<A>, b: Iterable<B>, ..._: []): OrderedSet<[T, A, B]>;\n  zip<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): OrderedSet<[T, A, B, C]>;\n  zip<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): OrderedSet<[T, A, B, C, D]>;\n  zip<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): OrderedSet<[T, A, B, C, D, E]>;\n\n  zipAll<A>(a: Iterable<A>, ..._: []): OrderedSet<[T | void, A | void]>;\n  zipAll<A, B>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): OrderedSet<[T | void, A | void, B | void]>;\n  zipAll<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): OrderedSet<[T | void, A | void, B | void, C | void]>;\n  zipAll<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): OrderedSet<[T | void, A | void, B | void, C | void, D | void]>;\n  zipAll<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): OrderedSet<[T | void, A | void, B | void, C | void, D | void, E | void]>;\n\n  zipWith<A, R>(\n    zipper: (value: T, a: A) => R,\n    a: Iterable<A>,\n    ..._: []\n  ): OrderedSet<R>;\n  zipWith<A, B, R>(\n    zipper: (value: T, a: A, b: B) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): OrderedSet<R>;\n  zipWith<A, B, C, R>(\n    zipper: (value: T, a: A, b: B, c: C) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): OrderedSet<R>;\n  zipWith<A, B, C, D, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): OrderedSet<R>;\n  zipWith<A, B, C, D, E, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D, e: E) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): OrderedSet<R>;\n}\n\ndeclare function isStack(\n  maybeStack: mixed\n): boolean %checks(maybeStack instanceof Stack);\ndeclare class Stack<+T> extends IndexedCollection<T> {\n  static <T>(collection?: Iterable<T>): Stack<T>;\n\n  static isStack(maybeStack: mixed): boolean;\n  static of<T>(...values: T[]): Stack<T>;\n\n  static isStack: typeof isStack;\n\n  size: number;\n\n  peek(): T;\n  clear(): this;\n  unshift<U>(...values: U[]): Stack<T | U>;\n  unshiftAll<U>(iter: Iterable<U>): Stack<T | U>;\n  shift(): this;\n  push<U>(...values: U[]): Stack<T | U>;\n  pushAll<U>(iter: Iterable<U>): Stack<T | U>;\n  pop(): this;\n\n  withMutations(mutator: (mutable: this) => mixed): this;\n  asMutable(): this;\n  wasAltered(): boolean;\n  asImmutable(): this;\n\n  // Override specialized return types\n\n  concat<C>(...iters: Array<Iterable<C> | C>): Stack<T | C>;\n\n  filter(predicate: typeof Boolean): Stack<$NonMaybeType<T>>;\n  filter(\n    predicate: (value: T, index: number, iter: this) => mixed,\n    context?: mixed\n  ): Stack<T>;\n\n  map<M>(\n    mapper: (value: T, index: number, iter: this) => M,\n    context?: mixed\n  ): Stack<M>;\n\n  flatMap<M>(\n    mapper: (value: T, index: number, iter: this) => Iterable<M>,\n    context?: mixed\n  ): Stack<M>;\n\n  flatten(depth?: number): Stack<any>;\n  flatten(shallow?: boolean): Stack<any>;\n\n  zip<A>(a: Iterable<A>, ..._: []): Stack<[T, A]>;\n  zip<A, B>(a: Iterable<A>, b: Iterable<B>, ..._: []): Stack<[T, A, B]>;\n  zip<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): Stack<[T, A, B, C]>;\n  zip<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): Stack<[T, A, B, C, D]>;\n  zip<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): Stack<[T, A, B, C, D, E]>;\n\n  zipAll<A>(a: Iterable<A>, ..._: []): Stack<[T | void, A | void]>;\n  zipAll<A, B>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): Stack<[T | void, A | void, B | void]>;\n  zipAll<A, B, C>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): Stack<[T | void, A | void, B | void, C | void]>;\n  zipAll<A, B, C, D>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): Stack<[T | void, A | void, B | void, C | void, D | void]>;\n  zipAll<A, B, C, D, E>(\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): Stack<[T | void, A | void, B | void, C | void, D | void, E | void]>;\n\n  zipWith<A, R>(\n    zipper: (value: T, a: A) => R,\n    a: Iterable<A>,\n    ..._: []\n  ): Stack<R>;\n  zipWith<A, B, R>(\n    zipper: (value: T, a: A, b: B) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    ..._: []\n  ): Stack<R>;\n  zipWith<A, B, C, R>(\n    zipper: (value: T, a: A, b: B, c: C) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    ..._: []\n  ): Stack<R>;\n  zipWith<A, B, C, D, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    ..._: []\n  ): Stack<R>;\n  zipWith<A, B, C, D, E, R>(\n    zipper: (value: T, a: A, b: B, c: C, d: D, e: E) => R,\n    a: Iterable<A>,\n    b: Iterable<B>,\n    c: Iterable<C>,\n    d: Iterable<D>,\n    e: Iterable<E>,\n    ..._: []\n  ): Stack<R>;\n}\n\ndeclare function Range(\n  start?: number,\n  end?: number,\n  step?: number\n): IndexedSeq<number>;\ndeclare function Repeat<T>(value: T, times?: number): IndexedSeq<T>;\n\n// The type of a Record factory function.\ntype RecordFactory<Values: Object> = Class<RecordInstance<Values>>;\n\n// The type of runtime Record instances.\ntype RecordOf<Values: Object> = RecordInstance<Values> & $ReadOnly<Values>;\n\n// The values of a Record instance.\ntype _RecordValues<T, R: RecordInstance<T> | T> = R;\ntype RecordValues<R> = _RecordValues<*, R>;\n\ndeclare function isRecord(\n  maybeRecord: any\n): boolean %checks(maybeRecord instanceof RecordInstance);\ndeclare class Record {\n  static <Values: Object>(spec: Values, name?: string): typeof RecordInstance;\n  constructor<Values: Object>(\n    spec: Values,\n    name?: string\n  ): typeof RecordInstance;\n\n  static isRecord: typeof isRecord;\n\n  static getDescriptiveName(record: RecordInstance<any>): string;\n}\n\ndeclare class RecordInstance<T: Object = Object> {\n  static (values?: Iterable<[$Keys<T>, $ValOf<T>]> | $Shape<T>): RecordOf<T>;\n  // Note: a constructor can only create an instance of RecordInstance<T>,\n  // it's encouraged to not use `new` when creating Records.\n  constructor(values?: Iterable<[$Keys<T>, $ValOf<T>]> | $Shape<T>): void;\n\n  size: number;\n\n  has(key: string): boolean;\n\n  get<K: $Keys<T>>(key: K, ..._: []): $ElementType<T, K>;\n  get<K: $Keys<T>, NSV>(key: K, notSetValue: NSV): $ElementType<T, K> | NSV;\n\n  hasIn(keyPath: Iterable<mixed>): boolean;\n\n  getIn(keyPath: [], notSetValue?: mixed): this & $ReadOnly<T>;\n  getIn<K: $Keys<T>>(keyPath: [K], notSetValue?: mixed): $ElementType<T, K>;\n  getIn<NSV, K: $Keys<T>, K2: $KeyOf<$ValOf<T, K>>>(\n    keyPath: [K, K2],\n    notSetValue: NSV\n  ): $ValOf<$ValOf<T, K>, K2> | NSV;\n  getIn<\n    NSV,\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>\n  >(\n    keyPath: [K, K2, K3],\n    notSetValue: NSV\n  ): $ValOf<$ValOf<$ValOf<T, K>, K2>, K3> | NSV;\n  getIn<\n    NSV,\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>\n  >(\n    keyPath: [K, K2, K3, K4],\n    notSetValue: NSV\n  ): $ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4> | NSV;\n  getIn<\n    NSV,\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>>\n  >(\n    keyPath: [K, K2, K3, K4, K5],\n    notSetValue: NSV\n  ): $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>, K5> | NSV;\n\n  equals(other: any): boolean;\n  hashCode(): number;\n\n  set<K: $Keys<T>>(key: K, value: $ElementType<T, K>): this & $ReadOnly<T>;\n  update<K: $Keys<T>>(\n    key: K,\n    updater: (value: $ElementType<T, K>) => $ElementType<T, K>\n  ): this & $ReadOnly<T>;\n  merge(\n    ...collections: Array<Iterable<[$Keys<T>, $ValOf<T>]> | $Shape<T>>\n  ): this & $ReadOnly<T>;\n  mergeDeep(\n    ...collections: Array<Iterable<[$Keys<T>, $ValOf<T>]> | $Shape<T>>\n  ): this & $ReadOnly<T>;\n\n  mergeWith(\n    merger: (oldVal: $ValOf<T>, newVal: $ValOf<T>, key: $Keys<T>) => $ValOf<T>,\n    ...collections: Array<Iterable<[$Keys<T>, $ValOf<T>]> | $Shape<T>>\n  ): this & $ReadOnly<T>;\n  mergeDeepWith(\n    merger: (oldVal: any, newVal: any, key: any) => any,\n    ...collections: Array<Iterable<[$Keys<T>, $ValOf<T>]> | $Shape<T>>\n  ): this & $ReadOnly<T>;\n\n  delete<K: $Keys<T>>(key: K): this & $ReadOnly<T>;\n  remove<K: $Keys<T>>(key: K): this & $ReadOnly<T>;\n  clear(): this & $ReadOnly<T>;\n\n  setIn<S>(keyPath: [], value: S): S;\n  setIn<K: $Keys<T>, S: $ValOf<T, K>>(\n    keyPath: [K],\n    value: S\n  ): this & $ReadOnly<T>;\n  setIn<K: $Keys<T>, K2: $KeyOf<$ValOf<T, K>>, S: $ValOf<$ValOf<T, K>, K2>>(\n    keyPath: [K, K2],\n    value: S\n  ): this & $ReadOnly<T>;\n  setIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    S: $ValOf<$ValOf<$ValOf<T, K>, K2>, K3>\n  >(\n    keyPath: [K, K2, K3],\n    value: S\n  ): this & $ReadOnly<T>;\n  setIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>\n  >(\n    keyPath: [K, K2, K3, K4],\n    value: S\n  ): this & $ReadOnly<T>;\n  setIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>, K5>\n  >(\n    keyPath: [K, K2, K3, K4, K5],\n    value: S\n  ): this & $ReadOnly<T>;\n\n  deleteIn(keyPath: []): void;\n  deleteIn<K: $Keys<T>>(keyPath: [K]): this & $ReadOnly<T>;\n  deleteIn<K: $Keys<T>, K2: $KeyOf<$ValOf<T, K>>>(\n    keyPath: [K, K2]\n  ): this & $ReadOnly<T>;\n  deleteIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>\n  >(\n    keyPath: [K, K2, K3]\n  ): this & $ReadOnly<T>;\n  deleteIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>\n  >(\n    keyPath: [K, K2, K3, K4]\n  ): this & $ReadOnly<T>;\n  deleteIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>>\n  >(\n    keyPath: [K, K2, K3, K4, K5]\n  ): this & $ReadOnly<T>;\n\n  removeIn(keyPath: []): void;\n  removeIn<K: $Keys<T>>(keyPath: [K]): this & $ReadOnly<T>;\n  removeIn<K: $Keys<T>, K2: $KeyOf<$ValOf<T, K>>>(\n    keyPath: [K, K2]\n  ): this & $ReadOnly<T>;\n  removeIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>\n  >(\n    keyPath: [K, K2, K3]\n  ): this & $ReadOnly<T>;\n  removeIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>\n  >(\n    keyPath: [K, K2, K3, K4]\n  ): this & $ReadOnly<T>;\n  removeIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>>\n  >(\n    keyPath: [K, K2, K3, K4, K5]\n  ): this & $ReadOnly<T>;\n\n  updateIn<U>(\n    keyPath: [],\n    notSetValue: mixed,\n    updater: (value: this & T) => U\n  ): U;\n  updateIn<U>(keyPath: [], updater: (value: this & T) => U): U;\n  updateIn<NSV, K: $Keys<T>, S: $ValOf<T, K>>(\n    keyPath: [K],\n    notSetValue: NSV,\n    updater: (value: $ValOf<T, K>) => S\n  ): this & $ReadOnly<T>;\n  updateIn<K: $Keys<T>, S: $ValOf<T, K>>(\n    keyPath: [K],\n    updater: (value: $ValOf<T, K>) => S\n  ): this & $ReadOnly<T>;\n  updateIn<\n    NSV,\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    S: $ValOf<$ValOf<T, K>, K2>\n  >(\n    keyPath: [K, K2],\n    notSetValue: NSV,\n    updater: (value: $ValOf<$ValOf<T, K>, K2> | NSV) => S\n  ): this & $ReadOnly<T>;\n  updateIn<K: $Keys<T>, K2: $KeyOf<$ValOf<T, K>>, S: $ValOf<$ValOf<T, K>, K2>>(\n    keyPath: [K, K2],\n    updater: (value: $ValOf<$ValOf<T, K>, K2>) => S\n  ): this & $ReadOnly<T>;\n  updateIn<\n    NSV,\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    S: $ValOf<$ValOf<$ValOf<T, K>, K2>, K3>\n  >(\n    keyPath: [K, K2, K3],\n    notSetValue: NSV,\n    updater: (value: $ValOf<$ValOf<$ValOf<T, K>, K2>, K3> | NSV) => S\n  ): this & $ReadOnly<T>;\n  updateIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    S: $ValOf<$ValOf<$ValOf<T, K>, K2>, K3>\n  >(\n    keyPath: [K, K2, K3],\n    updater: (value: $ValOf<$ValOf<$ValOf<T, K>, K2>, K3>) => S\n  ): this & $ReadOnly<T>;\n  updateIn<\n    NSV,\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>\n  >(\n    keyPath: [K, K2, K3, K4],\n    notSetValue: NSV,\n    updater: (\n      value: $ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4> | NSV\n    ) => S\n  ): this & $ReadOnly<T>;\n  updateIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>\n  >(\n    keyPath: [K, K2, K3, K4],\n    updater: (value: $ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>) => S\n  ): this & $ReadOnly<T>;\n  updateIn<\n    NSV,\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>, K5>\n  >(\n    keyPath: [K, K2, K3, K4, K5],\n    notSetValue: NSV,\n    updater: (\n      value: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>, K5> | NSV\n    ) => S\n  ): this & $ReadOnly<T>;\n  updateIn<\n    K: $Keys<T>,\n    K2: $KeyOf<$ValOf<T, K>>,\n    K3: $KeyOf<$ValOf<$ValOf<T, K>, K2>>,\n    K4: $KeyOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>>,\n    K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>>,\n    S: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>, K5>\n  >(\n    keyPath: [K, K2, K3, K4, K5],\n    updater: (\n      value: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<T, K>, K2>, K3>, K4>, K5>\n    ) => S\n  ): this & $ReadOnly<T>;\n\n  mergeIn(\n    keyPath: Iterable<mixed>,\n    ...collections: Array<any>\n  ): this & $ReadOnly<T>;\n  mergeDeepIn(\n    keyPath: Iterable<mixed>,\n    ...collections: Array<any>\n  ): this & $ReadOnly<T>;\n\n  toSeq(): KeyedSeq<$Keys<T>, any>;\n\n  toJS(): { [key: $Keys<T>]: mixed };\n  toJSON(): T;\n  toObject(): T;\n\n  withMutations(mutator: (mutable: this & T) => mixed): this & $ReadOnly<T>;\n  asMutable(): this & $ReadOnly<T>;\n  wasAltered(): boolean;\n  asImmutable(): this & $ReadOnly<T>;\n\n  @@iterator(): Iterator<[$Keys<T>, $ValOf<T>]>;\n}\n\ndeclare function fromJS(\n  jsValue: mixed,\n  reviver?: (\n    key: string | number,\n    sequence: KeyedCollection<string, mixed> | IndexedCollection<mixed>,\n    path?: Array<string | number>\n  ) => mixed\n): Collection<mixed, mixed>;\n\ndeclare function is(first: mixed, second: mixed): boolean;\ndeclare function hash(value: mixed): number;\n\ndeclare function get<C: Object, K: $Keys<C>>(\n  collection: C,\n  key: K,\n  notSetValue: mixed\n): $ValOf<C, K>;\ndeclare function get<C, K: $KeyOf<C>, NSV>(\n  collection: C,\n  key: K,\n  notSetValue: NSV\n): $ValOf<C, K> | NSV;\n\ndeclare function has(collection: Object, key: mixed): boolean;\ndeclare function remove<C>(collection: C, key: $KeyOf<C>): C;\ndeclare function set<C, K: $KeyOf<C>, V: $ValOf<C, K>>(\n  collection: C,\n  key: K,\n  value: V\n): C;\ndeclare function update<C, K: $KeyOf<C>, V: $ValOf<C, K>, NSV>(\n  collection: C,\n  key: K,\n  notSetValue: NSV,\n  updater: ($ValOf<C, K> | NSV) => V\n): C;\ndeclare function update<C, K: $KeyOf<C>, V: $ValOf<C, K>>(\n  collection: C,\n  key: K,\n  updater: ($ValOf<C, K>) => V\n): C;\n\ndeclare function getIn<C>(collection: C, keyPath: [], notSetValue?: mixed): C;\ndeclare function getIn<C, K: $KeyOf<C>, NSV>(\n  collection: C,\n  keyPath: [K],\n  notSetValue: NSV\n): $ValOf<C, K> | NSV;\ndeclare function getIn<C, K: $KeyOf<C>, K2: $KeyOf<$ValOf<C, K>>, NSV>(\n  collection: C,\n  keyPath: [K, K2],\n  notSetValue: NSV\n): $ValOf<$ValOf<C, K>, K2> | NSV;\ndeclare function getIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  NSV\n>(\n  collection: C,\n  keyPath: [K, K2, K3],\n  notSetValue: NSV\n): $ValOf<$ValOf<$ValOf<C, K>, K2>, K3> | NSV;\ndeclare function getIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  NSV\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4],\n  notSetValue: NSV\n): $ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4> | NSV;\ndeclare function getIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>>,\n  NSV\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4, K5],\n  notSetValue: NSV\n): $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>, K5> | NSV;\n\ndeclare function hasIn(collection: Object, keyPath: Iterable<mixed>): boolean;\n\ndeclare function removeIn<C>(collection: C, keyPath: []): void;\ndeclare function removeIn<C, K: $KeyOf<C>>(collection: C, keyPath: [K]): C;\ndeclare function removeIn<C, K: $KeyOf<C>, K2: $KeyOf<$ValOf<C, K>>>(\n  collection: C,\n  keyPath: [K, K2]\n): C;\ndeclare function removeIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>\n>(\n  collection: C,\n  keyPath: [K, K2, K3]\n): C;\ndeclare function removeIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4]\n): C;\ndeclare function removeIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>>\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4, K5]\n): C;\n\ndeclare function setIn<S>(collection: Object, keyPath: [], value: S): S;\ndeclare function setIn<C, K: $KeyOf<C>, S: $ValOf<C, K>>(\n  collection: C,\n  keyPath: [K],\n  value: S\n): C;\ndeclare function setIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  S: $ValOf<$ValOf<C, K>, K2>\n>(\n  collection: C,\n  keyPath: [K, K2],\n  value: S\n): C;\ndeclare function setIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  S: $ValOf<$ValOf<$ValOf<C, K>, K2>, K3>\n>(\n  collection: C,\n  keyPath: [K, K2, K3],\n  value: S\n): C;\ndeclare function setIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  S: $ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4],\n  value: S\n): C;\ndeclare function setIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>>,\n  S: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>, K5>\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4, K5],\n  value: S\n): C;\n\ndeclare function updateIn<C, S>(\n  collection: C,\n  keyPath: [],\n  notSetValue: mixed,\n  updater: (value: C) => S\n): S;\ndeclare function updateIn<C, S>(\n  collection: C,\n  keyPath: [],\n  updater: (value: C) => S\n): S;\ndeclare function updateIn<C, K: $KeyOf<C>, S: $ValOf<C, K>, NSV>(\n  collection: C,\n  keyPath: [K],\n  notSetValue: NSV,\n  updater: (value: $ValOf<C, K> | NSV) => S\n): C;\ndeclare function updateIn<C, K: $KeyOf<C>, S: $ValOf<C, K>>(\n  collection: C,\n  keyPath: [K],\n  updater: (value: $ValOf<C, K>) => S\n): C;\ndeclare function updateIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  S: $ValOf<$ValOf<C, K>, K2>,\n  NSV\n>(\n  collection: C,\n  keyPath: [K, K2],\n  notSetValue: NSV,\n  updater: (value: $ValOf<$ValOf<C, K>, K2> | NSV) => S\n): C;\ndeclare function updateIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  S: $ValOf<$ValOf<C, K>, K2>\n>(\n  collection: C,\n  keyPath: [K, K2],\n  updater: (value: $ValOf<$ValOf<C, K>, K2>) => S\n): C;\ndeclare function updateIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  S: $ValOf<$ValOf<$ValOf<C, K>, K2>, K3>,\n  NSV\n>(\n  collection: C,\n  keyPath: [K, K2, K3],\n  notSetValue: NSV,\n  updater: (value: $ValOf<$ValOf<$ValOf<C, K>, K2>, K3> | NSV) => S\n): C;\ndeclare function updateIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  S: $ValOf<$ValOf<$ValOf<C, K>, K2>, K3>\n>(\n  collection: C,\n  keyPath: [K, K2, K3],\n  updater: (value: $ValOf<$ValOf<$ValOf<C, K>, K2>, K3>) => S\n): C;\ndeclare function updateIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  S: $ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>,\n  NSV\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4],\n  notSetValue: NSV,\n  updater: (value: $ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4> | NSV) => S\n): C;\ndeclare function updateIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  S: $ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4],\n  updater: (value: $ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>) => S\n): C;\ndeclare function updateIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>>,\n  S: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>, K5>,\n  NSV\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4, K5],\n  notSetValue: NSV,\n  updater: (\n    value: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>, K5> | NSV\n  ) => S\n): C;\ndeclare function updateIn<\n  C,\n  K: $KeyOf<C>,\n  K2: $KeyOf<$ValOf<C, K>>,\n  K3: $KeyOf<$ValOf<$ValOf<C, K>, K2>>,\n  K4: $KeyOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>>,\n  K5: $KeyOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>>,\n  S: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>, K5>\n>(\n  collection: C,\n  keyPath: [K, K2, K3, K4, K5],\n  updater: (\n    value: $ValOf<$ValOf<$ValOf<$ValOf<$ValOf<C, K>, K2>, K3>, K4>, K5>\n  ) => S\n): C;\n\ndeclare function merge<C>(\n  collection: C,\n  ...collections: Array<\n    | $IterableOf<C>\n    | $Shape<RecordValues<C>>\n    | PlainObjInput<$KeyOf<C>, $ValOf<C>>\n  >\n): C;\ndeclare function mergeWith<C>(\n  merger: (oldVal: $ValOf<C>, newVal: $ValOf<C>, key: $KeyOf<C>) => $ValOf<C>,\n  collection: C,\n  ...collections: Array<\n    | $IterableOf<C>\n    | $Shape<RecordValues<C>>\n    | PlainObjInput<$KeyOf<C>, $ValOf<C>>\n  >\n): C;\ndeclare function mergeDeep<C>(\n  collection: C,\n  ...collections: Array<\n    | $IterableOf<C>\n    | $Shape<RecordValues<C>>\n    | PlainObjInput<$KeyOf<C>, $ValOf<C>>\n  >\n): C;\ndeclare function mergeDeepWith<C>(\n  merger: (oldVal: any, newVal: any, key: any) => mixed,\n  collection: C,\n  ...collections: Array<\n    | $IterableOf<C>\n    | $Shape<RecordValues<C>>\n    | PlainObjInput<$KeyOf<C>, $ValOf<C>>\n  >\n): C;\n\nexport {\n  Collection,\n  Seq,\n  List,\n  Map,\n  OrderedMap,\n  OrderedSet,\n  Range,\n  Repeat,\n  Record,\n  Set,\n  Stack,\n  fromJS,\n  is,\n  hash,\n  isImmutable,\n  isCollection,\n  isKeyed,\n  isIndexed,\n  isAssociative,\n  isOrdered,\n  isRecord,\n  isValueObject,\n  get,\n  has,\n  remove,\n  set,\n  update,\n  getIn,\n  hasIn,\n  removeIn,\n  setIn,\n  updateIn,\n  merge,\n  mergeWith,\n  mergeDeep,\n  mergeDeepWith,\n};\n\nexport default {\n  Collection,\n  Seq,\n\n  List,\n  Map,\n  OrderedMap,\n  OrderedSet,\n  Range,\n  Repeat,\n  Record,\n  Set,\n  Stack,\n\n  fromJS,\n  is,\n  hash,\n\n  isImmutable,\n  isCollection,\n  isKeyed,\n  isIndexed,\n  isAssociative,\n  isOrdered,\n  isRecord,\n  isValueObject,\n\n  get,\n  has,\n  remove,\n  set,\n  update,\n  getIn,\n  hasIn,\n  removeIn,\n  setIn,\n  updateIn,\n  merge,\n  mergeWith,\n  mergeDeep,\n  mergeDeepWith,\n};\n\nexport type {\n  KeyedCollection,\n  IndexedCollection,\n  SetCollection,\n  KeyedSeq,\n  IndexedSeq,\n  SetSeq,\n  RecordFactory,\n  RecordOf,\n  RecordInstance,\n  ValueObject,\n  $KeyOf,\n  $ValOf,\n};\n"}},"immutable.min.js":{"file":{"contents":"/**\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e((t=\"undefined\"!=typeof globalThis?globalThis:t||self).Immutable={})}(this,function(t){\"use strict\";var e=\"delete\",d=5,l=1<<d,g=l-1,v={};function u(){return{value:!1}}function _(t){t&&(t.value=!0)}function m(){}function c(t){return void 0===t.size&&(t.size=t.__iterate(r)),t.size}function h(t,e){if(\"number\"!=typeof e){var r=e>>>0;if(\"\"+r!==e||4294967295==r)return NaN;e=r}return e<0?c(t)+e:e}function r(){return!0}function p(t,e,r){return(0===t&&!i(t)||void 0!==r&&t<=-r)&&(void 0===e||void 0!==r&&r<=e)}function y(t,e){return n(t,e,0)}function w(t,e){return n(t,e,e)}function n(t,e,r){return void 0===t?r:i(t)?e===1/0?e:0|Math.max(0,e+t):void 0===e||e===t?t:0|Math.min(e,t)}function i(t){return t<0||0===t&&1/t==-1/0}var o=\"@@__IMMUTABLE_ITERABLE__@@\";function f(t){return!(!t||!t[o])}var s=\"@@__IMMUTABLE_KEYED__@@\";function a(t){return!(!t||!t[s])}var S=\"@@__IMMUTABLE_INDEXED__@@\";function z(t){return!(!t||!t[S])}function b(t){return a(t)||z(t)}function I(t){return f(t)?t:F(t)}var O=function(t){function e(t){return a(t)?t:G(t)}return e.__proto__=t,(e.prototype=Object.create(t.prototype)).constructor=e}(I),E=function(t){function e(t){return z(t)?t:Z(t)}return e.__proto__=t,(e.prototype=Object.create(t.prototype)).constructor=e}(I),j=function(t){function e(t){return f(t)&&!b(t)?t:$(t)}return e.__proto__=t,(e.prototype=Object.create(t.prototype)).constructor=e}(I);I.Keyed=O,I.Indexed=E,I.Set=j;var q=\"@@__IMMUTABLE_SEQ__@@\";function M(t){return!(!t||!t[q])}var D=\"@@__IMMUTABLE_RECORD__@@\";function x(t){return!(!t||!t[D])}function A(t){return f(t)||x(t)}var k=\"@@__IMMUTABLE_ORDERED__@@\";function R(t){return!(!t||!t[k])}var U=0,K=1,T=2,C=\"function\"==typeof Symbol&&Symbol.iterator,L=\"@@iterator\",B=C||L,P=function(t){this.next=t};function W(t,e,r,n){r=0===t?e:1===t?r:[e,r];return n?n.value=r:n={value:r,done:!1},n}function N(){return{value:void 0,done:!0}}function H(t){return Array.isArray(t\n)||Y(t)}function J(t){return t&&\"function\"==typeof t.next}function V(t){var e=Y(t);return e&&e.call(t)}function Y(t){t=t&&(C&&t[C]||t[L]);if(\"function\"==typeof t)return t}P.prototype.toString=function(){return\"[Iterator]\"},P.KEYS=U,P.VALUES=K,P.ENTRIES=T,P.prototype.inspect=P.prototype.toSource=function(){return\"\"+this},P.prototype[B]=function(){return this};var Q=Object.prototype.hasOwnProperty;function X(t){return Array.isArray(t)||\"string\"==typeof t||t&&\"object\"==typeof t&&Number.isInteger(t.length)&&0<=t.length&&(0===t.length?1===Object.keys(t).length:t.hasOwnProperty(t.length-1))}var F=function(t){function e(t){return null==t?it():A(t)?t.toSeq():function(t){var e=st(t);if(e)return function(t){var e=Y(t);return e&&e===t.entries}(t)?e.fromEntrySeq():function(t){var e=Y(t);return e&&e===t.keys}(t)?e.toSetSeq():e;if(\"object\"!=typeof t)throw new TypeError(\"Expected Array or collection object of values, or keyed object: \"+t);return new et(t)}(t)}return e.__proto__=t,((e.prototype=Object.create(t.prototype)).constructor=e).prototype.toSeq=function(){return this},e.prototype.toString=function(){return this.__toString(\"Seq {\",\"}\")},e.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},e.prototype.__iterate=function(t,e){var r=this._cache;if(r){for(var n=r.length,i=0;i!==n;){var o=r[e?n-++i:i++];if(!1===t(o[1],o[0],this))break}return i}return this.__iterateUncached(t,e)},e.prototype.__iterator=function(e,r){var n=this._cache;if(n){var i=n.length,o=0;return new P(function(){if(o===i)return N();var t=n[r?i-++o:o++];return W(e,t[0],t[1])})}return this.__iteratorUncached(e,r)},e}(I),G=function(t){function e(t){return null==t?it().toKeyedSeq():f(t)?a(t)?t.toSeq():t.fromEntrySeq():x(t)?t.toSeq():ot(t)}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.toKeyedSeq=function(){return this},e}(F),Z=function(t){function e(t){return null==t?it():f(t)?a(t)?t.entrySeq():t.toIndexedSeq():x(t\n)?t.toSeq().entrySeq():ut(t)}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).of=function(){return e(arguments)},e.prototype.toIndexedSeq=function(){return this},e.prototype.toString=function(){return this.__toString(\"Seq [\",\"]\")},e}(F),$=function(t){function e(t){return(f(t)&&!b(t)?t:Z(t)).toSetSeq()}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).of=function(){return e(arguments)},e.prototype.toSetSeq=function(){return this},e}(F);F.isSeq=M,F.Keyed=G,F.Set=$,F.Indexed=Z,F.prototype[q]=!0;var tt=function(t){function e(t){this._array=t,this.size=t.length}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.get=function(t,e){return this.has(t)?this._array[h(this,t)]:e},e.prototype.__iterate=function(t,e){for(var r=this._array,n=r.length,i=0;i!==n;){var o=e?n-++i:i++;if(!1===t(r[o],o,this))break}return i},e.prototype.__iterator=function(e,r){var n=this._array,i=n.length,o=0;return new P(function(){if(o===i)return N();var t=r?i-++o:o++;return W(e,t,n[t])})},e}(Z),et=function(t){function e(t){var e=Object.keys(t).concat(Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]);this._object=t,this._keys=e,this.size=e.length}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.get=function(t,e){return void 0===e||this.has(t)?this._object[t]:e},e.prototype.has=function(t){return Q.call(this._object,t)},e.prototype.__iterate=function(t,e){for(var r=this._object,n=this._keys,i=n.length,o=0;o!==i;){var u=n[e?i-++o:o++];if(!1===t(r[u],u,this))break}return o},e.prototype.__iterator=function(e,r){var n=this._object,i=this._keys,o=i.length,u=0;return new P(function(){if(u===o)return N();var t=i[r?o-++u:u++];return W(e,t,n[t])})},e}(G);et.prototype[k]=!0;var rt,nt=function(t){function e(t){this._collection=t,this.size=t.length||t.size}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.__iterateUncached=function(t,e){\nif(e)return this.cacheResult().__iterate(t,e);var r,n=V(this._collection),i=0;if(J(n))for(;!(r=n.next()).done&&!1!==t(r.value,i++,this););return i},e.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var r=V(this._collection);if(!J(r))return new P(N);var n=0;return new P(function(){var t=r.next();return t.done?t:W(e,n++,t.value)})},e}(Z);function it(){return rt=rt||new tt([])}function ot(t){var e=st(t);if(e)return e.fromEntrySeq();if(\"object\"==typeof t)return new et(t);throw new TypeError(\"Expected Array or collection object of [k, v] entries, or keyed object: \"+t)}function ut(t){var e=st(t);if(e)return e;throw new TypeError(\"Expected Array or collection object of values: \"+t)}function st(t){return X(t)?new tt(t):H(t)?new nt(t):void 0}var at=\"@@__IMMUTABLE_MAP__@@\";function ct(t){return!(!t||!t[at])}function ft(t){return ct(t)&&R(t)}function ht(t){return!(!t||\"function\"!=typeof t.equals||\"function\"!=typeof t.hashCode)}function _t(t,e){if(t===e||t!=t&&e!=e)return!0;if(!t||!e)return!1;if(\"function\"==typeof t.valueOf&&\"function\"==typeof e.valueOf){if((t=t.valueOf())===(e=e.valueOf())||t!=t&&e!=e)return!0;if(!t||!e)return!1}return!!(ht(t)&&ht(e)&&t.equals(e))}var pt=\"function\"==typeof Math.imul&&-2==Math.imul(4294967295,2)?Math.imul:function(t,e){var r=65535&(t|=0),n=65535&(e|=0);return r*n+((t>>>16)*n+r*(e>>>16)<<16>>>0)|0};function lt(t){return t>>>1&1073741824|3221225471&t}var vt=Object.prototype.valueOf;function yt(t){if(null==t)return dt(t);if(\"function\"==typeof t.hashCode)return lt(t.hashCode(t));var e,r=(e=t).valueOf!==vt&&\"function\"==typeof e.valueOf?e.valueOf(e):e;if(null==r)return dt(r);switch(typeof r){case\"boolean\":return r?1108378657:1108378656;case\"number\":return function(t){if(t!=t||t===1/0)return 0;var e=0|t;e!==t&&(e^=4294967295*t);for(;4294967295<t;)e^=t/=4294967295;return lt(e)}(r);case\"string\":return(jt<r.length?function(t){var e=Dt[t];void 0===e&&(e=gt(t),Mt===qt&&(Mt=0,Dt={}),Mt++,Dt[t]=e);return e}:gt)(r);case\"object\":case\"function\":return function(t){\nvar e;if(bt&&void 0!==(e=zt.get(t)))return e;if(void 0!==(e=t[Et]))return e;if(!wt){if(void 0!==(e=t.propertyIsEnumerable&&t.propertyIsEnumerable[Et]))return e;if(void 0!==(e=function(t){if(t&&0<t.nodeType)switch(t.nodeType){case 1:return t.uniqueID;case 9:return t.documentElement&&t.documentElement.uniqueID}}(t)))return e}if(e=St(),bt)zt.set(t,e);else{if(void 0!==mt&&!1===mt(t))throw Error(\"Non-extensible objects are not allowed as keys.\");if(wt)Object.defineProperty(t,Et,{enumerable:!1,configurable:!1,writable:!1,value:e});else if(void 0!==t.propertyIsEnumerable&&t.propertyIsEnumerable===t.constructor.prototype.propertyIsEnumerable)t.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},t.propertyIsEnumerable[Et]=e;else{if(void 0===t.nodeType)throw Error(\"Unable to set a non-enumerable property on object.\");t[Et]=e}}return e}(r);case\"symbol\":return void 0===(e=It[t=r])?(e=St(),It[t]=e):e;default:if(\"function\"==typeof r.toString)return gt(\"\"+r);throw Error(\"Value type \"+typeof r+\" cannot be hashed.\")}}function dt(t){return null===t?1108378658:1108378659}function gt(t){for(var e=0,r=0;r<t.length;r++)e=31*e+t.charCodeAt(r)|0;return lt(e)}var mt=Object.isExtensible,wt=function(){try{return Object.defineProperty({},\"@\",{}),!0}catch(t){return!1}}();function St(){var t=++Ot;return 1073741824&Ot&&(Ot=0),t}var zt,bt=\"function\"==typeof WeakMap;bt&&(zt=new WeakMap);var It=Object.create(null),Ot=0,Et=\"__immutablehash__\";\"function\"==typeof Symbol&&(Et=Symbol(Et));var jt=16,qt=255,Mt=0,Dt={},xt=function(t){function e(t,e){this._iter=t,this._useKeys=e,this.size=t.size}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.get=function(t,e){return this._iter.get(t,e)},e.prototype.has=function(t){return this._iter.has(t)},e.prototype.valueSeq=function(){return this._iter.valueSeq()},e.prototype.reverse=function(){var t=this,e=Tt(this,!0);return this._useKeys||(e.valueSeq=function(){return t._iter.toSeq().reverse()}),e},\ne.prototype.map=function(t,e){var r=this,n=Kt(this,t,e);return this._useKeys||(n.valueSeq=function(){return r._iter.toSeq().map(t,e)}),n},e.prototype.__iterate=function(r,t){var n=this;return this._iter.__iterate(function(t,e){return r(t,e,n)},t)},e.prototype.__iterator=function(t,e){return this._iter.__iterator(t,e)},e}(G);xt.prototype[k]=!0;var At=function(t){function e(t){this._iter=t,this.size=t.size}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.includes=function(t){return this._iter.includes(t)},e.prototype.__iterate=function(e,r){var n=this,i=0;return r&&c(this),this._iter.__iterate(function(t){return e(t,r?n.size-++i:i++,n)},r)},e.prototype.__iterator=function(e,r){var n=this,i=this._iter.__iterator(K,r),o=0;return r&&c(this),new P(function(){var t=i.next();return t.done?t:W(e,r?n.size-++o:o++,t.value,t)})},e}(Z),kt=function(t){function e(t){this._iter=t,this.size=t.size}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.has=function(t){return this._iter.includes(t)},e.prototype.__iterate=function(e,t){var r=this;return this._iter.__iterate(function(t){return e(t,t,r)},t)},e.prototype.__iterator=function(e,t){var r=this._iter.__iterator(K,t);return new P(function(){var t=r.next();return t.done?t:W(e,t.value,t.value,t)})},e}($),Rt=function(t){function e(t){this._iter=t,this.size=t.size}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.entrySeq=function(){return this._iter.toSeq()},e.prototype.__iterate=function(r,t){var n=this;return this._iter.__iterate(function(t){if(t){Yt(t);var e=f(t);return r(e?t.get(1):t[1],e?t.get(0):t[0],n)}},t)},e.prototype.__iterator=function(n,t){var i=this._iter.__iterator(K,t);return new P(function(){for(;;){var t=i.next();if(t.done)return t;var e=t.value;if(e){Yt(e);var r=f(e);return W(n,r?e.get(0):e[0],r?e.get(1):e[1],t)}}})},e}(G);function Ut(i){var t=Xt(i);return t._iter=i,t.size=i.size,t.flip=function(){return i},t.reverse=function(){\nvar t=i.reverse.apply(this);return t.flip=function(){return i.reverse()},t},t.has=function(t){return i.includes(t)},t.includes=function(t){return i.has(t)},t.cacheResult=Ft,t.__iterateUncached=function(r,t){var n=this;return i.__iterate(function(t,e){return!1!==r(e,t,n)},t)},t.__iteratorUncached=function(t,e){if(t!==T)return i.__iterator(t===K?U:K,e);var r=i.__iterator(t,e);return new P(function(){var t,e=r.next();return e.done||(t=e.value[0],e.value[0]=e.value[1],e.value[1]=t),e})},t}function Kt(o,u,s){var t=Xt(o);return t.size=o.size,t.has=function(t){return o.has(t)},t.get=function(t,e){var r=o.get(t,v);return r===v?e:u.call(s,r,t,o)},t.__iterateUncached=function(n,t){var i=this;return o.__iterate(function(t,e,r){return!1!==n(u.call(s,t,e,r),e,i)},t)},t.__iteratorUncached=function(n,t){var i=o.__iterator(T,t);return new P(function(){var t=i.next();if(t.done)return t;var e=t.value,r=e[0];return W(n,r,u.call(s,e[1],r,o),t)})},t}function Tt(u,s){var a=this,t=Xt(u);return t._iter=u,t.size=u.size,t.reverse=function(){return u},u.flip&&(t.flip=function(){var t=Ut(u);return t.reverse=function(){return u.flip()},t}),t.get=function(t,e){return u.get(s?t:-1-t,e)},t.has=function(t){return u.has(s?t:-1-t)},t.includes=function(t){return u.includes(t)},t.cacheResult=Ft,t.__iterate=function(r,n){var i=this,o=0;return n&&c(u),u.__iterate(function(t,e){return r(t,s?e:n?i.size-++o:o++,i)},!n)},t.__iterator=function(r,n){var i=0;n&&c(u);var o=u.__iterator(T,!n);return new P(function(){var t=o.next();if(t.done)return t;var e=t.value;return W(r,s?e[0]:n?a.size-++i:i++,e[1],t)})},t}function Ct(u,s,a,c){var t=Xt(u);return c&&(t.has=function(t){var e=u.get(t,v);return e!==v&&!!s.call(a,e,t,u)},t.get=function(t,e){var r=u.get(t,v);return r!==v&&s.call(a,r,t,u)?r:e}),t.__iterateUncached=function(n,t){var i=this,o=0;return u.__iterate(function(t,e,r){if(s.call(a,t,e,r))return o++,n(t,c?e:o-1,i)},t),o},t.__iteratorUncached=function(n,t){var i=u.__iterator(T,t),o=0;return new P(function(){for(;;){var t=i.next();if(t.done)return t\n;var e=t.value,r=e[0],e=e[1];if(s.call(a,e,r,u))return W(n,c?r:o++,e,t)}})},t}function Lt(s,t,e,a){var r=s.size;if(p(t,e,r))return s;var c=y(t,r),r=w(e,r);if(c!=c||r!=r)return Lt(s.toSeq().cacheResult(),t,e,a);var f,r=r-c;r==r&&(f=r<0?0:r);r=Xt(s);return r.size=0===f?f:s.size&&f||void 0,!a&&M(s)&&0<=f&&(r.get=function(t,e){return 0<=(t=h(this,t))&&t<f?s.get(t+c,e):e}),r.__iterateUncached=function(r,t){var n=this;if(0===f)return 0;if(t)return this.cacheResult().__iterate(r,t);var i=0,o=!0,u=0;return s.__iterate(function(t,e){if(!(o=o&&i++<c))return u++,!1!==r(t,a?e:u-1,n)&&u!==f}),u},r.__iteratorUncached=function(e,t){if(0!==f&&t)return this.cacheResult().__iterator(e,t);if(0===f)return new P(N);var r=s.__iterator(e,t),n=0,i=0;return new P(function(){for(;n++<c;)r.next();if(++i>f)return N();var t=r.next();return a||e===K||t.done?t:W(e,i-1,e===U?void 0:t.value[1],t)})},r}function Bt(e,c,f,h){var t=Xt(e);return t.__iterateUncached=function(n,t){var i=this;if(t)return this.cacheResult().__iterate(n,t);var o=!0,u=0;return e.__iterate(function(t,e,r){if(!(o=o&&c.call(f,t,e,r)))return u++,n(t,h?e:u-1,i)}),u},t.__iteratorUncached=function(i,t){var o=this;if(t)return this.cacheResult().__iterator(i,t);var u=e.__iterator(T,t),s=!0,a=0;return new P(function(){var t;do{if((t=u.next()).done)return h||i===K?t:W(i,a++,i===U?void 0:t.value[1],t);var e=t.value,r=e[0],n=e[1];s=s&&c.call(f,n,r,o)}while(s);return i===T?t:W(i,r,n,t)})},t}function Pt(t,s,a){var c=Xt(t);return c.__iterateUncached=function(i,e){if(e)return this.cacheResult().__iterate(i,e);var o=0,u=!1;return function r(t,n){t.__iterate(function(t,e){return(!s||n<s)&&f(t)?r(t,n+1):(o++,!1===i(t,a?e:o-1,c)&&(u=!0)),!u},e)}(t,0),o},c.__iteratorUncached=function(r,n){if(n)return this.cacheResult().__iterator(r,n);var i=t.__iterator(r,n),o=[],u=0;return new P(function(){for(;i;){var t=i.next();if(!1===t.done){var e=t.value;if(r===T&&(e=e[1]),s&&!(o.length<s)||!f(e))return a?t:W(r,u++,e,t);o.push(i),i=e.__iterator(r,n)}else i=o.pop()}return N()})},c}function Wt(r,n,i){\nn=n||Gt;var t=a(r),o=0,u=r.toSeq().map(function(t,e){return[e,t,o++,i?i(t,e,r):t]}).valueSeq().toArray();return u.sort(function(t,e){return n(t[3],e[3])||t[2]-e[2]}).forEach(t?function(t,e){u[e].length=2}:function(t,e){u[e]=t[1]}),(t?G:z(r)?Z:$)(u)}function Nt(r,n,i){if(n=n||Gt,i){var t=r.toSeq().map(function(t,e){return[t,i(t,e,r)]}).reduce(function(t,e){return Ht(n,t[1],e[1])?e:t});return t&&t[0]}return r.reduce(function(t,e){return Ht(n,t,e)?e:t})}function Ht(t,e,r){t=t(r,e);return 0===t&&r!==e&&(null==r||r!=r)||0<t}function Jt(t,u,s,a){var e=Xt(t),t=new tt(s).map(function(t){return t.size});return e.size=a?t.max():t.min(),e.__iterate=function(t,e){for(var r,n=this.__iterator(K,e),i=0;!(r=n.next()).done&&!1!==t(r.value,i++,this););return i},e.__iteratorUncached=function(e,r){var n=s.map(function(t){return t=I(t),V(r?t.reverse():t)}),i=0,o=!1;return new P(function(){var t;return o||(t=n.map(function(t){return t.next()}),o=a?t.every(function(t){return t.done}):t.some(function(t){return t.done})),o?N():W(e,i++,u.apply(null,t.map(function(t){return t.value})))})},e}function Vt(t,e){return t===e?t:M(t)?e:t.constructor(e)}function Yt(t){if(t!==Object(t))throw new TypeError(\"Expected [K, V] tuple: \"+t)}function Qt(t){return a(t)?O:z(t)?E:j}function Xt(t){return Object.create((a(t)?G:z(t)?Z:$).prototype)}function Ft(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):F.prototype.cacheResult.call(this)}function Gt(t,e){return void 0===t&&void 0===e?0:void 0===t?1:void 0===e?-1:e<t?1:t<e?-1:0}function Zt(t,e){for(var r=Math.max(0,t.length-(e=e||0)),n=Array(r),i=0;i<r;i++)n[i]=t[i+e];return n}function $t(t,e){if(!t)throw Error(e)}function te(t){$t(t!==1/0,\"Cannot perform this action with an infinite size.\")}function ee(t){if(X(t)&&\"string\"!=typeof t)return t;if(R(t))return t.toArray();throw new TypeError(\"Invalid keyPath: expected Ordered Collection or Array: \"+t)}At.prototype.cacheResult=xt.prototype.cacheResult=kt.prototype.cacheResult=Rt.prototype.cacheResult=Ft\n;var re=Object.prototype.toString;function ne(t){if(!t||\"object\"!=typeof t||\"[object Object]\"!==re.call(t))return!1;t=Object.getPrototypeOf(t);if(null===t)return!0;for(var e=t,r=Object.getPrototypeOf(t);null!==r;)r=Object.getPrototypeOf(e=r);return e===t}function ie(t){return\"object\"==typeof t&&(A(t)||Array.isArray(t)||ne(t))}function oe(e){try{return\"string\"==typeof e?JSON.stringify(e):e+\"\"}catch(t){return JSON.stringify(e)}}function ue(t,e){return A(t)?t.has(e):ie(t)&&Q.call(t,e)}function se(t,e,r){return A(t)?t.get(e,r):ue(t,e)?\"function\"==typeof t.get?t.get(e):t[e]:r}function ae(t){if(Array.isArray(t))return Zt(t);var e,r={};for(e in t)Q.call(t,e)&&(r[e]=t[e]);return r}function ce(t,e){if(!ie(t))throw new TypeError(\"Cannot update non-data-structure value: \"+t);if(A(t)){if(!t.remove)throw new TypeError(\"Cannot update immutable value without .remove() method: \"+t);return t.remove(e)}if(!Q.call(t,e))return t;t=ae(t);return Array.isArray(t)?t.splice(e,1):delete t[e],t}function fe(t,e,r){if(!ie(t))throw new TypeError(\"Cannot update non-data-structure value: \"+t);if(A(t)){if(!t.set)throw new TypeError(\"Cannot update immutable value without .set() method: \"+t);return t.set(e,r)}if(Q.call(t,e)&&r===t[e])return t;t=ae(t);return t[e]=r,t}function he(t,e,r,n){n||(n=r,r=void 0);n=function t(e,r,n,i,o,u){var s=r===v;if(i===n.length){var a=s?o:r,c=u(a);return c===a?r:c}if(!s&&!ie(r))throw new TypeError(\"Cannot update within non-data-structure value in path [\"+n.slice(0,i).map(oe)+\"]: \"+r);var a=n[i];var c=s?v:se(r,a,v);var u=t(c===v?e:A(c),c,n,i+1,o,u);return u===c?r:u===v?ce(r,a):fe(s?e?Qe():{}:r,a,u)}(A(t),t,ee(e),0,r,n);return n===v?r:n}function _e(t,e,r){return he(t,e,v,function(){return r})}function pe(t,e){return _e(this,t,e)}function le(t,e){return he(t,e,function(){return v})}function ve(t){return le(this,t)}function ye(t,e,r,n){return he(t,[e],r,n)}function de(t,e,r){return 1===arguments.length?t(this):ye(this,t,e,r)}function ge(t,e,r){return he(this,t,e,r)}function me(){for(var t=[],e=arguments.length;e--;\n)t[e]=arguments[e];return Se(this,t)}function we(t){for(var e=[],r=arguments.length-1;0<r--;)e[r]=arguments[r+1];if(\"function\"!=typeof t)throw new TypeError(\"Invalid merger function: \"+t);return Se(this,e,t)}function Se(t,e,i){for(var r=[],n=0;n<e.length;n++){var o=O(e[n]);0!==o.size&&r.push(o)}return 0===r.length?t:0!==t.toSeq().size||t.__ownerID||1!==r.length?t.withMutations(function(n){for(var t=i?function(e,r){ye(n,r,v,function(t){return t===v?e:i(t,e,r)})}:function(t,e){n.set(e,t)},e=0;e<r.length;e++)r[e].forEach(t)}):t.constructor(r[0])}function ze(t){for(var e=[],r=arguments.length-1;0<r--;)e[r]=arguments[r+1];return je(t,e)}function be(t,e){for(var r=[],n=arguments.length-2;0<n--;)r[n]=arguments[n+2];return je(e,r,t)}function Ie(t){for(var e=[],r=arguments.length-1;0<r--;)e[r]=arguments[r+1];return Ee(t,e)}function Oe(t,e){for(var r=[],n=arguments.length-2;0<n--;)r[n]=arguments[n+2];return Ee(e,r,t)}function Ee(t,e,r){return je(t,e,(i=r,function t(e,r,n){return ie(e)&&ie(r)&&function(t,e){return t=F(t),e=F(e),z(t)===z(e)&&a(t)===a(e)}(e,r)?je(e,[r],t):i?i(e,r,n):r}));var i}function je(n,t,i){if(!ie(n))throw new TypeError(\"Cannot merge into non-data-structure value: \"+n);if(A(n))return\"function\"==typeof i&&n.mergeWith?n.mergeWith.apply(n,[i].concat(t)):(n.merge?n.merge:n.concat).apply(n,t);for(var e=Array.isArray(n),o=n,r=e?E:O,u=e?function(t){o===n&&(o=ae(o)),o.push(t)}:function(t,e){var r=Q.call(o,e),t=r&&i?i(o[e],t,e):t;r&&t===o[e]||(o===n&&(o=ae(o)),o[e]=t)},s=0;s<t.length;s++)r(t[s]).forEach(u);return o}function qe(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return Ee(this,t)}function Me(t){for(var e=[],r=arguments.length-1;0<r--;)e[r]=arguments[r+1];return Ee(this,e,t)}function De(t){for(var e=[],r=arguments.length-1;0<r--;)e[r]=arguments[r+1];return he(this,t,Qe(),function(t){return je(t,e)})}function xe(t){for(var e=[],r=arguments.length-1;0<r--;)e[r]=arguments[r+1];return he(this,t,Qe(),function(t){return Ee(t,e)})}function Ae(t){var e=this.asMutable();return t(e),e.wasAltered(\n)?e.__ensureOwner(this.__ownerID):this}function ke(){return this.__ownerID?this:this.__ensureOwner(new m)}function Re(){return this.__ensureOwner()}function Ue(){return this.__altered}var Ke=function(n){function t(e){return null==e?Qe():ct(e)&&!R(e)?e:Qe().withMutations(function(r){var t=n(e);te(t.size),t.forEach(function(t,e){return r.set(e,t)})})}return n&&(t.__proto__=n),((t.prototype=Object.create(n&&n.prototype)).constructor=t).of=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return Qe().withMutations(function(t){for(var e=0;e<r.length;e+=2){if(r.length<=e+1)throw Error(\"Missing value for key: \"+r[e]);t.set(r[e],r[e+1])}})},t.prototype.toString=function(){return this.__toString(\"Map {\",\"}\")},t.prototype.get=function(t,e){return this._root?this._root.get(0,void 0,t,e):e},t.prototype.set=function(t,e){return Xe(this,t,e)},t.prototype.remove=function(t){return Xe(this,t,v)},t.prototype.deleteAll=function(t){var r=I(t);return 0===r.size?this:this.withMutations(function(e){r.forEach(function(t){return e.remove(t)})})},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Qe()},t.prototype.sort=function(t){return wr(Wt(this,t))},t.prototype.sortBy=function(t,e){return wr(Wt(this,e,t))},t.prototype.map=function(n,i){var o=this;return this.withMutations(function(r){r.forEach(function(t,e){r.set(e,n.call(i,t,e,o))})})},t.prototype.__iterator=function(t,e){return new He(this,t,e)},t.prototype.__iterate=function(e,t){var r=this,n=0;return this._root&&this._root.iterate(function(t){return n++,e(t[1],t[0],r)},t),n},t.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Ye(this.size,this._root,t,this.__hash):0===this.size?Qe():(this.__ownerID=t,this.__altered=!1,this)},t}(O);Ke.isMap=ct;var Te=Ke.prototype;Te[at]=!0,Te[e]=Te.remove,Te.removeAll=Te.deleteAll,Te.setIn=pe,Te.removeIn=Te.deleteIn=ve,Te.update=de,Te.updateIn=ge,Te.merge=Te.concat=me,Te.mergeWith=we,Te.mergeDeep=qe,Te.mergeDeepWith=Me,\nTe.mergeIn=De,Te.mergeDeepIn=xe,Te.withMutations=Ae,Te.wasAltered=Ue,Te.asImmutable=Re,Te[\"@@transducer/init\"]=Te.asMutable=ke,Te[\"@@transducer/step\"]=function(t,e){return t.set(e[0],e[1])},Te[\"@@transducer/result\"]=function(t){return t.asImmutable()};var Ce=function(t,e){this.ownerID=t,this.entries=e};Ce.prototype.get=function(t,e,r,n){for(var i=this.entries,o=0,u=i.length;o<u;o++)if(_t(r,i[o][0]))return i[o][1];return n},Ce.prototype.update=function(t,e,r,n,i,o,u){for(var s=i===v,a=this.entries,c=0,f=a.length;c<f&&!_t(n,a[c][0]);c++);var h=c<f;if(h?a[c][1]===i:s)return this;if(_(u),!s&&h||_(o),!s||1!==a.length){if(!h&&!s&&er<=a.length)return function(t,e,r,n){t=t||new m;for(var i=new We(t,yt(r),[r,n]),o=0;o<e.length;o++){var u=e[o];i=i.update(t,0,void 0,u[0],u[1])}return i}(t,a,n,i);u=t&&t===this.ownerID,o=u?a:Zt(a);return h?s?c===f-1?o.pop():o[c]=o.pop():o[c]=[n,i]:o.push([n,i]),u?(this.entries=o,this):new Ce(t,o)}};var Le=function(t,e,r){this.ownerID=t,this.bitmap=e,this.nodes=r};Le.prototype.get=function(t,e,r,n){void 0===e&&(e=yt(r));var i=1<<((0===t?e:e>>>t)&g),o=this.bitmap;return 0==(o&i)?n:this.nodes[$e(o&i-1)].get(t+d,e,r,n)},Le.prototype.update=function(t,e,r,n,i,o,u){void 0===r&&(r=yt(n));var s=(0===e?r:r>>>e)&g,a=1<<s,c=this.bitmap,f=0!=(c&a);if(!f&&i===v)return this;var h=$e(c&a-1),_=this.nodes,p=f?_[h]:void 0,u=Fe(p,t,e+d,r,n,i,o,u);if(u===p)return this;if(!f&&u&&rr<=_.length)return function(t,e,r,n,i){for(var o=0,u=Array(l),s=0;0!==r;s++,r>>>=1)u[s]=1&r?e[o++]:void 0;return u[n]=i,new Be(t,o+1,u)}(t,_,c,s,u);if(f&&!u&&2===_.length&&Ge(_[1^h]))return _[1^h];if(f&&u&&1===_.length&&Ge(u))return u;s=t&&t===this.ownerID,a=f?u?c:c^a:c|a,u=f?u?tr(_,h,u,s):function(t,e,r){var n=t.length-1;if(r&&e===n)return t.pop(),t;for(var i=Array(n),o=0,u=0;u<n;u++)u===e&&(o=1),i[u]=t[u+o];return i}(_,h,s):function(t,e,r,n){var i=t.length+1;if(n&&e+1===i)return t[e]=r,t;for(var o=Array(i),u=0,s=0;s<i;s++)s===e?(o[s]=r,u=-1):o[s]=t[s+u];return o}(_,h,u,s);return s?(this.bitmap=a,this.nodes=u,this):new Le(t,a,u)}\n;var Be=function(t,e,r){this.ownerID=t,this.count=e,this.nodes=r};Be.prototype.get=function(t,e,r,n){void 0===e&&(e=yt(r));var i=this.nodes[(0===t?e:e>>>t)&g];return i?i.get(t+d,e,r,n):n},Be.prototype.update=function(t,e,r,n,i,o,u){void 0===r&&(r=yt(n));var s=(0===e?r:r>>>e)&g,a=this.nodes,c=a[s];if(i===v&&!c)return this;o=Fe(c,t,e+d,r,n,i,o,u);if(o===c)return this;u=this.count;if(c){if(!o&&--u<nr)return function(t,e,r,n){for(var i=0,o=0,u=Array(r),s=0,a=1,c=e.length;s<c;s++,a<<=1){var f=e[s];void 0!==f&&s!==n&&(i|=a,u[o++]=f)}return new Le(t,i,u)}(t,a,u,s)}else u++;c=t&&t===this.ownerID,o=tr(a,s,o,c);return c?(this.count=u,this.nodes=o,this):new Be(t,u,o)};var Pe=function(t,e,r){this.ownerID=t,this.keyHash=e,this.entries=r};Pe.prototype.get=function(t,e,r,n){for(var i=this.entries,o=0,u=i.length;o<u;o++)if(_t(r,i[o][0]))return i[o][1];return n},Pe.prototype.update=function(t,e,r,n,i,o,u){void 0===r&&(r=yt(n));var s=i===v;if(r!==this.keyHash)return s?this:(_(u),_(o),Ze(this,t,e,r,[n,i]));for(var a=this.entries,c=0,f=a.length;c<f&&!_t(n,a[c][0]);c++);r=c<f;if(r?a[c][1]===i:s)return this;if(_(u),!s&&r||_(o),s&&2===f)return new We(t,this.keyHash,a[1^c]);u=t&&t===this.ownerID,o=u?a:Zt(a);return r?s?c===f-1?o.pop():o[c]=o.pop():o[c]=[n,i]:o.push([n,i]),u?(this.entries=o,this):new Pe(t,this.keyHash,o)};var We=function(t,e,r){this.ownerID=t,this.keyHash=e,this.entry=r};We.prototype.get=function(t,e,r,n){return _t(r,this.entry[0])?this.entry[1]:n},We.prototype.update=function(t,e,r,n,i,o,u){var s=i===v,a=_t(n,this.entry[0]);return(a?i===this.entry[1]:s)?this:(_(u),s?void _(o):a?t&&t===this.ownerID?(this.entry[1]=i,this):new We(t,this.keyHash,[n,i]):(_(o),Ze(this,t,e,yt(n),[n,i])))},Ce.prototype.iterate=Pe.prototype.iterate=function(t,e){for(var r=this.entries,n=0,i=r.length-1;n<=i;n++)if(!1===t(r[e?i-n:n]))return!1},Le.prototype.iterate=Be.prototype.iterate=function(t,e){for(var r=this.nodes,n=0,i=r.length-1;n<=i;n++){var o=r[e?i-n:n];if(o&&!1===o.iterate(t,e))return!1}},We.prototype.iterate=function(t,e){return t(\nthis.entry)};var Ne,He=function(t){function e(t,e,r){this._type=e,this._reverse=r,this._stack=t._root&&Ve(t._root)}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).prototype.next=function(){for(var t=this._type,e=this._stack;e;){var r=e.node,n=e.index++,i=void 0;if(r.entry){if(0==n)return Je(t,r.entry)}else if(r.entries){if(n<=(i=r.entries.length-1))return Je(t,r.entries[this._reverse?i-n:n])}else if(n<=(i=r.nodes.length-1)){n=r.nodes[this._reverse?i-n:n];if(n){if(n.entry)return Je(t,n.entry);e=this._stack=Ve(n,e)}continue}e=this._stack=this._stack.__prev}return N()},e}(P);function Je(t,e){return W(t,e[0],e[1])}function Ve(t,e){return{node:t,index:0,__prev:e}}function Ye(t,e,r,n){var i=Object.create(Te);return i.size=t,i._root=e,i.__ownerID=r,i.__hash=n,i.__altered=!1,i}function Qe(){return Ne=Ne||Ye(0)}function Xe(t,e,r){if(t._root){var n=u(),i=u(),o=Fe(t._root,t.__ownerID,0,void 0,e,r,n,i);if(!i.value)return t;n=t.size+(n.value?r===v?-1:1:0)}else{if(r===v)return t;n=1,o=new Ce(t.__ownerID,[[e,r]])}return t.__ownerID?(t.size=n,t._root=o,t.__hash=void 0,t.__altered=!0,t):o?Ye(n,o):Qe()}function Fe(t,e,r,n,i,o,u,s){return t?t.update(e,r,n,i,o,u,s):o===v?t:(_(s),_(u),new We(e,n,[i,o]))}function Ge(t){return t.constructor===We||t.constructor===Pe}function Ze(t,e,r,n,i){if(t.keyHash===n)return new Pe(e,n,[t.entry,i]);var o=(0===r?t.keyHash:t.keyHash>>>r)&g,u=(0===r?n:n>>>r)&g,t=o==u?[Ze(t,e,r+d,n,i)]:(i=new We(e,n,i),o<u?[t,i]:[i,t]);return new Le(e,1<<o|1<<u,t)}function $e(t){return t=(t=(858993459&(t-=t>>1&1431655765))+(t>>2&858993459))+(t>>4)&252645135,t+=t>>8,127&(t+=t>>16)}function tr(t,e,r,n){t=n?t:Zt(t);return t[e]=r,t}var er=l/4,rr=l/2,nr=l/4,ir=\"@@__IMMUTABLE_LIST__@@\";function or(t){return!(!t||!t[ir])}var ur=function(o){function t(t){var e=pr();if(null==t)return e;if(or(t))return t;var n=o(t),i=n.size;return 0===i?e:(te(i),0<i&&i<l?_r(0,i,d,null,new ar(n.toArray())):e.withMutations(function(r){r.setSize(i),n.forEach(function(t,e){return r.set(e,t)})}))}return o&&(\nt.__proto__=o),((t.prototype=Object.create(o&&o.prototype)).constructor=t).of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString(\"List [\",\"]\")},t.prototype.get=function(t,e){if(0<=(t=h(this,t))&&t<this.size){var r=yr(this,t+=this._origin);return r&&r.array[t&g]}return e},t.prototype.set=function(t,e){return function(t,e,r){if((e=h(t,e))!==e)return t;if(t.size<=e||e<0)return t.withMutations(function(t){e<0?dr(t,e).set(0,r):dr(t,0,e+1).set(e,r)});var n=t._tail,i=t._root,o=u();(e+=t._origin)>=gr(t._capacity)?n=lr(n,t.__ownerID,0,e,r,o):i=lr(i,t.__ownerID,t._level,e,r,o);if(!o.value)return t;if(t.__ownerID)return t._root=i,t._tail=n,t.__hash=void 0,t.__altered=!0,t;return _r(t._origin,t._capacity,t._level,i,n)}(this,t,e)},t.prototype.remove=function(t){return this.has(t)?0===t?this.shift():t===this.size-1?this.pop():this.splice(t,1):this},t.prototype.insert=function(t,e){return this.splice(t,0,e)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=d,this._root=this._tail=this.__hash=void 0,this.__altered=!0,this):pr()},t.prototype.push=function(){var r=arguments,n=this.size;return this.withMutations(function(t){dr(t,0,n+r.length);for(var e=0;e<r.length;e++)t.set(n+e,r[e])})},t.prototype.pop=function(){return dr(this,0,-1)},t.prototype.unshift=function(){var r=arguments;return this.withMutations(function(t){dr(t,-r.length);for(var e=0;e<r.length;e++)t.set(e,r[e])})},t.prototype.shift=function(){return dr(this,1)},t.prototype.concat=function(){for(var t=arguments,r=[],e=0;e<arguments.length;e++){var n=t[e],n=o(\"string\"!=typeof n&&H(n)?n:[n]);0!==n.size&&r.push(n)}return 0===r.length?this:0!==this.size||this.__ownerID||1!==r.length?this.withMutations(function(e){r.forEach(function(t){return t.forEach(function(t){return e.push(t)})})}):this.constructor(r[0])},t.prototype.setSize=function(t){return dr(this,0,t)},t.prototype.map=function(r,n){var i=this;return this.withMutations(function(t){for(\nvar e=0;e<i.size;e++)t.set(e,r.call(n,t.get(e),e,i))})},t.prototype.slice=function(t,e){var r=this.size;return p(t,e,r)?this:dr(this,y(t,r),w(e,r))},t.prototype.__iterator=function(e,r){var n=r?this.size:0,i=hr(this,r);return new P(function(){var t=i();return t===fr?N():W(e,r?--n:n++,t)})},t.prototype.__iterate=function(t,e){for(var r,n=e?this.size:0,i=hr(this,e);(r=i())!==fr&&!1!==t(r,e?--n:n++,this););return n},t.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?_r(this._origin,this._capacity,this._level,this._root,this._tail,t,this.__hash):0===this.size?pr():(this.__ownerID=t,this.__altered=!1,this)},t}(E);ur.isList=or;var sr=ur.prototype;sr[ir]=!0,sr[e]=sr.remove,sr.merge=sr.concat,sr.setIn=pe,sr.deleteIn=sr.removeIn=ve,sr.update=de,sr.updateIn=ge,sr.mergeIn=De,sr.mergeDeepIn=xe,sr.withMutations=Ae,sr.wasAltered=Ue,sr.asImmutable=Re,sr[\"@@transducer/init\"]=sr.asMutable=ke,sr[\"@@transducer/step\"]=function(t,e){return t.push(e)},sr[\"@@transducer/result\"]=function(t){return t.asImmutable()};var ar=function(t,e){this.array=t,this.ownerID=e};ar.prototype.removeBefore=function(t,e,r){if(r===e?1<<e:0===this.array.length)return this;var n=r>>>e&g;if(this.array.length<=n)return new ar([],t);var i=0==n;if(0<e){var o,u=this.array[n];if((o=u&&u.removeBefore(t,e-d,r))===u&&i)return this}if(i&&!o)return this;var s=vr(this,t);if(!i)for(var a=0;a<n;a++)s.array[a]=void 0;return o&&(s.array[n]=o),s},ar.prototype.removeAfter=function(t,e,r){if(r===(e?1<<e:0)||0===this.array.length)return this;var n=r-1>>>e&g;if(this.array.length<=n)return this;if(0<e){var i,o=this.array[n];if((i=o&&o.removeAfter(t,e-d,r))===o&&n==this.array.length-1)return this}t=vr(this,t);return t.array.splice(1+n),i&&(t.array[n]=i),t};var cr,fr={};function hr(t,s){var a=t._origin,c=t._capacity,o=gr(c),u=t._tail;return f(t._root,t._level,0);function f(t,e,r){return 0===e?function(t,e){var r=e===o?u&&u.array:t&&t.array,n=a<e?0:a-e,i=c-e;l<i&&(i=l);return function(){if(n===i)return fr;var t=s?--i:n++;return r&&r[t]}}(t,r):function(t,e,r){\nvar n,i=t&&t.array,o=a<r?0:a-r>>e,u=1+(c-r>>e);l<u&&(u=l);return function(){for(;;){if(n){var t=n();if(t!==fr)return t;n=null}if(o===u)return fr;t=s?--u:o++;n=f(i&&i[t],e-d,r+(t<<e))}}}(t,e,r)}}function _r(t,e,r,n,i,o,u){var s=Object.create(sr);return s.size=e-t,s._origin=t,s._capacity=e,s._level=r,s._root=n,s._tail=i,s.__ownerID=o,s.__hash=u,s.__altered=!1,s}function pr(){return cr=cr||_r(0,0,d)}function lr(t,e,r,n,i,o){var u,s=n>>>r&g,a=t&&s<t.array.length;if(!a&&void 0===i)return t;if(0<r){var c=t&&t.array[s],n=lr(c,e,r-d,n,i,o);return n===c?t:((u=vr(t,e)).array[s]=n,u)}return a&&t.array[s]===i?t:(o&&_(o),u=vr(t,e),void 0===i&&s==u.array.length-1?u.array.pop():u.array[s]=i,u)}function vr(t,e){return e&&t&&e===t.ownerID?t:new ar(t?t.array.slice():[],e)}function yr(t,e){if(e>=gr(t._capacity))return t._tail;if(e<1<<t._level+d){for(var r=t._root,n=t._level;r&&0<n;)r=r.array[e>>>n&g],n-=d;return r}}function dr(t,e,r){void 0!==e&&(e|=0),void 0!==r&&(r|=0);var n=t.__ownerID||new m,i=t._origin,o=t._capacity,u=i+e,s=void 0===r?o:r<0?o+r:i+r;if(u===i&&s===o)return t;if(s<=u)return t.clear();for(var a=t._level,c=t._root,f=0;u+f<0;)c=new ar(c&&c.array.length?[void 0,c]:[],n),f+=1<<(a+=d);f&&(u+=f,i+=f,s+=f,o+=f);for(var h=gr(o),_=gr(s);1<<a+d<=_;)c=new ar(c&&c.array.length?[c]:[],n),a+=d;e=t._tail,r=_<h?yr(t,s-1):h<_?new ar([],n):e;if(e&&h<_&&u<o&&e.array.length){for(var p=c=vr(c,n),l=a;d<l;l-=d)var v=h>>>l&g,p=p.array[v]=vr(p.array[v],n);p.array[h>>>d&g]=e}if(s<o&&(r=r&&r.removeAfter(n,0,s)),_<=u)u-=_,s-=_,a=d,c=null,r=r&&r.removeBefore(n,0,u);else if(i<u||_<h){for(f=0;c;){var y=u>>>a&g;if(y!=_>>>a&g)break;y&&(f+=(1<<a)*y),a-=d,c=c.array[y]}c&&i<u&&(c=c.removeBefore(n,a,u-f)),c&&_<h&&(c=c.removeAfter(n,a,_-f)),f&&(u-=f,s-=f)}return t.__ownerID?(t.size=s-u,t._origin=u,t._capacity=s,t._level=a,t._root=c,t._tail=r,t.__hash=void 0,t.__altered=!0,t):_r(u,s,a,c,r)}function gr(t){return t<l?0:t-1>>>d<<d}var mr,wr=function(t){function e(e){return null==e?zr():ft(e)?e:zr().withMutations(function(r){var t=O(e);te(t.size),\nt.forEach(function(t,e){return r.set(e,t)})})}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).of=function(){return this(arguments)},e.prototype.toString=function(){return this.__toString(\"OrderedMap {\",\"}\")},e.prototype.get=function(t,e){t=this._map.get(t);return void 0!==t?this._list.get(t)[1]:e},e.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this.__altered=!0,this):zr()},e.prototype.set=function(t,e){return br(this,t,e)},e.prototype.remove=function(t){return br(this,t,v)},e.prototype.__iterate=function(e,t){var r=this;return this._list.__iterate(function(t){return t&&e(t[1],t[0],r)},t)},e.prototype.__iterator=function(t,e){return this._list.fromEntrySeq().__iterator(t,e)},e.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t),r=this._list.__ensureOwner(t);return t?Sr(e,r,t,this.__hash):0===this.size?zr():(this.__ownerID=t,this.__altered=!1,this._map=e,this._list=r,this)},e}(Ke);function Sr(t,e,r,n){var i=Object.create(wr.prototype);return i.size=t?t.size:0,i._map=t,i._list=e,i.__ownerID=r,i.__hash=n,i.__altered=!1,i}function zr(){return mr=mr||Sr(Qe(),pr())}function br(t,e,r){var n,i,o=t._map,u=t._list,s=o.get(e),a=void 0!==s;if(r===v){if(!a)return t;l<=u.size&&2*o.size<=u.size?(n=(i=u.filter(function(t,e){return void 0!==t&&s!==e})).toKeyedSeq().map(function(t){return t[0]}).flip().toMap(),t.__ownerID&&(n.__ownerID=i.__ownerID=t.__ownerID)):(n=o.remove(e),i=s===u.size-1?u.pop():u.set(s,void 0))}else if(a){if(r===u.get(s)[1])return t;n=o,i=u.set(s,[e,r])}else n=o.set(e,u.size),i=u.set(u.size,[e,r]);return t.__ownerID?(t.size=n.size,t._map=n,t._list=i,t.__hash=void 0,t.__altered=!0,t):Sr(n,i)}wr.isOrderedMap=ft,wr.prototype[k]=!0,wr.prototype[e]=wr.prototype.remove;var Ir=\"@@__IMMUTABLE_STACK__@@\";function Or(t){return!(!t||!t[Ir])}var Er=function(i){function t(t){return null==t?Dr():Or(t)?t:Dr().pushAll(t)}return i&&(t.__proto__=i),((\nt.prototype=Object.create(i&&i.prototype)).constructor=t).of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString(\"Stack [\",\"]\")},t.prototype.get=function(t,e){var r=this._head;for(t=h(this,t);r&&t--;)r=r.next;return r?r.value:e},t.prototype.peek=function(){return this._head&&this._head.value},t.prototype.push=function(){var t=arguments;if(0===arguments.length)return this;for(var e=this.size+arguments.length,r=this._head,n=arguments.length-1;0<=n;n--)r={value:t[n],next:r};return this.__ownerID?(this.size=e,this._head=r,this.__hash=void 0,this.__altered=!0,this):Mr(e,r)},t.prototype.pushAll=function(t){if(0===(t=i(t)).size)return this;if(0===this.size&&Or(t))return t;te(t.size);var e=this.size,r=this._head;return t.__iterate(function(t){e++,r={value:t,next:r}},!0),this.__ownerID?(this.size=e,this._head=r,this.__hash=void 0,this.__altered=!0,this):Mr(e,r)},t.prototype.pop=function(){return this.slice(1)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Dr()},t.prototype.slice=function(t,e){if(p(t,e,this.size))return this;var r=y(t,this.size);if(w(e,this.size)!==this.size)return i.prototype.slice.call(this,t,e);for(var e=this.size-r,n=this._head;r--;)n=n.next;return this.__ownerID?(this.size=e,this._head=n,this.__hash=void 0,this.__altered=!0,this):Mr(e,n)},t.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Mr(this.size,this._head,t,this.__hash):0===this.size?Dr():(this.__ownerID=t,this.__altered=!1,this)},t.prototype.__iterate=function(r,t){var n=this;if(t)return new tt(this.toArray()).__iterate(function(t,e){return r(t,e,n)},t);for(var e=0,i=this._head;i&&!1!==r(i.value,e++,this);)i=i.next;return e},t.prototype.__iterator=function(e,t){if(t)return new tt(this.toArray()).__iterator(e,t);var r=0,n=this._head;return new P(function(){if(n){var t=n.value;return n=n.next,W(e,r++,t)}return N()})},t}(E);Er.isStack=Or;var jr,qr=Er.prototype;function Mr(t,e,r,n){\nvar i=Object.create(qr);return i.size=t,i._head=e,i.__ownerID=r,i.__hash=n,i.__altered=!1,i}function Dr(){return jr=jr||Mr(0)}qr[Ir]=!0,qr.shift=qr.pop,qr.unshift=qr.push,qr.unshiftAll=qr.pushAll,qr.withMutations=Ae,qr.wasAltered=Ue,qr.asImmutable=Re,qr[\"@@transducer/init\"]=qr.asMutable=ke,qr[\"@@transducer/step\"]=function(t,e){return t.unshift(e)},qr[\"@@transducer/result\"]=function(t){return t.asImmutable()};var xr=\"@@__IMMUTABLE_SET__@@\";function Ar(t){return!(!t||!t[xr])}function kr(t){return Ar(t)&&R(t)}function Rr(r,t){if(r===t)return!0;if(!f(t)||void 0!==r.size&&void 0!==t.size&&r.size!==t.size||void 0!==r.__hash&&void 0!==t.__hash&&r.__hash!==t.__hash||a(r)!==a(t)||z(r)!==z(t)||R(r)!==R(t))return!1;if(0===r.size&&0===t.size)return!0;var n=!b(r);if(R(r)){var i=r.entries();return t.every(function(t,e){var r=i.next().value;return r&&_t(r[1],t)&&(n||_t(r[0],e))})&&i.next().done}var e,o=!1;void 0===r.size&&(void 0===t.size?\"function\"==typeof r.cacheResult&&r.cacheResult():(o=!0,e=r,r=t,t=e));var u=!0,t=t.__iterate(function(t,e){if(n?!r.has(t):o?!_t(t,r.get(e,v)):!_t(r.get(e,v),t))return u=!1});return u&&r.size===t}function Ur(e,r){function t(t){e.prototype[t]=r[t]}return Object.keys(r).forEach(t),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(r).forEach(t),e}function Kr(t){if(!t||\"object\"!=typeof t)return t;if(!f(t)){if(!ie(t))return t;t=F(t)}if(a(t)){var r={};return t.__iterate(function(t,e){r[e]=Kr(t)}),r}var e=[];return t.__iterate(function(t){e.push(Kr(t))}),e}var Tr=function(n){function e(r){return null==r?Wr():Ar(r)&&!R(r)?r:Wr().withMutations(function(e){var t=n(r);te(t.size),t.forEach(function(t){return e.add(t)})})}return n&&(e.__proto__=n),((e.prototype=Object.create(n&&n.prototype)).constructor=e).of=function(){return this(arguments)},e.fromKeys=function(t){return this(O(t).keySeq())},e.intersect=function(t){return(t=I(t).toArray()).length?Lr.intersect.apply(e(t.pop()),t):Wr()},e.union=function(t){return(t=I(t).toArray()).length?Lr.union.apply(e(t.pop()),t):Wr()},\ne.prototype.toString=function(){return this.__toString(\"Set {\",\"}\")},e.prototype.has=function(t){return this._map.has(t)},e.prototype.add=function(t){return Br(this,this._map.set(t,t))},e.prototype.remove=function(t){return Br(this,this._map.remove(t))},e.prototype.clear=function(){return Br(this,this._map.clear())},e.prototype.map=function(r,n){var i=this,o=!1,t=Br(this,this._map.mapEntries(function(t){var e=t[1],t=r.call(n,e,e,i);return t!==e&&(o=!0),[t,t]},n));return o?t:this},e.prototype.union=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return 0===(r=r.filter(function(t){return 0!==t.size})).length?this:0!==this.size||this.__ownerID||1!==r.length?this.withMutations(function(e){for(var t=0;t<r.length;t++)\"string\"==typeof r[t]?e.add(r[t]):n(r[t]).forEach(function(t){return e.add(t)})}):this.constructor(r[0])},e.prototype.intersect=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(0===t.length)return this;t=t.map(function(t){return n(t)});var r=[];return this.forEach(function(e){t.every(function(t){return t.includes(e)})||r.push(e)}),this.withMutations(function(e){r.forEach(function(t){e.remove(t)})})},e.prototype.subtract=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(0===t.length)return this;t=t.map(function(t){return n(t)});var r=[];return this.forEach(function(e){t.some(function(t){return t.includes(e)})&&r.push(e)}),this.withMutations(function(e){r.forEach(function(t){e.remove(t)})})},e.prototype.sort=function(t){return an(Wt(this,t))},e.prototype.sortBy=function(t,e){return an(Wt(this,e,t))},e.prototype.wasAltered=function(){return this._map.wasAltered()},e.prototype.__iterate=function(e,t){var r=this;return this._map.__iterate(function(t){return e(t,t,r)},t)},e.prototype.__iterator=function(t,e){return this._map.__iterator(t,e)},e.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t);return t?this.__make(e,t):0===this.size?this.__empty():(this.__ownerID=t,this._map=e,this)},e}(j);Tr.isSet=Ar\n;var Cr,Lr=Tr.prototype;function Br(t,e){return t.__ownerID?(t.size=e.size,t._map=e,t):e===t._map?t:0===e.size?t.__empty():t.__make(e)}function Pr(t,e){var r=Object.create(Lr);return r.size=t?t.size:0,r._map=t,r.__ownerID=e,r}function Wr(){return Cr=Cr||Pr(Qe())}Lr[xr]=!0,Lr[e]=Lr.remove,Lr.merge=Lr.concat=Lr.union,Lr.withMutations=Ae,Lr.asImmutable=Re,Lr[\"@@transducer/init\"]=Lr.asMutable=ke,Lr[\"@@transducer/step\"]=function(t,e){return t.add(e)},Lr[\"@@transducer/result\"]=function(t){return t.asImmutable()},Lr.__empty=Wr,Lr.__make=Pr;var Nr,Hr=function(t){function n(t,e,r){if(!(this instanceof n))return new n(t,e,r);if($t(0!==r,\"Cannot step a Range by 0\"),t=t||0,void 0===e&&(e=1/0),r=void 0===r?1:Math.abs(r),e<t&&(r=-r),this._start=t,this._end=e,this._step=r,this.size=Math.max(0,1+Math.ceil((e-t)/r-1)),0===this.size){if(Nr)return Nr;Nr=this}}return t&&(n.__proto__=t),((n.prototype=Object.create(t&&t.prototype)).constructor=n).prototype.toString=function(){return 0===this.size?\"Range []\":\"Range [ \"+this._start+\"...\"+this._end+(1!==this._step?\" by \"+this._step:\"\")+\" ]\"},n.prototype.get=function(t,e){return this.has(t)?this._start+h(this,t)*this._step:e},n.prototype.includes=function(t){t=(t-this._start)/this._step;return 0<=t&&t<this.size&&t==Math.floor(t)},n.prototype.slice=function(t,e){return p(t,e,this.size)?this:(t=y(t,this.size),(e=w(e,this.size))<=t?new n(0,0):new n(this.get(t,this._end),this.get(e,this._end),this._step))},n.prototype.indexOf=function(t){t-=this._start;if(t%this._step==0){t=t/this._step;if(0<=t&&t<this.size)return t}return-1},n.prototype.lastIndexOf=function(t){return this.indexOf(t)},n.prototype.__iterate=function(t,e){for(var r=this.size,n=this._step,i=e?this._start+(r-1)*n:this._start,o=0;o!==r&&!1!==t(i,e?r-++o:o++,this);)i+=e?-n:n;return o},n.prototype.__iterator=function(e,r){var n=this.size,i=this._step,o=r?this._start+(n-1)*i:this._start,u=0;return new P(function(){if(u===n)return N();var t=o;return o+=r?-i:i,W(e,r?n-++u:u++,t)})},n.prototype.equals=function(t){\nreturn t instanceof n?this._start===t._start&&this._end===t._end&&this._step===t._step:Rr(this,t)},n}(Z);function Jr(t,e,r){for(var n=ee(e),i=0;i!==n.length;)if((t=se(t,n[i++],v))===v)return r;return t}function Vr(t,e){return Jr(this,t,e)}function Yr(t,e){return Jr(t,e,v)!==v}function Qr(){te(this.size);var r={};return this.__iterate(function(t,e){r[e]=t}),r}I.isIterable=f,I.isKeyed=a,I.isIndexed=z,I.isAssociative=b,I.isOrdered=R,I.Iterator=P,Ur(I,{toArray:function(){te(this.size);var r=Array(this.size||0),n=a(this),i=0;return this.__iterate(function(t,e){r[i++]=n?[e,t]:t}),r},toIndexedSeq:function(){return new At(this)},toJS:function(){return Kr(this)},toKeyedSeq:function(){return new xt(this,!0)},toMap:function(){return Ke(this.toKeyedSeq())},toObject:Qr,toOrderedMap:function(){return wr(this.toKeyedSeq())},toOrderedSet:function(){return an(a(this)?this.valueSeq():this)},toSet:function(){return Tr(a(this)?this.valueSeq():this)},toSetSeq:function(){return new kt(this)},toSeq:function(){return z(this)?this.toIndexedSeq():a(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return Er(a(this)?this.valueSeq():this)},toList:function(){return ur(a(this)?this.valueSeq():this)},toString:function(){return\"[Collection]\"},__toString:function(t,e){return 0===this.size?t+e:t+\" \"+this.toSeq().map(this.__toStringMapper).join(\", \")+\" \"+e},concat:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return Vt(this,function(t,e){var r=a(t);if(0===(e=[t].concat(e).map(function(t){return f(t)?r&&(t=O(t)):t=r?ot(t):ut(Array.isArray(t)?t:[t]),t}).filter(function(t){return 0!==t.size})).length)return t;if(1===e.length){var n=e[0];if(n===t||r&&a(n)||z(t)&&z(n))return n}return n=new tt(e),r?n=n.toKeyedSeq():z(t)||(n=n.toSetSeq()),(n=n.flatten(!0)).size=e.reduce(function(t,e){if(void 0!==t){e=e.size;if(void 0!==e)return t+e}},0),n}(this,t))},includes:function(e){return this.some(function(t){return _t(t,e)})},entries:function(){return this.__iterator(T)},every:function(n,i){te(this.size);var o=!0\n;return this.__iterate(function(t,e,r){if(!n.call(i,t,e,r))return o=!1}),o},filter:function(t,e){return Vt(this,Ct(this,t,e,!0))},partition:function(t,e){return function(r,n,i){var o=a(r),u=[[],[]];r.__iterate(function(t,e){u[n.call(i,t,e,r)?1:0].push(o?[e,t]:t)});var e=Qt(r);return u.map(function(t){return Vt(r,e(t))})}(this,t,e)},find:function(t,e,r){e=this.findEntry(t,e);return e?e[1]:r},forEach:function(t,e){return te(this.size),this.__iterate(e?t.bind(e):t)},join:function(e){te(this.size),e=void 0!==e?\"\"+e:\",\";var r=\"\",n=!0;return this.__iterate(function(t){n?n=!1:r+=e,r+=null!=t?\"\"+t:\"\"}),r},keys:function(){return this.__iterator(U)},map:function(t,e){return Vt(this,Kt(this,t,e))},reduce:function(t,e,r){return $r(this,t,e,r,arguments.length<2,!1)},reduceRight:function(t,e,r){return $r(this,t,e,r,arguments.length<2,!0)},reverse:function(){return Vt(this,Tt(this,!0))},slice:function(t,e){return Vt(this,Lt(this,t,e,!0))},some:function(t,e){return!this.every(rn(t),e)},sort:function(t){return Vt(this,Wt(this,t))},values:function(){return this.__iterator(K)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(t,e){return c(t?this.toSeq().filter(t,e):this)},countBy:function(t,e){return r=this,n=t,i=e,o=Ke().asMutable(),r.__iterate(function(t,e){o.update(n.call(i,t,e,r),0,function(t){return t+1})}),o.asImmutable();var r,n,i,o},equals:function(t){return Rr(this,t)},entrySeq:function(){var t=this;if(t._cache)return new tt(t._cache);var e=t.toSeq().map(en).toIndexedSeq();return e.fromEntrySeq=function(){return t.toSeq()},e},filterNot:function(t,e){return this.filter(rn(t),e)},findEntry:function(n,i,t){var o=t;return this.__iterate(function(t,e,r){if(n.call(i,t,e,r))return!(o=[e,t])}),o},findKey:function(t,e){e=this.findEntry(t,e);return e&&e[0]},findLast:function(t,e,r){return this.toKeyedSeq().reverse().find(t,e,r)},findLastEntry:function(t,e,r){return this.toKeyedSeq().reverse().findEntry(t,e,r)},findLastKey:function(\nt,e){return this.toKeyedSeq().reverse().findKey(t,e)},first:function(t){return this.find(r,null,t)},flatMap:function(t,e){return Vt(this,(n=t,i=e,o=Qt(r=this),r.toSeq().map(function(t,e){return o(n.call(i,t,e,r))}).flatten(!0)));var r,n,i,o},flatten:function(t){return Vt(this,Pt(this,t,!0))},fromEntrySeq:function(){return new Rt(this)},get:function(r,t){return this.find(function(t,e){return _t(e,r)},void 0,t)},getIn:Vr,groupBy:function(t,e){return function(n,t,i){var o=a(n),u=(R(n)?wr:Ke)().asMutable();n.__iterate(function(e,r){u.update(t.call(i,e,r,n),function(t){return(t=t||[]).push(o?[r,e]:e),t})});var e=Qt(n);return u.map(function(t){return Vt(n,e(t))}).asImmutable()}(this,t,e)},has:function(t){return this.get(t,v)!==v},hasIn:function(t){return Yr(this,t)},isSubset:function(e){return e=\"function\"==typeof e.includes?e:I(e),this.every(function(t){return e.includes(t)})},isSuperset:function(t){return(t=\"function\"==typeof t.isSubset?t:I(t)).isSubset(this)},keyOf:function(e){return this.findKey(function(t){return _t(t,e)})},keySeq:function(){return this.toSeq().map(tn).toIndexedSeq()},last:function(t){return this.toSeq().reverse().first(t)},lastKeyOf:function(t){return this.toKeyedSeq().reverse().keyOf(t)},max:function(t){return Nt(this,t)},maxBy:function(t,e){return Nt(this,e,t)},min:function(t){return Nt(this,t?nn(t):un)},minBy:function(t,e){return Nt(this,e?nn(e):un,t)},rest:function(){return this.slice(1)},skip:function(t){return 0===t?this:this.slice(Math.max(0,t))},skipLast:function(t){return 0===t?this:this.slice(0,-Math.max(0,t))},skipWhile:function(t,e){return Vt(this,Bt(this,t,e,!0))},skipUntil:function(t,e){return this.skipWhile(rn(t),e)},sortBy:function(t,e){return Vt(this,Wt(this,e,t))},take:function(t){return this.slice(0,Math.max(0,t))},takeLast:function(t){return this.slice(-Math.max(0,t))},takeWhile:function(t,e){return Vt(this,(s=t,a=e,(e=Xt(r=this)).__iterateUncached=function(n,t){var i=this;if(t)return this.cacheResult().__iterate(n,t);var o=0;return r.__iterate(function(t,e,r){return s.call(a,\nt,e,r)&&++o&&n(t,e,i)}),o},e.__iteratorUncached=function(n,t){var i=this;if(t)return this.cacheResult().__iterator(n,t);var o=r.__iterator(T,t),u=!0;return new P(function(){if(!u)return N();var t=o.next();if(t.done)return t;var e=t.value,r=e[0],e=e[1];return s.call(a,e,r,i)?n===T?t:W(n,r,e,t):(u=!1,N())})},e));var r,s,a},takeUntil:function(t,e){return this.takeWhile(rn(t),e)},update:function(t){return t(this)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(t){if(t.size===1/0)return 0;var e=R(t),r=a(t),n=e?1:0;return function(t,e){return e=pt(e,3432918353),e=pt(e<<15|e>>>-15,461845907),e=pt(e<<13|e>>>-13,5),e=pt((e=(e+3864292196|0)^t)^e>>>16,2246822507),e=lt((e=pt(e^e>>>13,3266489909))^e>>>16)}(t.__iterate(r?e?function(t,e){n=31*n+sn(yt(t),yt(e))|0}:function(t,e){n=n+sn(yt(t),yt(e))|0}:e?function(t){n=31*n+yt(t)|0}:function(t){n=n+yt(t)|0}),n)}(this))}});var Xr=I.prototype;Xr[o]=!0,Xr[B]=Xr.values,Xr.toJSON=Xr.toArray,Xr.__toStringMapper=oe,Xr.inspect=Xr.toSource=function(){return\"\"+this},Xr.chain=Xr.flatMap,Xr.contains=Xr.includes,Ur(O,{flip:function(){return Vt(this,Ut(this))},mapEntries:function(r,n){var i=this,o=0;return Vt(this,this.toSeq().map(function(t,e){return r.call(n,[e,t],o++,i)}).fromEntrySeq())},mapKeys:function(r,n){var i=this;return Vt(this,this.toSeq().flip().map(function(t,e){return r.call(n,t,e,i)}).flip())}});var Fr=O.prototype;Fr[s]=!0,Fr[B]=Xr.entries,Fr.toJSON=Qr,Fr.__toStringMapper=function(t,e){return oe(e)+\": \"+oe(t)},Ur(E,{toKeyedSeq:function(){return new xt(this,!1)},filter:function(t,e){return Vt(this,Ct(this,t,e,!1))},findIndex:function(t,e){e=this.findEntry(t,e);return e?e[0]:-1},indexOf:function(t){t=this.keyOf(t);return void 0===t?-1:t},lastIndexOf:function(t){t=this.lastKeyOf(t);return void 0===t?-1:t},reverse:function(){return Vt(this,Tt(this,!1))},slice:function(t,e){return Vt(this,Lt(this,t,e,!1))},splice:function(t,e){var r=arguments.length;if(e=Math.max(e||0,0),0===r||2===r&&!e)return this;t=y(t,t<0?this.count(\n):this.size);var n=this.slice(0,t);return Vt(this,1===r?n:n.concat(Zt(arguments,2),this.slice(t+e)))},findLastIndex:function(t,e){e=this.findLastEntry(t,e);return e?e[0]:-1},first:function(t){return this.get(0,t)},flatten:function(t){return Vt(this,Pt(this,t,!1))},get:function(r,t){return(r=h(this,r))<0||this.size===1/0||void 0!==this.size&&this.size<r?t:this.find(function(t,e){return e===r},void 0,t)},has:function(t){return 0<=(t=h(this,t))&&(void 0!==this.size?this.size===1/0||t<this.size:!!~this.indexOf(t))},interpose:function(t){return Vt(this,(u=t,(t=Xt(o=this)).size=o.size&&2*o.size-1,t.__iterateUncached=function(e,t){var r=this,n=0;return o.__iterate(function(t){return(!n||!1!==e(u,n++,r))&&!1!==e(t,n++,r)},t),n},t.__iteratorUncached=function(t,e){var r,n=o.__iterator(K,e),i=0;return new P(function(){return(!r||i%2)&&(r=n.next()).done?r:i%2?W(t,i++,u):W(t,i++,r.value,r)})},t));var o,u},interleave:function(){var t=[this].concat(Zt(arguments)),e=Jt(this.toSeq(),Z.of,t),r=e.flatten(!0);return e.size&&(r.size=e.size*t.length),Vt(this,r)},keySeq:function(){return Hr(0,this.size)},last:function(t){return this.get(-1,t)},skipWhile:function(t,e){return Vt(this,Bt(this,t,e,!1))},zip:function(){var t=[this].concat(Zt(arguments));return Vt(this,Jt(this,on,t))},zipAll:function(){var t=[this].concat(Zt(arguments));return Vt(this,Jt(this,on,t,!0))},zipWith:function(t){var e=Zt(arguments);return Vt(e[0]=this,Jt(this,t,e))}});var Gr=E.prototype;Gr[S]=!0,Gr[k]=!0,Ur(j,{get:function(t,e){return this.has(t)?t:e},includes:function(t){return this.has(t)},keySeq:function(){return this.valueSeq()}});var Zr=j.prototype;function $r(t,n,i,o,u,e){return te(t.size),t.__iterate(function(t,e,r){i=u?(u=!1,t):n.call(o,i,t,e,r)},e),i}function tn(t,e){return e}function en(t,e){return[e,t]}function rn(t){return function(){return!t.apply(this,arguments)}}function nn(t){return function(){return-t.apply(this,arguments)}}function on(){return Zt(arguments)}function un(t,e){return t<e?1:e<t?-1:0}function sn(t,e){return t^e+2654435769+(t<<6)+(t>>2\n)|0}Zr.has=Xr.includes,Zr.contains=Zr.includes,Zr.keys=Zr.values,Ur(G,Fr),Ur(Z,Gr),Ur($,Zr);var an=function(t){function e(r){return null==r?_n():kr(r)?r:_n().withMutations(function(e){var t=j(r);te(t.size),t.forEach(function(t){return e.add(t)})})}return t&&(e.__proto__=t),((e.prototype=Object.create(t&&t.prototype)).constructor=e).of=function(){return this(arguments)},e.fromKeys=function(t){return this(O(t).keySeq())},e.prototype.toString=function(){return this.__toString(\"OrderedSet {\",\"}\")},e}(Tr);an.isOrderedSet=kr;var cn,fn=an.prototype;function hn(t,e){var r=Object.create(fn);return r.size=t?t.size:0,r._map=t,r.__ownerID=e,r}function _n(){return cn=cn||hn(zr())}fn[k]=!0,fn.zip=Gr.zip,fn.zipWith=Gr.zipWith,fn.zipAll=Gr.zipAll,fn.__empty=_n,fn.__make=hn;Gr=function(u,s){var a;!function(t){if(x(t))throw Error(\"Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.\");if(A(t))throw Error(\"Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.\");if(null===t||\"object\"!=typeof t)throw Error(\"Can not call `Record` with a non-object as default values. Use a plain javascript object instead.\")}(u);var c=function(t){var n=this;if(t instanceof c)return t;if(!(this instanceof c))return new c(t);if(!a){a=!0;var e=Object.keys(u),r=f._indices={};f._name=s,f._keys=e,f._defaultValues=u;for(var i=0;i<e.length;i++){var o=e[i];r[o]=i,f[o]?\"object\"==typeof console&&console.warn&&console.warn(\"Cannot define \"+vn(this)+' with property \"'+o+'\" since that property name is part of the Record API.'):function(t,e){try{Object.defineProperty(t,e,{get:function(){return this.get(e)},set:function(t){$t(this.__ownerID,\"Cannot set on an immutable record.\"),this.set(e,t)}})}catch(t){}}(f,o)}}return this.__ownerID=void 0,this._values=ur().withMutations(function(r){r.setSize(n._keys.length),O(t).forEach(function(t,e){r.set(n._indices[e],t===n._defaultValues[e]?void 0:t)})}),this},f=c.prototype=Object.create(pn);return f.constructor=c,s&&(\nc.displayName=s),c};Gr.prototype.toString=function(){for(var t,e=vn(this)+\" { \",r=this._keys,n=0,i=r.length;n!==i;n++)e+=(n?\", \":\"\")+(t=r[n])+\": \"+oe(this.get(t));return e+\" }\"},Gr.prototype.equals=function(t){return this===t||x(t)&&yn(this).equals(yn(t))},Gr.prototype.hashCode=function(){return yn(this).hashCode()},Gr.prototype.has=function(t){return this._indices.hasOwnProperty(t)},Gr.prototype.get=function(t,e){if(!this.has(t))return e;e=this._values.get(this._indices[t]);return void 0===e?this._defaultValues[t]:e},Gr.prototype.set=function(t,e){if(this.has(t)){e=this._values.set(this._indices[t],e===this._defaultValues[t]?void 0:e);if(e!==this._values&&!this.__ownerID)return ln(this,e)}return this},Gr.prototype.remove=function(t){return this.set(t)},Gr.prototype.clear=function(){var t=this._values.clear().setSize(this._keys.length);return this.__ownerID?this:ln(this,t)},Gr.prototype.wasAltered=function(){return this._values.wasAltered()},Gr.prototype.toSeq=function(){return yn(this)},Gr.prototype.toJS=function(){return Kr(this)},Gr.prototype.entries=function(){return this.__iterator(T)},Gr.prototype.__iterator=function(t,e){return yn(this).__iterator(t,e)},Gr.prototype.__iterate=function(t,e){return yn(this).__iterate(t,e)},Gr.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._values.__ensureOwner(t);return t?ln(this,e,t):(this.__ownerID=t,this._values=e,this)},Gr.isRecord=x,Gr.getDescriptiveName=vn;var pn=Gr.prototype;function ln(t,e,r){t=Object.create(Object.getPrototypeOf(t));return t._values=e,t.__ownerID=r,t}function vn(t){return t.constructor.displayName||t.constructor.name||\"Record\"}function yn(e){return ot(e._keys.map(function(t){return[t,e.get(t)]}))}pn[D]=!0,pn[e]=pn.remove,pn.deleteIn=pn.removeIn=ve,pn.getIn=Vr,pn.hasIn=Xr.hasIn,pn.merge=me,pn.mergeWith=we,pn.mergeIn=De,pn.mergeDeep=qe,pn.mergeDeepWith=Me,pn.mergeDeepIn=xe,pn.setIn=pe,pn.update=de,pn.updateIn=ge,pn.withMutations=Ae,pn.asMutable=ke,pn.asImmutable=Re,pn[B]=pn.entries,pn.toJSON=pn.toObject=Xr.toObject,\npn.inspect=pn.toSource=function(){return\"\"+this};var dn,e=function(t){function n(t,e){if(!(this instanceof n))return new n(t,e);if(this._value=t,this.size=void 0===e?1/0:Math.max(0,e),0===this.size){if(dn)return dn;dn=this}}return t&&(n.__proto__=t),((n.prototype=Object.create(t&&t.prototype)).constructor=n).prototype.toString=function(){return 0===this.size?\"Repeat []\":\"Repeat [ \"+this._value+\" \"+this.size+\" times ]\"},n.prototype.get=function(t,e){return this.has(t)?this._value:e},n.prototype.includes=function(t){return _t(this._value,t)},n.prototype.slice=function(t,e){var r=this.size;return p(t,e,r)?this:new n(this._value,w(e,r)-y(t,r))},n.prototype.reverse=function(){return this},n.prototype.indexOf=function(t){return _t(this._value,t)?0:-1},n.prototype.lastIndexOf=function(t){return _t(this._value,t)?this.size:-1},n.prototype.__iterate=function(t,e){for(var r=this.size,n=0;n!==r&&!1!==t(this._value,e?r-++n:n++,this););return n},n.prototype.__iterator=function(t,e){var r=this,n=this.size,i=0;return new P(function(){return i===n?N():W(t,e?n-++i:i++,r._value)})},n.prototype.equals=function(t){return t instanceof n?_t(this._value,t._value):Rr(t)},n}(Z);function gn(t,e){return function r(n,i,o,t,u,e){if(\"string\"!=typeof o&&!A(o)&&(X(o)||H(o)||ne(o))){if(~n.indexOf(o))throw new TypeError(\"Cannot convert circular structure to Immutable\");n.push(o),u&&\"\"!==t&&u.push(t);var t=i.call(e,t,F(o).map(function(t,e){return r(n,i,t,e,u,o)}),u&&u.slice());return n.pop(),u&&u.pop(),t}return o}([],e||mn,t,\"\",e&&2<e.length?[]:void 0,{\"\":t})}function mn(t,e){return z(e)?e.toList():a(e)?e.toMap():e.toSet()}B={version:\"4.2.4\",Collection:I,Iterable:I,Seq:F,Map:Ke,OrderedMap:wr,List:ur,Stack:Er,Set:Tr,OrderedSet:an,Record:Gr,Range:Hr,Repeat:e,is:_t,fromJS:gn,hash:yt,isImmutable:A,isCollection:f,isKeyed:a,isIndexed:z,isAssociative:b,isOrdered:R,isValueObject:ht,isPlainObject:ne,isSeq:M,isList:or,isMap:ct,isOrderedMap:ft,isStack:Or,isSet:Ar,isOrderedSet:kr,isRecord:x,get:se,getIn:Jr,has:ue,hasIn:Yr,merge:ze,mergeDeep:Ie,mergeWith:be,\nmergeDeepWith:Oe,remove:ce,removeIn:le,set:fe,setIn:_e,update:ye,updateIn:he},Xr=I;t.Collection=I,t.Iterable=Xr,t.List=ur,t.Map=Ke,t.OrderedMap=wr,t.OrderedSet=an,t.Range=Hr,t.Record=Gr,t.Repeat=e,t.Seq=F,t.Set=Tr,t.Stack=Er,t.default=B,t.fromJS=gn,t.get=se,t.getIn=Jr,t.has=ue,t.hasIn=Yr,t.hash=yt,t.is=_t,t.isAssociative=b,t.isCollection=f,t.isImmutable=A,t.isIndexed=z,t.isKeyed=a,t.isList=or,t.isMap=ct,t.isOrdered=R,t.isOrderedMap=ft,t.isOrderedSet=kr,t.isPlainObject=ne,t.isRecord=x,t.isSeq=M,t.isSet=Ar,t.isStack=Or,t.isValueObject=ht,t.merge=ze,t.mergeDeep=Ie,t.mergeDeepWith=Oe,t.mergeWith=be,t.remove=ce,t.removeIn=le,t.set=fe,t.setIn=_e,t.update=ye,t.updateIn=he,t.version=\"4.2.4\",Object.defineProperty(t,\"__esModule\",{value:!0})});"}}}},"LICENSE":{"file":{"contents":"MIT License\n\nCopyright (c) 2014-present, Lee Byron and other contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"}},"package.json":{"file":{"contents":"{\n  \"name\": \"immutable\",\n  \"version\": \"4.2.4\",\n  \"description\": \"Immutable Data Collections\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://immutable-js.com\",\n  \"author\": {\n    \"name\": \"Lee Byron\",\n    \"url\": \"https://github.com/leebyron\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/immutable-js/immutable-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/immutable-js/immutable-js/issues\"\n  },\n  \"main\": \"dist/immutable.js\",\n  \"module\": \"dist/immutable.es.js\",\n  \"sideEffects\": false,\n  \"types\": \"dist/immutable.d.ts\",\n  \"files\": [\n    \"dist\",\n    \"README.md\",\n    \"LICENSE\"\n  ],\n  \"keywords\": [\n    \"immutable\",\n    \"persistent\",\n    \"lazy\",\n    \"data\",\n    \"datastructure\",\n    \"functional\",\n    \"collection\",\n    \"stateless\",\n    \"sequence\",\n    \"iteration\"\n  ]\n}"}},"README.md":{"file":{"contents":"# Immutable collections for JavaScript\n\n[![Build Status](https://github.com/immutable-js/immutable-js/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/immutable-js/immutable-js/actions/workflows/ci.yml?query=branch%3Amain) [Chat on slack](https://immutable-js.slack.com)\n\n[Read the docs](https://immutable-js.com) and eat your vegetables.\n\nDocs are automatically generated from [README.md][] and [immutable.d.ts][].\nPlease contribute! Also, don't miss the [wiki][] which contains articles on\nadditional specific topics. Can't find something? Open an [issue][].\n\n**Table of contents:**\n\n- [Introduction](#introduction)\n- [Getting started](#getting-started)\n- [The case for Immutability](#the-case-for-immutability)\n- [JavaScript-first API](#javaScript-first-api)\n- [Nested Structures](#nested-structures)\n- [Equality treats Collections as Values](#equality-treats-collections-as-values)\n- [Batching Mutations](#batching-mutations)\n- [Lazy Seq](#lazy-seq)\n- [Additional Tools and Resources](#additional-tools-and-resources)\n- [Contributing](#contributing)\n\n## Introduction\n\n[Immutable][] data cannot be changed once created, leading to much simpler\napplication development, no defensive copying, and enabling advanced memoization\nand change detection techniques with simple logic. [Persistent][] data presents\na mutative API which does not update the data in-place, but instead always\nyields new updated data.\n\nImmutable.js provides many Persistent Immutable data structures including:\n`List`, `Stack`, `Map`, `OrderedMap`, `Set`, `OrderedSet` and `Record`.\n\nThese data structures are highly efficient on modern JavaScript VMs by using\nstructural sharing via [hash maps tries][] and [vector tries][] as popularized\nby Clojure and Scala, minimizing the need to copy or cache data.\n\nImmutable.js also provides a lazy `Seq`, allowing efficient\nchaining of collection methods like `map` and `filter` without creating\nintermediate representations. Create some `Seq` with `Range` and `Repeat`.\n\nWant to hear more? Watch the presentation about Immutable.js:\n\n[![Immutable Data and React](website/public/Immutable-Data-and-React-YouTube.png)](https://youtu.be/I7IdS-PbEgI)\n\n[README.md]: https://github.com/immutable-js/immutable-js/blob/main/README.md\n[immutable.d.ts]: https://github.com/immutable-js/immutable-js/blob/main/type-definitions/immutable.d.ts\n[wiki]: https://github.com/immutable-js/immutable-js/wiki\n[issue]: https://github.com/immutable-js/immutable-js/issues\n[Persistent]: https://en.wikipedia.org/wiki/Persistent_data_structure\n[Immutable]: https://en.wikipedia.org/wiki/Immutable_object\n[hash maps tries]: https://en.wikipedia.org/wiki/Hash_array_mapped_trie\n[vector tries]: https://hypirion.com/musings/understanding-persistent-vector-pt-1\n\n## Getting started\n\nInstall `immutable` using npm.\n\n```shell\nnpm install immutable\n```\n\nOr install using yarn.\n\n```shell\nyarn add immutable\n```\n\nThen require it into any module.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = map1.set('b', 50);\nmap1.get('b') + ' vs. ' + map2.get('b'); // 2 vs. 50\n```\n\n### Browser\n\nImmutable.js has no dependencies, which makes it predictable to include in a Browser.\n\nIt's highly recommended to use a module bundler like [webpack](https://webpack.github.io/),\n[rollup](https://rollupjs.org/), or\n[browserify](https://browserify.org/). The `immutable` npm module works\nwithout any additional consideration. All examples throughout the documentation\nwill assume use of this kind of tool.\n\nAlternatively, Immutable.js may be directly included as a script tag. Download\nor link to a CDN such as [CDNJS](https://cdnjs.com/libraries/immutable)\nor [jsDelivr](https://www.jsdelivr.com/package/npm/immutable).\n\nUse a script tag to directly add `Immutable` to the global scope:\n\n```html\n<script src=\"immutable.min.js\"></script>\n<script>\n  var map1 = Immutable.Map({ a: 1, b: 2, c: 3 });\n  var map2 = map1.set('b', 50);\n  map1.get('b'); // 2\n  map2.get('b'); // 50\n</script>\n```\n\nOr use an AMD-style loader (such as [RequireJS](https://requirejs.org/)):\n\n```js\nrequire(['./immutable.min.js'], function (Immutable) {\n  var map1 = Immutable.Map({ a: 1, b: 2, c: 3 });\n  var map2 = map1.set('b', 50);\n  map1.get('b'); // 2\n  map2.get('b'); // 50\n});\n```\n\n### Flow & TypeScript\n\nUse these Immutable collections and sequences as you would use native\ncollections in your [Flowtype](https://flowtype.org/) or [TypeScript](https://typescriptlang.org) programs while still taking\nadvantage of type generics, error detection, and auto-complete in your IDE.\n\nInstalling `immutable` via npm brings with it type definitions for Flow (v0.55.0 or higher)\nand TypeScript (v2.1.0 or higher), so you shouldn't need to do anything at all!\n\n#### Using TypeScript with Immutable.js v4\n\nImmutable.js type definitions embrace ES2015. While Immutable.js itself supports\nlegacy browsers and environments, its type definitions require TypeScript's 2015\nlib. Include either `\"target\": \"es2015\"` or `\"lib\": \"es2015\"` in your\n`tsconfig.json`, or provide `--target es2015` or `--lib es2015` to the\n`tsc` command.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = map1.set('b', 50);\nmap1.get('b') + ' vs. ' + map2.get('b'); // 2 vs. 50\n```\n\n#### Using TypeScript with Immutable.js v3 and earlier:\n\nPrevious versions of Immutable.js include a reference file which you can include\nvia relative path to the type definitions at the top of your file.\n\n```js\n///<reference path='./node_modules/immutable/dist/immutable.d.ts'/>\nimport Immutable from 'immutable';\nvar map1: Immutable.Map<string, number>;\nmap1 = Immutable.Map({ a: 1, b: 2, c: 3 });\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n## The case for Immutability\n\nMuch of what makes application development difficult is tracking mutation and\nmaintaining state. Developing with immutable data encourages you to think\ndifferently about how data flows through your application.\n\nSubscribing to data events throughout your application creates a huge overhead of\nbook-keeping which can hurt performance, sometimes dramatically, and creates\nopportunities for areas of your application to get out of sync with each other\ndue to easy to make programmer error. Since immutable data never changes,\nsubscribing to changes throughout the model is a dead-end and new data can only\never be passed from above.\n\nThis model of data flow aligns well with the architecture of [React][]\nand especially well with an application designed using the ideas of [Flux][].\n\nWhen data is passed from above rather than being subscribed to, and you're only\ninterested in doing work when something has changed, you can use equality.\n\nImmutable collections should be treated as _values_ rather than _objects_. While\nobjects represent some thing which could change over time, a value represents\nthe state of that thing at a particular instance of time. This principle is most\nimportant to understanding the appropriate use of immutable data. In order to\ntreat Immutable.js collections as values, it's important to use the\n`Immutable.is()` function or `.equals()` method to determine _value equality_\ninstead of the `===` operator which determines object _reference identity_.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = Map({ a: 1, b: 2, c: 3 });\nmap1.equals(map2); // true\nmap1 === map2; // false\n```\n\nNote: As a performance optimization Immutable.js attempts to return the existing\ncollection when an operation would result in an identical collection, allowing\nfor using `===` reference equality to determine if something definitely has not\nchanged. This can be extremely useful when used within a memoization function\nwhich would prefer to re-run the function if a deeper equality check could\npotentially be more costly. The `===` equality check is also used internally by\n`Immutable.is` and `.equals()` as a performance optimization.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = map1.set('b', 2); // Set to same value\nmap1 === map2; // true\n```\n\nIf an object is immutable, it can be \"copied\" simply by making another reference\nto it instead of copying the entire object. Because a reference is much smaller\nthan the object itself, this results in memory savings and a potential boost in\nexecution speed for programs which rely on copies (such as an undo-stack).\n\n<!-- runkit:activate -->\n\n```js\nconst { Map } = require('immutable');\nconst map = Map({ a: 1, b: 2, c: 3 });\nconst mapCopy = map; // Look, \"copies\" are free!\n```\n\n[React]: https://reactjs.org/\n[Flux]: https://facebook.github.io/flux/docs/in-depth-overview/\n\n\n## JavaScript-first API\n\nWhile Immutable.js is inspired by Clojure, Scala, Haskell and other functional\nprogramming environments, it's designed to bring these powerful concepts to\nJavaScript, and therefore has an Object-Oriented API that closely mirrors that\nof [ES2015][] [Array][], [Map][], and [Set][].\n\n[es2015]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\n[array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n[map]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n[set]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\nThe difference for the immutable collections is that methods which would mutate\nthe collection, like `push`, `set`, `unshift` or `splice`, instead return a new\nimmutable collection. Methods which return new arrays, like `slice` or `concat`,\ninstead return new immutable collections.\n\n<!-- runkit:activate -->\n\n```js\nconst { List } = require('immutable');\nconst list1 = List([1, 2]);\nconst list2 = list1.push(3, 4, 5);\nconst list3 = list2.unshift(0);\nconst list4 = list1.concat(list2, list3);\nassert.equal(list1.size, 2);\nassert.equal(list2.size, 5);\nassert.equal(list3.size, 6);\nassert.equal(list4.size, 13);\nassert.equal(list4.get(0), 1);\n```\n\nAlmost all of the methods on [Array][] will be found in similar form on\n`Immutable.List`, those of [Map][] found on `Immutable.Map`, and those of [Set][]\nfound on `Immutable.Set`, including collection operations like `forEach()`\nand `map()`.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map } = require('immutable');\nconst alpha = Map({ a: 1, b: 2, c: 3, d: 4 });\nalpha.map((v, k) => k.toUpperCase()).join();\n// 'A,B,C,D'\n```\n\n### Convert from raw JavaScript objects and arrays.\n\nDesigned to inter-operate with your existing JavaScript, Immutable.js\naccepts plain JavaScript Arrays and Objects anywhere a method expects a\n`Collection`.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map, List } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3, d: 4 });\nconst map2 = Map({ c: 10, a: 20, t: 30 });\nconst obj = { d: 100, o: 200, g: 300 };\nconst map3 = map1.merge(map2, obj);\n// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }\nconst list1 = List([1, 2, 3]);\nconst list2 = List([4, 5, 6]);\nconst array = [7, 8, 9];\nconst list3 = list1.concat(list2, array);\n// List [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\nThis is possible because Immutable.js can treat any JavaScript Array or Object\nas a Collection. You can take advantage of this in order to get sophisticated\ncollection methods on JavaScript Objects, which otherwise have a very sparse\nnative API. Because Seq evaluates lazily and does not cache intermediate\nresults, these operations can be extremely efficient.\n\n<!-- runkit:activate -->\n\n```js\nconst { Seq } = require('immutable');\nconst myObject = { a: 1, b: 2, c: 3 };\nSeq(myObject)\n  .map(x => x * x)\n  .toObject();\n// { a: 1, b: 4, c: 9 }\n```\n\nKeep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a quote-less\nshorthand, while Immutable Maps accept keys of any type.\n\n<!-- runkit:activate -->\n\n```js\nconst { fromJS } = require('immutable');\n\nconst obj = { 1: 'one' };\nconsole.log(Object.keys(obj)); // [ \"1\" ]\nconsole.log(obj['1'], obj[1]); // \"one\", \"one\"\n\nconst map = fromJS(obj);\nconsole.log(map.get('1'), map.get(1)); // \"one\", undefined\n```\n\nProperty access for JavaScript Objects first converts the key to a string, but\nsince Immutable Map keys can be of any type the argument to `get()` is\nnot altered.\n\n### Converts back to raw JavaScript objects.\n\nAll Immutable.js Collections can be converted to plain JavaScript Arrays and\nObjects shallowly with `toArray()` and `toObject()` or deeply with `toJS()`.\nAll Immutable Collections also implement `toJSON()` allowing them to be passed\nto `JSON.stringify` directly. They also respect the custom `toJSON()` methods of\nnested objects.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map, List } = require('immutable');\nconst deep = Map({ a: 1, b: 2, c: List([3, 4, 5]) });\nconsole.log(deep.toObject()); // { a: 1, b: 2, c: List [ 3, 4, 5 ] }\nconsole.log(deep.toArray()); // [ 1, 2, List [ 3, 4, 5 ] ]\nconsole.log(deep.toJS()); // { a: 1, b: 2, c: [ 3, 4, 5 ] }\nJSON.stringify(deep); // '{\"a\":1,\"b\":2,\"c\":[3,4,5]}'\n```\n\n### Embraces ES2015\n\nImmutable.js supports all JavaScript environments, including legacy\nbrowsers (even IE11). However it also takes advantage of features added to\nJavaScript in [ES2015][], the latest standard version of JavaScript, including\n[Iterators][], [Arrow Functions][], [Classes][], and [Modules][]. It's inspired\nby the native [Map][] and [Set][] collections added to ES2015.\n\nAll examples in the Documentation are presented in ES2015. To run in all\nbrowsers, they need to be translated to ES5.\n\n```js\n// ES2015\nconst mapped = foo.map(x => x * x);\n// ES5\nvar mapped = foo.map(function (x) {\n  return x * x;\n});\n```\n\nAll Immutable.js collections are [Iterable][iterators], which allows them to be\nused anywhere an Iterable is expected, such as when spreading into an Array.\n\n<!-- runkit:activate -->\n\n```js\nconst { List } = require('immutable');\nconst aList = List([1, 2, 3]);\nconst anArray = [0, ...aList, 4, 5]; // [ 0, 1, 2, 3, 4, 5 ]\n```\n\nNote: A Collection is always iterated in the same order, however that order may\nnot always be well defined, as is the case for the `Map` and `Set`.\n\n[Iterators]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n[Arrow Functions]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n[Classes]: https://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\n[Modules]: https://www.2ality.com/2014/09/es6-modules-final.html\n\n\n## Nested Structures\n\nThe collections in Immutable.js are intended to be nested, allowing for deep\ntrees of data, similar to JSON.\n\n<!-- runkit:activate -->\n\n```js\nconst { fromJS } = require('immutable');\nconst nested = fromJS({ a: { b: { c: [3, 4, 5] } } });\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }\n```\n\nA few power-tools allow for reading and operating on nested data. The\nmost useful are `mergeDeep`, `getIn`, `setIn`, and `updateIn`, found on `List`,\n`Map` and `OrderedMap`.\n\n<!-- runkit:activate -->\n\n```js\nconst { fromJS } = require('immutable');\nconst nested = fromJS({ a: { b: { c: [3, 4, 5] } } });\n\nconst nested2 = nested.mergeDeep({ a: { b: { d: 6 } } });\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n\nconsole.log(nested2.getIn(['a', 'b', 'd'])); // 6\n\nconst nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\nconsole.log(nested3);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nconst nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n## Equality treats Collections as Values\n\nImmutable.js collections are treated as pure data _values_. Two immutable\ncollections are considered _value equal_ (via `.equals()` or `is()`) if they\nrepresent the same collection of values. This differs from JavaScript's typical\n_reference equal_ (via `===` or `==`) for Objects and Arrays which only\ndetermines if two variables represent references to the same object instance.\n\nConsider the example below where two identical `Map` instances are not\n_reference equal_ but are _value equal_.\n\n<!-- runkit:activate -->\n\n```js\n// First consider:\nconst obj1 = { a: 1, b: 2, c: 3 };\nconst obj2 = { a: 1, b: 2, c: 3 };\nobj1 !== obj2; // two different instances are always not equal with ===\n\nconst { Map, is } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = Map({ a: 1, b: 2, c: 3 });\nmap1 !== map2; // two different instances are not reference-equal\nmap1.equals(map2); // but are value-equal if they have the same values\nis(map1, map2); // alternatively can use the is() function\n```\n\nValue equality allows Immutable.js collections to be used as keys in Maps or\nvalues in Sets, and retrieved with different but equivalent collections:\n\n<!-- runkit:activate -->\n\n```js\nconst { Map, Set } = require('immutable');\nconst map1 = Map({ a: 1, b: 2, c: 3 });\nconst map2 = Map({ a: 1, b: 2, c: 3 });\nconst set = Set().add(map1);\nset.has(map2); // true because these are value-equal\n```\n\nNote: `is()` uses the same measure of equality as [Object.is][] for scalar\nstrings and numbers, but uses value equality for Immutable collections,\ndetermining if both are immutable and all keys and values are equal\nusing the same measure of equality.\n\n[object.is]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\n#### Performance tradeoffs\n\nWhile value equality is useful in many circumstances, it has different\nperformance characteristics than reference equality. Understanding these\ntradeoffs may help you decide which to use in each case, especially when used\nto memoize some operation.\n\nWhen comparing two collections, value equality may require considering every\nitem in each collection, on an `O(N)` time complexity. For large collections of\nvalues, this could become a costly operation. Though if the two are not equal\nand hardly similar, the inequality is determined very quickly. In contrast, when\ncomparing two collections with reference equality, only the initial references\nto memory need to be compared which is not based on the size of the collections,\nwhich has an `O(1)` time complexity. Checking reference equality is always very\nfast, however just because two collections are not reference-equal does not rule\nout the possibility that they may be value-equal.\n\n#### Return self on no-op optimization\n\nWhen possible, Immutable.js avoids creating new objects for updates where no\nchange in _value_ occurred, to allow for efficient _reference equality_ checking\nto quickly determine if no change occurred.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map } = require('immutable');\nconst originalMap = Map({ a: 1, b: 2, c: 3 });\nconst updatedMap = originalMap.set('b', 2);\nupdatedMap === originalMap; // No-op .set() returned the original reference.\n```\n\nHowever updates which do result in a change will return a new reference. Each\nof these operations occur independently, so two similar updates will not return\nthe same reference:\n\n<!-- runkit:activate -->\n\n```js\nconst { Map } = require('immutable');\nconst originalMap = Map({ a: 1, b: 2, c: 3 });\nconst updatedMap = originalMap.set('b', 1000);\n// New instance, leaving the original immutable.\nupdatedMap !== originalMap;\nconst anotherUpdatedMap = originalMap.set('b', 1000);\n// Despite both the results of the same operation, each created a new reference.\nanotherUpdatedMap !== updatedMap;\n// However the two are value equal.\nanotherUpdatedMap.equals(updatedMap);\n```\n\n## Batching Mutations\n\n> If a tree falls in the woods, does it make a sound?\n>\n> If a pure function mutates some local data in order to produce an immutable\n> return value, is that ok?\n>\n> — Rich Hickey, Clojure\n\nApplying a mutation to create a new immutable object results in some overhead,\nwhich can add up to a minor performance penalty. If you need to apply a series\nof mutations locally before returning, Immutable.js gives you the ability to\ncreate a temporary mutable (transient) copy of a collection and apply a batch of\nmutations in a performant manner by using `withMutations`. In fact, this is\nexactly how Immutable.js applies complex mutations itself.\n\nAs an example, building `list2` results in the creation of 1, not 3, new\nimmutable Lists.\n\n<!-- runkit:activate -->\n\n```js\nconst { List } = require('immutable');\nconst list1 = List([1, 2, 3]);\nconst list2 = list1.withMutations(function (list) {\n  list.push(4).push(5).push(6);\n});\nassert.equal(list1.size, 3);\nassert.equal(list2.size, 6);\n```\n\nNote: Immutable.js also provides `asMutable` and `asImmutable`, but only\nencourages their use when `withMutations` will not suffice. Use caution to not\nreturn a mutable copy, which could result in undesired behavior.\n\n_Important!_: Only a select few methods can be used in `withMutations` including\n`set`, `push` and `pop`. These methods can be applied directly against a\npersistent data-structure where other methods like `map`, `filter`, `sort`,\nand `splice` will always return new immutable data-structures and never mutate\na mutable collection.\n\n## Lazy Seq\n\n`Seq` describes a lazy operation, allowing them to efficiently chain\nuse of all the higher-order collection methods (such as `map` and `filter`)\nby not creating intermediate collections.\n\n**Seq is immutable** — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any mutative\nmethod called on a `Seq` will return a new `Seq`.\n\n**Seq is lazy** — `Seq` does as little work as necessary to respond to any\nmethod call. Values are often created during iteration, including implicit\niteration when reducing or converting to a concrete data structure such as\na `List` or JavaScript `Array`.\n\nFor example, the following performs no work, because the resulting\n`Seq`'s values are never iterated:\n\n```js\nconst { Seq } = require('immutable');\nconst oddSquares = Seq([1, 2, 3, 4, 5, 6, 7, 8])\n  .filter(x => x % 2 !== 0)\n  .map(x => x * x);\n```\n\nOnce the `Seq` is used, it performs only the work necessary. In this\nexample, no intermediate arrays are ever created, filter is called three\ntimes, and map is only called once:\n\n```js\noddSquares.get(1); // 9\n```\n\nAny collection can be converted to a lazy Seq with `Seq()`.\n\n<!-- runkit:activate -->\n\n```js\nconst { Map, Seq } = require('immutable');\nconst map = Map({ a: 1, b: 2, c: 3 });\nconst lazySeq = Seq(map);\n```\n\n`Seq` allows for the efficient chaining of operations, allowing for the\nexpression of logic that can otherwise be very tedious:\n\n```js\nlazySeq\n  .flip()\n  .map(key => key.toUpperCase())\n  .flip();\n// Seq { A: 1, B: 2, C: 3 }\n```\n\nAs well as expressing logic that would otherwise seem memory or time\nlimited, for example `Range` is a special kind of Lazy sequence.\n\n<!-- runkit:activate -->\n\n```js\nconst { Range } = require('immutable');\nRange(1, Infinity)\n  .skip(1000)\n  .map(n => -n)\n  .filter(n => n % 2 === 0)\n  .take(2)\n  .reduce((r, n) => r * n, 1);\n// 1006008\n```\n\n## Comparison of filter(), groupBy(), and partition()\n\nThe `filter()`, `groupBy()`, and `partition()` methods are similar in that they\nall divide a collection into parts based on applying a function to each element.\nAll three call the predicate or grouping function once for each item in the\ninput collection.  All three return zero or more collections of the same type as\ntheir input.  The returned collections are always distinct from the input\n(according to `===`), even if the contents are identical.\n\nOf these methods, `filter()` is the only one that is lazy and the only one which\ndiscards items from the input collection. It is the simplest to use, and the\nfact that it returns exactly one collection makes it easy to combine with other\nmethods to form a pipeline of operations.\n\nThe `partition()` method is similar to an eager version of `filter()`, but it\nreturns two collections; the first contains the items that would have been\ndiscarded by `filter()`, and the second contains the items that would have been\nkept.  It always returns an array of exactly two collections, which can make it\neasier to use than `groupBy()`.  Compared to making two separate calls to\n`filter()`, `partition()` makes half as many calls it the predicate passed to\nit.\n\nThe `groupBy()` method is a more generalized version of `partition()` that can\ngroup by an arbitrary function rather than just a predicate.  It returns a map\nwith zero or more entries, where the keys are the values returned by the\ngrouping function, and the values are nonempty collections of the corresponding\narguments.  Although `groupBy()` is more powerful than `partition()`, it can be\nharder to use because it is not always possible predict in advance how many\nentries the returned map will have and what their keys will be.\n\n| Summary                       | `filter` | `partition` | `groupBy`      |\n|:------------------------------|:---------|:------------|:---------------|\n| ease of use                   | easiest  | moderate    | hardest        |\n| generality                    | least    | moderate    | most           |\n| laziness                      | lazy     | eager       | eager          |\n| # of returned sub-collections | 1        | 2           | 0 or more      |\n| sub-collections may be empty  | yes      | yes         | no             |\n| can discard items             | yes      | no          | no             |\n| wrapping container            | none     | array       | Map/OrderedMap |\n\n## Additional Tools and Resources\n\n- [Atom-store](https://github.com/jameshopkins/atom-store/)\n  - A Clojure-inspired atom implementation in Javascript with configurability\n    for external persistance.\n\n- [Chai Immutable](https://github.com/astorije/chai-immutable)\n  - If you are using the [Chai Assertion Library](https://chaijs.com/), this\n    provides a set of assertions to use against Immutable.js collections.\n\n- [Fantasy-land](https://github.com/fantasyland/fantasy-land)\n  - Specification for interoperability of common algebraic structures in JavaScript.\n\n- [Immutagen](https://github.com/pelotom/immutagen)\n  - A library for simulating immutable generators in JavaScript.\n\n- [Immutable-cursor](https://github.com/redbadger/immutable-cursor)\n  - Immutable cursors incorporating the Immutable.js interface over\n  Clojure-inspired atom.\n\n- [Immutable-ext](https://github.com/DrBoolean/immutable-ext)\n  - Fantasyland extensions for immutablejs\n\n- [Immutable-js-tools](https://github.com/madeinfree/immutable-js-tools)\n  - Util tools for immutable.js\n\n- [Immutable-Redux](https://github.com/gajus/redux-immutable)\n  - redux-immutable is used to create an equivalent function of Redux\n  combineReducers that works with Immutable.js state.\n\n- [Immutable-Treeutils](https://github.com/lukasbuenger/immutable-treeutils)\n  - Functional tree traversal helpers for ImmutableJS data structures.\n\n- [Irecord](https://github.com/ericelliott/irecord)\n  - An immutable store that exposes an RxJS observable. Great for React.\n\n- [Mudash](https://github.com/brianneisler/mudash)\n  - Lodash wrapper providing Immutable.JS support.\n\n- [React-Immutable-PropTypes](https://github.com/HurricaneJames/react-immutable-proptypes)\n  - PropType validators that work with Immutable.js.\n\n- [Redux-Immutablejs](https://github.com/indexiatech/redux-immutablejs)\n  - Redux Immutable facilities.\n\n- [Rxstate](https://github.com/yamalight/rxstate)\n  - Simple opinionated state management library based on RxJS and Immutable.js.\n\n- [Transit-Immutable-js](https://github.com/glenjamin/transit-immutable-js)\n  - Transit serialisation for Immutable.js.\n  - See also: [Transit-js](https://github.com/cognitect/transit-js)\n\nHave an additional tool designed to work with Immutable.js?\nSubmit a PR to add it to this list in alphabetical order.\n\n## Contributing\n\nUse [Github issues](https://github.com/immutable-js/immutable-js/issues) for requests.\n\nWe actively welcome pull requests, learn how to [contribute](https://github.com/immutable-js/immutable-js/blob/main/.github/CONTRIBUTING.md).\n\nImmutable.js is maintained within the [Contributor Covenant's Code of Conduct](https://www.contributor-covenant.org/version/2/0/code_of_conduct/).\n\n### Changelog\n\nChanges are tracked as [Github releases](https://github.com/immutable-js/immutable-js/releases).\n\n### License\n\nImmutable.js is [MIT-licensed](./LICENSE).\n\n### Thanks\n\n[Phil Bagwell](https://www.youtube.com/watch?v=K2NYwP90bNs), for his inspiration\nand research in persistent data structures.\n\n[Hugh Jackson](https://github.com/hughfdjackson/), for providing the npm package\nname. If you're looking for his unsupported package, see [this repository](https://github.com/hughfdjackson/immutable).\n"}}}}