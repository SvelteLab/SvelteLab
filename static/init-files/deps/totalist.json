{"directory":{"dist":{"directory":{"index.js":{"file":{"contents":"const { join, resolve } = require('path');\nconst { readdir, stat } = require('fs');\nconst { promisify } = require('util');\n\nconst toStats = promisify(stat);\nconst toRead = promisify(readdir);\n\nasync function totalist(dir, callback, pre='') {\n\tdir = resolve('.', dir);\n\tawait toRead(dir).then(arr => {\n\t\treturn Promise.all(\n\t\t\tarr.map(str => {\n\t\t\t\tlet abs = join(dir, str);\n\t\t\t\treturn toStats(abs).then(stats => {\n\t\t\t\t\treturn stats.isDirectory()\n\t\t\t\t\t\t? totalist(abs, callback, join(pre, str))\n\t\t\t\t\t\t: callback(join(pre, str), abs, stats)\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t});\n}\n\nexports.totalist = totalist;"}},"index.mjs":{"file":{"contents":"import { join, resolve } from 'path';\nimport { readdir, stat } from 'fs';\nimport { promisify } from 'util';\n\nconst toStats = promisify(stat);\nconst toRead = promisify(readdir);\n\nexport async function totalist(dir, callback, pre='') {\n\tdir = resolve('.', dir);\n\tawait toRead(dir).then(arr => {\n\t\treturn Promise.all(\n\t\t\tarr.map(str => {\n\t\t\t\tlet abs = join(dir, str);\n\t\t\t\treturn toStats(abs).then(stats => {\n\t\t\t\t\treturn stats.isDirectory()\n\t\t\t\t\t\t? totalist(abs, callback, join(pre, str))\n\t\t\t\t\t\t: callback(join(pre, str), abs, stats)\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t});\n}\n"}}}},"index.d.ts":{"file":{"contents":"import { Stats } from 'fs';\nexport type Caller = (relPath: string, absPath: string, stats: Stats) => any;\nexport function totalist(dir: string, callback: Caller, prefix?: string): Promise<void>;\n"}},"license":{"file":{"contents":"The MIT License (MIT)\n\nCopyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"}},"package.json":{"file":{"contents":"{\n  \"name\": \"totalist\",\n  \"version\": \"3.0.0\",\n  \"repository\": \"lukeed/totalist\",\n  \"description\": \"A tiny (195B to 220B) utility to recursively list all (total) files in a directory\",\n  \"module\": \"dist/index.mjs\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.js\"\n    },\n    \"./sync\": {\n      \"import\": \"./sync/index.mjs\",\n      \"require\": \"./sync/index.js\"\n    }\n  },\n  \"license\": \"MIT\",\n  \"files\": [\n    \"index.d.ts\",\n    \"dist\",\n    \"sync\"\n  ],\n  \"author\": {\n    \"name\": \"Luke Edwards\",\n    \"email\": \"luke.edwards05@gmail.com\",\n    \"url\": \"https://lukeed.com\"\n  },\n  \"engines\": {\n    \"node\": \">=6\"\n  },\n  \"keywords\": [\n    \"list\",\n    \"recursive\",\n    \"files\",\n    \"glob\",\n    \"tree\"\n  ],\n  \"scripts\": {\n    \"build\": \"bundt\",\n    \"test\": \"uvu -r esm test -i fixtures\"\n  },\n  \"modes\": {\n    \"sync\": \"src/sync.js\",\n    \"default\": \"src/async.js\"\n  },\n  \"devDependencies\": {\n    \"bundt\": \"1.1.1\",\n    \"esm\": \"3.2.25\",\n    \"uvu\": \"0.3.3\"\n  }\n}\n"}},"readme.md":{"file":{"contents":"# totalist [![build status](https://badgen.now.sh/github/status/lukeed/totalist)](https://github.com/lukeed/totalist/actions) [![codecov](https://badgen.now.sh/codecov/c/github/lukeed/totalist)](https://codecov.io/gh/lukeed/totalist)\n\n> A tiny (195B to 224B) utility to recursively list all (total) files in a directory\n\nTraverse a directory recursively, running a function for **every file** found.\n\nWith this module, you easily apply custom logic to decide which file(s) to process without worrying about accidentally accessing a directory or making repeat `fs.Stats` requests.\n\n## Install\n\n```\n$ npm install --save totalist\n```\n\n\n## Modes\n\nThere are two \"versions\" of `totalist` available:\n\n#### \"async\"\n> **Node.js:** >= 8.x<br>\n> **Size (gzip):** 220 bytes<br>\n> **Availability:** [CommonJS](https://unpkg.com/totalist/dist/index.js), [ES Module](https://unpkg.com/totalist/dist/index.mjs)\n\nThis is the primary/default mode. It makes use of `async`/`await` and [`util.promisify`](https://nodejs.org/api/util.html#util_util_promisify_original).\n\n#### \"sync\"\n> **Node.js:** >= 6.x<br>\n> **Size (gzip):** 195 bytes<br>\n> **Availability:** [CommonJS](https://unpkg.com/totalist/sync/index.js), [ES Module](https://unpkg.com/totalist/sync/index.mjs)\n\nThis is the opt-in mode, ideal for scenarios where `async` usage cannot be supported.\n\n\n## Usage\n\n***Selecting a Mode***\n\n```js\n// import via npm module\nimport { totalist } from 'totalist';\nimport { totalist } from 'totalist/sync';\n```\n\n***Example Usage***\n\n```js\nimport { totalist } from 'totalist/sync';\n\nconst styles = new Set();\nconst scripts = new Set();\n\ntotalist('src', (name, abs, stats) => {\n  if (/\\.js$/.test(name)) {\n    scripts.add(abs);\n    if (stats.size >= 100e3) {\n      console.warn(`[WARN] \"${name}\" might cause performance issues (${stats.size})`);\n    }\n  } else if (/\\.css$/.test(name)) {\n    styles.add(abs);\n  }\n});\n\nconsole.log([...scripts]);\n//=> [..., '/Users/lukeed/.../src/path/to/example.css', ...]\n```\n\n\n## API\n\n### totalist(dir, callback)\nReturns: `void`\n\n> **Important:** The \"async\" usage must be `await`ed or included within a Promise chain.\n\n#### dir\nType: `string`<br>\nRequired: `true`\n\nThe directory to traverse.\n\nThis may be a relative _or_ an absolute path.\n\n> **Note**: Node.js will assume a relative path is meant to be resolved from the current location (`process.cwd()`).\n\n#### callback\nType: `Function`<br>\nRequired: `true`\n\nThe callback function to run for _every_ file.\n\nThe function receives three parameters:\n\n##### relPath\nType: `String`<br>\nThe path _relative to_ the initial `dir` value you provided.\n\n##### absPath\nType: `String`<br>\nThe absolute path of the file.\n\n##### stats\nType: `fs.Stats`<br>\nThe [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) object for the file.\n\n\n## License\n\nMIT Â© [Luke Edwards](https://lukeed.com)\n"}},"sync":{"directory":{"index.d.ts":{"file":{"contents":"import { Stats } from 'fs';\nexport type Caller = (relPath: string, absPath: string, stats: Stats) => any;\nexport function totalist(dir: string, callback: Caller, prefix?: string): void;\n"}},"index.js":{"file":{"contents":"const { join, resolve } = require('path');\nconst { readdirSync, statSync } = require('fs');\n\nfunction totalist(dir, callback, pre='') {\n\tdir = resolve('.', dir);\n\tlet arr = readdirSync(dir);\n\tlet i=0, abs, stats;\n\tfor (; i < arr.length; i++) {\n\t\tabs = join(dir, arr[i]);\n\t\tstats = statSync(abs);\n\t\tstats.isDirectory()\n\t\t\t? totalist(abs, callback, join(pre, arr[i]))\n\t\t\t: callback(join(pre, arr[i]), abs, stats);\n\t}\n}\n\nexports.totalist = totalist;"}},"index.mjs":{"file":{"contents":"import { join, resolve } from 'path';\nimport { readdirSync, statSync } from 'fs';\n\nexport function totalist(dir, callback, pre='') {\n\tdir = resolve('.', dir);\n\tlet arr = readdirSync(dir);\n\tlet i=0, abs, stats;\n\tfor (; i < arr.length; i++) {\n\t\tabs = join(dir, arr[i]);\n\t\tstats = statSync(abs);\n\t\tstats.isDirectory()\n\t\t\t? totalist(abs, callback, join(pre, arr[i]))\n\t\t\t: callback(join(pre, arr[i]), abs, stats);\n\t}\n}\n"}}}}}}