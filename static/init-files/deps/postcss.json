{"directory":{"lib":{"directory":{"at-rule.d.ts":{"file":{"contents":"import Container, { ContainerProps } from './container.js'\n\ninterface AtRuleRaws extends Record<string, unknown> {\n  /**\n   * The space symbols before the node. It also stores `*`\n   * and `_` symbols before the declaration (IE hack).\n   */\n  before?: string\n\n  /**\n   * The space symbols after the last child of the node to the end of the node.\n   */\n  after?: string\n\n  /**\n   * The space between the at-rule name and its parameters.\n   */\n  afterName?: string\n\n  /**\n   * The symbols between the last parameter and `{` for rules.\n   */\n  between?: string\n\n  /**\n   * Contains `true` if the last child has an (optional) semicolon.\n   */\n  semicolon?: boolean\n\n  /**\n   * The rule’s selector with comments.\n   */\n  params?: {\n    value: string\n    raw: string\n  }\n}\n\nexport interface AtRuleProps extends ContainerProps {\n  /** Name of the at-rule. */\n  name: string\n  /** Parameters following the name of the at-rule. */\n  params?: string | number\n  /** Information used to generate byte-to-byte equal node string as it was in the origin input. */\n  raws?: AtRuleRaws\n}\n\n/**\n * Represents an at-rule.\n *\n * ```js\n * Once (root, { AtRule }) {\n *   let media = new AtRule({ name: 'media', params: 'print' })\n *   media.append(…)\n *   root.append(media)\n * }\n * ```\n *\n * If it’s followed in the CSS by a {} block, this node will have\n * a nodes property representing its children.\n *\n * ```js\n * const root = postcss.parse('@charset \"UTF-8\"; @media print {}')\n *\n * const charset = root.first\n * charset.type  //=> 'atrule'\n * charset.nodes //=> undefined\n *\n * const media = root.last\n * media.nodes   //=> []\n * ```\n */\nexport default class AtRule extends Container {\n  type: 'atrule'\n  parent: Container | undefined\n  raws: AtRuleRaws\n\n  /**\n   * The at-rule’s name immediately follows the `@`.\n   *\n   * ```js\n   * const root  = postcss.parse('@media print {}')\n   * media.name //=> 'media'\n   * const media = root.first\n   * ```\n   */\n  name: string\n\n  /**\n   * The at-rule’s parameters, the values that follow the at-rule’s name\n   * but precede any {} block.\n   *\n   * ```js\n   * const root  = postcss.parse('@media print, screen {}')\n   * const media = root.first\n   * media.params //=> 'print, screen'\n   * ```\n   */\n  params: string\n\n  constructor(defaults?: AtRuleProps)\n  assign(overrides: object | AtRuleProps): this\n  clone(overrides?: Partial<AtRuleProps>): this\n  cloneBefore(overrides?: Partial<AtRuleProps>): this\n  cloneAfter(overrides?: Partial<AtRuleProps>): this\n}\n"}},"at-rule.js":{"file":{"contents":"'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n"}},"comment.d.ts":{"file":{"contents":"import Container from './container.js'\nimport Node, { NodeProps } from './node.js'\n\ninterface CommentRaws extends Record<string, unknown> {\n  /**\n   * The space symbols before the node.\n   */\n  before?: string\n\n  /**\n   * The space symbols between `/*` and the comment’s text.\n   */\n  left?: string\n\n  /**\n   * The space symbols between the comment’s text.\n   */\n  right?: string\n}\n\nexport interface CommentProps extends NodeProps {\n  /** Content of the comment. */\n  text: string\n  /** Information used to generate byte-to-byte equal node string as it was in the origin input. */\n  raws?: CommentRaws\n}\n\n/**\n * Represents a comment between declarations or statements (rule and at-rules).\n *\n * ```js\n * Once (root, { Comment }) {\n *   let note = new Comment({ text: 'Note: …' })\n *   root.append(note)\n * }\n * ```\n *\n * Comments inside selectors, at-rule parameters, or declaration values\n * will be stored in the `raws` properties explained above.\n */\nexport default class Comment extends Node {\n  type: 'comment'\n  parent: Container | undefined\n  raws: CommentRaws\n\n  /**\n   * The comment's text.\n   */\n  text: string\n\n  constructor(defaults?: CommentProps)\n  assign(overrides: object | CommentProps): this\n  clone(overrides?: Partial<CommentProps>): this\n  cloneBefore(overrides?: Partial<CommentProps>): this\n  cloneAfter(overrides?: Partial<CommentProps>): this\n}\n"}},"comment.js":{"file":{"contents":"'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n"}},"container.d.ts":{"file":{"contents":"import Node, { ChildNode, NodeProps, ChildProps } from './node.js'\nimport Declaration from './declaration.js'\nimport Comment from './comment.js'\nimport AtRule from './at-rule.js'\nimport Rule from './rule.js'\n\ninterface ValueOptions {\n  /**\n   * An array of property names.\n   */\n  props?: string[]\n\n  /**\n   * String that’s used to narrow down values and speed up the regexp search.\n   */\n  fast?: string\n}\n\nexport interface ContainerProps extends NodeProps {\n  nodes?: (ChildNode | ChildProps)[]\n}\n\n/**\n * The `Root`, `AtRule`, and `Rule` container nodes\n * inherit some common methods to help work with their children.\n *\n * Note that all containers can store any content. If you write a rule inside\n * a rule, PostCSS will parse it.\n */\nexport default abstract class Container<\n  Child extends Node = ChildNode\n> extends Node {\n  /**\n   * An array containing the container’s children.\n   *\n   * ```js\n   * const root = postcss.parse('a { color: black }')\n   * root.nodes.length           //=> 1\n   * root.nodes[0].selector      //=> 'a'\n   * root.nodes[0].nodes[0].prop //=> 'color'\n   * ```\n   */\n  nodes: Child[]\n\n  /**\n   * The container’s first child.\n   *\n   * ```js\n   * rule.first === rules.nodes[0]\n   * ```\n   */\n  get first(): Child | undefined\n\n  /**\n   * The container’s last child.\n   *\n   * ```js\n   * rule.last === rule.nodes[rule.nodes.length - 1]\n   * ```\n   */\n  get last(): Child | undefined\n\n  /**\n   * Iterates through the container’s immediate children,\n   * calling `callback` for each child.\n   *\n   * Returning `false` in the callback will break iteration.\n   *\n   * This method only iterates through the container’s immediate children.\n   * If you need to recursively iterate through all the container’s descendant\n   * nodes, use `Container#walk`.\n   *\n   * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe\n   * if you are mutating the array of child nodes during iteration.\n   * PostCSS will adjust the current index to match the mutations.\n   *\n   * ```js\n   * const root = postcss.parse('a { color: black; z-index: 1 }')\n   * const rule = root.first\n   *\n   * for (const decl of rule.nodes) {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Cycle will be infinite, because cloneBefore moves the current node\n   *   // to the next index\n   * }\n   *\n   * rule.each(decl => {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Will be executed only for color and z-index\n   * })\n   * ```\n   *\n   * @param callback Iterator receives each node and index.\n   * @return Returns `false` if iteration was broke.\n   */\n  each(\n    callback: (node: Child, index: number) => false | void\n  ): false | undefined\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each node.\n   *\n   * Like container.each(), this method is safe to use\n   * if you are mutating arrays during iteration.\n   *\n   * If you only need to iterate through the container’s immediate children,\n   * use `Container#each`.\n   *\n   * ```js\n   * root.walk(node => {\n   *   // Traverses all descendant nodes.\n   * })\n   * ```\n   *\n   * @param callback Iterator receives each node and index.\n   * @return  Returns `false` if iteration was broke.\n   */\n  walk(\n    callback: (node: ChildNode, index: number) => false | void\n  ): false | undefined\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each declaration node.\n   *\n   * If you pass a filter, iteration will only happen over declarations\n   * with matching properties.\n   *\n   * ```js\n   * root.walkDecls(decl => {\n   *   checkPropertySupport(decl.prop)\n   * })\n   *\n   * root.walkDecls('border-radius', decl => {\n   *   decl.remove()\n   * })\n   *\n   * root.walkDecls(/^background/, decl => {\n   *   decl.value = takeFirstColorFromGradient(decl.value)\n   * })\n   * ```\n   *\n   * Like `Container#each`, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param prop     String or regular expression to filter declarations\n   *                 by property name.\n   * @param callback Iterator receives each node and index.\n   * @return Returns `false` if iteration was broke.\n   */\n  walkDecls(\n    propFilter: string | RegExp,\n    callback: (decl: Declaration, index: number) => false | void\n  ): false | undefined\n  walkDecls(\n    callback: (decl: Declaration, index: number) => false | void\n  ): false | undefined\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each rule node.\n   *\n   * If you pass a filter, iteration will only happen over rules\n   * with matching selectors.\n   *\n   * Like `Container#each`, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * ```js\n   * const selectors = []\n   * root.walkRules(rule => {\n   *   selectors.push(rule.selector)\n   * })\n   * console.log(`Your CSS uses ${ selectors.length } selectors`)\n   * ```\n   *\n   * @param selector String or regular expression to filter rules by selector.\n   * @param callback Iterator receives each node and index.\n   * @return Returns `false` if iteration was broke.\n   */\n  walkRules(\n    selectorFilter: string | RegExp,\n    callback: (rule: Rule, index: number) => false | void\n  ): false | undefined\n  walkRules(\n    callback: (rule: Rule, index: number) => false | void\n  ): false | undefined\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each at-rule node.\n   *\n   * If you pass a filter, iteration will only happen over at-rules\n   * that have matching names.\n   *\n   * Like `Container#each`, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * ```js\n   * root.walkAtRules(rule => {\n   *   if (isOld(rule.name)) rule.remove()\n   * })\n   *\n   * let first = false\n   * root.walkAtRules('charset', rule => {\n   *   if (!first) {\n   *     first = true\n   *   } else {\n   *     rule.remove()\n   *   }\n   * })\n   * ```\n   *\n   * @param name     String or regular expression to filter at-rules by name.\n   * @param callback Iterator receives each node and index.\n   * @return Returns `false` if iteration was broke.\n   */\n  walkAtRules(\n    nameFilter: string | RegExp,\n    callback: (atRule: AtRule, index: number) => false | void\n  ): false | undefined\n  walkAtRules(\n    callback: (atRule: AtRule, index: number) => false | void\n  ): false | undefined\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each comment node.\n   *\n   * Like `Container#each`, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * ```js\n   * root.walkComments(comment => {\n   *   comment.remove()\n   * })\n   * ```\n   *\n   * @param callback Iterator receives each node and index.\n   * @return Returns `false` if iteration was broke.\n   */\n\n  walkComments(\n    callback: (comment: Comment, indexed: number) => false | void\n  ): false | undefined\n  walkComments(\n    callback: (comment: Comment, indexed: number) => false | void\n  ): false | undefined\n\n  /**\n   * Inserts new nodes to the end of the container.\n   *\n   * ```js\n   * const decl1 = new Declaration({ prop: 'color', value: 'black' })\n   * const decl2 = new Declaration({ prop: 'background-color', value: 'white' })\n   * rule.append(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   * ```\n   *\n   * @param nodes New nodes.\n   * @return This node for methods chain.\n   */\n  append(\n    ...nodes: (Node | Node[] | ChildProps | ChildProps[] | string | string[])[]\n  ): this\n\n  /**\n   * Inserts new nodes to the start of the container.\n   *\n   * ```js\n   * const decl1 = new Declaration({ prop: 'color', value: 'black' })\n   * const decl2 = new Declaration({ prop: 'background-color', value: 'white' })\n   * rule.prepend(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   * ```\n   *\n   * @param nodes New nodes.\n   * @return This node for methods chain.\n   */\n  prepend(\n    ...nodes: (Node | Node[] | ChildProps | ChildProps[] | string | string[])[]\n  ): this\n\n  /**\n   * Add child to the end of the node.\n   *\n   * ```js\n   * rule.push(new Declaration({ prop: 'color', value: 'black' }))\n   * ```\n   *\n   * @param child New node.\n   * @return This node for methods chain.\n   */\n  push(child: Child): this\n\n  /**\n   * Insert new node before old node within the container.\n   *\n   * ```js\n   * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))\n   * ```\n   *\n   * @param oldNode Child or child’s index.\n   * @param newNode New node.\n   * @return This node for methods chain.\n   */\n  insertBefore(\n    oldNode: Child | number,\n    newNode: Child | ChildProps | string | Child[] | ChildProps[] | string[]\n  ): this\n\n  /**\n   * Insert new node after old node within the container.\n   *\n   * @param oldNode Child or child’s index.\n   * @param newNode New node.\n   * @return This node for methods chain.\n   */\n  insertAfter(\n    oldNode: Child | number,\n    newNode: Child | ChildProps | string | Child[] | ChildProps[] | string[]\n  ): this\n\n  /**\n   * Removes node from the container and cleans the parent properties\n   * from the node and its children.\n   *\n   * ```js\n   * rule.nodes.length  //=> 5\n   * rule.removeChild(decl)\n   * rule.nodes.length  //=> 4\n   * decl.parent        //=> undefined\n   * ```\n   *\n   * @param child Child or child’s index.\n   * @return This node for methods chain.\n   */\n  removeChild(child: Child | number): this\n\n  /**\n   * Removes all children from the container\n   * and cleans their parent properties.\n   *\n   * ```js\n   * rule.removeAll()\n   * rule.nodes.length //=> 0\n   * ```\n   *\n   * @return This node for methods chain.\n   */\n  removeAll(): this\n\n  /**\n   * Passes all declaration values within the container that match pattern\n   * through callback, replacing those values with the returned result\n   * of callback.\n   *\n   * This method is useful if you are using a custom unit or function\n   * and need to iterate through all values.\n   *\n   * ```js\n   * root.replaceValues(/\\d+rem/, { fast: 'rem' }, string => {\n   *   return 15 * parseInt(string) + 'px'\n   * })\n   * ```\n   *\n   * @param pattern      Replace pattern.\n   * @param {object} opts                Options to speed up the search.\n   * @param callback   String to replace pattern or callback\n   *                                     that returns a new value. The callback\n   *                                     will receive the same arguments\n   *                                     as those passed to a function parameter\n   *                                     of `String#replace`.\n   * @return This node for methods chain.\n   */\n  replaceValues(\n    pattern: string | RegExp,\n    options: ValueOptions,\n    replaced: string | { (substring: string, ...args: any[]): string }\n  ): this\n  replaceValues(\n    pattern: string | RegExp,\n    replaced: string | { (substring: string, ...args: any[]): string }\n  ): this\n\n  /**\n   * Returns `true` if callback returns `true`\n   * for all of the container’s children.\n   *\n   * ```js\n   * const noPrefixes = rule.every(i => i.prop[0] !== '-')\n   * ```\n   *\n   * @param condition Iterator returns true or false.\n   * @return Is every child pass condition.\n   */\n  every(\n    condition: (node: Child, index: number, nodes: Child[]) => boolean\n  ): boolean\n\n  /**\n   * Returns `true` if callback returns `true` for (at least) one\n   * of the container’s children.\n   *\n   * ```js\n   * const hasPrefix = rule.some(i => i.prop[0] === '-')\n   * ```\n   *\n   * @param condition Iterator returns true or false.\n   * @return Is some child pass condition.\n   */\n  some(\n    condition: (node: Child, index: number, nodes: Child[]) => boolean\n  ): boolean\n\n  /**\n   * Returns a `child`’s index within the `Container#nodes` array.\n   *\n   * ```js\n   * rule.index( rule.nodes[2] ) //=> 2\n   * ```\n   *\n   * @param child Child of the current container.\n   * @return Child index.\n   */\n  index(child: Child | number): number\n}\n"}},"container.js":{"file":{"contents":"'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = existIndex === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n"}},"css-syntax-error.d.ts":{"file":{"contents":"import { FilePosition } from './input.js'\n\n/**\n * A position that is part of a range.\n */\nexport interface RangePosition {\n  /**\n   * The line number in the input.\n   */\n  line: number\n\n  /**\n   * The column number in the input.\n   */\n  column: number\n}\n\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the `Node#error` method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * ```js\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' })\n * ```\n *\n * ```js\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if (error.name === 'CssSyntaxError') {\n *     error //=> CssSyntaxError\n *   }\n * }\n * ```\n */\nexport default class CssSyntaxError {\n  /**\n   * Instantiates a CSS syntax error. Can be instantiated for a single position\n   * or for a range.\n   * @param message        Error message.\n   * @param lineOrStartPos If for a single position, the line number, or if for\n   *                       a range, the inclusive start position of the error.\n   * @param columnOrEndPos If for a single position, the column number, or if for\n   *                       a range, the exclusive end position of the error.\n   * @param source         Source code of the broken file.\n   * @param file           Absolute path to the broken file.\n   * @param plugin         PostCSS plugin name, if error came from plugin.\n   */\n  constructor(\n    message: string,\n    lineOrStartPos?: number | RangePosition,\n    columnOrEndPos?: number | RangePosition,\n    source?: string,\n    file?: string,\n    plugin?: string\n  )\n\n  stack: string\n\n  /**\n   * Always equal to `'CssSyntaxError'`. You should always check error type\n   * by `error.name === 'CssSyntaxError'`\n   * instead of `error instanceof CssSyntaxError`,\n   * because npm could have several PostCSS versions.\n   *\n   * ```js\n   * if (error.name === 'CssSyntaxError') {\n   *   error //=> CssSyntaxError\n   * }\n   * ```\n   */\n  name: 'CssSyntaxError'\n\n  /**\n   * Error message.\n   *\n   * ```js\n   * error.message //=> 'Unclosed block'\n   * ```\n   */\n  reason: string\n\n  /**\n   * Full error text in the GNU error format\n   * with plugin, file, line and column.\n   *\n   * ```js\n   * error.message //=> 'a.css:1:1: Unclosed block'\n   * ```\n   */\n  message: string\n\n  /**\n   * Absolute path to the broken file.\n   *\n   * ```js\n   * error.file       //=> 'a.sass'\n   * error.input.file //=> 'a.css'\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.file`.\n   */\n  file?: string\n\n  /**\n   * Source line of the error.\n   *\n   * ```js\n   * error.line       //=> 2\n   * error.input.line //=> 4\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.line`.\n   */\n  line?: number\n\n  /**\n   * Source column of the error.\n   *\n   * ```js\n   * error.column       //=> 1\n   * error.input.column //=> 4\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.column`.\n   */\n  column?: number\n\n  /**\n   * Source line of the error's end, exclusive. Provided if the error pertains\n   * to a range.\n   *\n   * ```js\n   * error.endLine       //=> 3\n   * error.input.endLine //=> 4\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.endLine`.\n   */\n  endLine?: number\n\n  /**\n   * Source column of the error's end, exclusive. Provided if the error pertains\n   * to a range.\n   *\n   * ```js\n   * error.endColumn       //=> 1\n   * error.input.endColumn //=> 4\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.endColumn`.\n   */\n  endColumn?: number\n\n  /**\n   * Source code of the broken file.\n   *\n   * ```js\n   * error.source       //=> 'a { b {} }'\n   * error.input.source //=> 'a b { }'\n   * ```\n   */\n  source?: string\n\n  /**\n   * Plugin name, if error came from plugin.\n   *\n   * ```js\n   * error.plugin //=> 'postcss-vars'\n   * ```\n   */\n  plugin?: string\n\n  /**\n   * Input object with PostCSS internal information\n   * about input file. If input has source map\n   * from previous tool, PostCSS will use origin\n   * (for example, Sass) source. You can use this\n   * object to get PostCSS input source.\n   *\n   * ```js\n   * error.input.file //=> 'a.css'\n   * error.file       //=> 'a.sass'\n   * ```\n   */\n  input?: FilePosition\n\n  /**\n   * Returns error position, message and source code of the broken part.\n   *\n   * ```js\n   * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n   *                  //    > 1 | a {\n   *                  //        | ^\"\n   * ```\n   *\n   * @return Error position, message and source code.\n   */\n  toString(): string\n\n  /**\n   * Returns a few lines of CSS source that caused the error.\n   *\n   * If the CSS has an input source map without `sourceContent`,\n   * this method will return an empty string.\n   *\n   * ```js\n   * error.showSourceCode() //=> \"  4 | }\n   *                        //      5 | a {\n   *                        //    > 6 |   bad\n   *                        //        |   ^\n   *                        //      7 | }\n   *                        //      8 | b {\"\n   * ```\n   *\n   * @param color Whether arrow will be colored red by terminal\n   *              color codes. By default, PostCSS will detect\n   *              color support by `process.stdout.isTTY`\n   *              and `process.env.NODE_DISABLE_COLORS`.\n   * @return Few lines of CSS source that caused the error.\n   */\n  showSourceCode(color?: boolean): string\n}\n"}},"css-syntax-error.js":{"file":{"contents":"'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n"}},"declaration.d.ts":{"file":{"contents":"import Container from './container.js'\nimport Node from './node.js'\n\ninterface DeclarationRaws extends Record<string, unknown> {\n  /**\n   * The space symbols before the node. It also stores `*`\n   * and `_` symbols before the declaration (IE hack).\n   */\n  before?: string\n\n  /**\n   * The symbols between the property and value for declarations.\n   */\n  between?: string\n\n  /**\n   * The content of the important statement, if it is not just `!important`.\n   */\n  important?: string\n\n  /**\n   * Declaration value with comments.\n   */\n  value?: {\n    value: string\n    raw: string\n  }\n}\n\nexport interface DeclarationProps {\n  /** Name of the declaration. */\n  prop: string\n  /** Value of the declaration. */\n  value: string\n  /** Whether the declaration has an `!important` annotation. */\n  important?: boolean\n  /** Information used to generate byte-to-byte equal node string as it was in the origin input. */\n  raws?: DeclarationRaws\n}\n\n/**\n * Represents a CSS declaration.\n *\n * ```js\n * Once (root, { Declaration }) {\n *   let color = new Declaration({ prop: 'color', value: 'black' })\n *   root.append(color)\n * }\n * ```\n *\n * ```js\n * const root = postcss.parse('a { color: black }')\n * const decl = root.first.first\n * decl.type       //=> 'decl'\n * decl.toString() //=> ' color: black'\n * ```\n */\nexport default class Declaration extends Node {\n  type: 'decl'\n  parent: Container | undefined\n  raws: DeclarationRaws\n\n  /**\n   * The declaration's property name.\n   *\n   * ```js\n   * const root = postcss.parse('a { color: black }')\n   * const decl = root.first.first\n   * decl.prop //=> 'color'\n   * ```\n   */\n  prop: string\n\n  /**\n   * The declaration’s value.\n   *\n   * This value will be cleaned of comments. If the source value contained\n   * comments, those comments will be available in the `raws` property.\n   * If you have not changed the value, the result of `decl.toString()`\n   * will include the original raws value (comments and all).\n   *\n   * ```js\n   * const root = postcss.parse('a { color: black }')\n   * const decl = root.first.first\n   * decl.value //=> 'black'\n   * ```\n   */\n  value: string\n\n  /**\n   * `true` if the declaration has an `!important` annotation.\n   *\n   * ```js\n   * const root = postcss.parse('a { color: black !important; color: red }')\n   * root.first.first.important //=> true\n   * root.first.last.important  //=> undefined\n   * ```\n   */\n  important: boolean\n\n  /**\n   * `true` if declaration is declaration of CSS Custom Property\n   * or Sass variable.\n   *\n   * ```js\n   * const root = postcss.parse(':root { --one: 1 }')\n   * let one = root.first.first\n   * one.variable //=> true\n   * ```\n   *\n   * ```js\n   * const root = postcss.parse('$one: 1')\n   * let one = root.first\n   * one.variable //=> true\n   * ```\n   */\n  variable: boolean\n\n  constructor(defaults?: DeclarationProps)\n  assign(overrides: object | DeclarationProps): this\n  clone(overrides?: Partial<DeclarationProps>): this\n  cloneBefore(overrides?: Partial<DeclarationProps>): this\n  cloneAfter(overrides?: Partial<DeclarationProps>): this\n}\n"}},"declaration.js":{"file":{"contents":"'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n"}},"document.d.ts":{"file":{"contents":"import Container, { ContainerProps } from './container.js'\nimport { ProcessOptions } from './postcss.js'\nimport Result from './result.js'\nimport Root, { RootProps } from './root.js'\n\nexport interface DocumentProps extends ContainerProps {\n  nodes?: Root[]\n\n  /**\n   * Information to generate byte-to-byte equal node string as it was\n   * in the origin input.\n   *\n   * Every parser saves its own properties.\n   */\n  raws?: Record<string, any>\n}\n\ntype ChildNode = Root\ntype ChildProps = RootProps\n\n/**\n * Represents a file and contains all its parsed nodes.\n *\n * **Experimental:** some aspects of this node could change within minor\n * or patch version releases.\n *\n * ```js\n * const document = htmlParser(\n *   '<html><style>a{color:black}</style><style>b{z-index:2}</style>'\n * )\n * document.type         //=> 'document'\n * document.nodes.length //=> 2\n * ```\n */\nexport default class Document extends Container<Root> {\n  type: 'document'\n  parent: undefined\n\n  constructor(defaults?: DocumentProps)\n\n  /**\n   * Returns a `Result` instance representing the document’s CSS roots.\n   *\n   * ```js\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * const document = postcss.document()\n   * document.append(root1)\n   * document.append(root2)\n   * const result = document.toResult({ to: 'all.css', map: true })\n   * ```\n   *\n   * @param opts Options.\n   * @return Result with current document’s CSS.\n   */\n  toResult(options?: ProcessOptions): Result\n}\n"}},"document.js":{"file":{"contents":"'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n"}},"fromJSON.d.ts":{"file":{"contents":"import { JSONHydrator } from './postcss.js'\n\ndeclare const fromJSON: JSONHydrator\n\nexport default fromJSON\n"}},"fromJSON.js":{"file":{"contents":"'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n"}},"input.d.ts":{"file":{"contents":"import { CssSyntaxError, ProcessOptions } from './postcss.js'\nimport PreviousMap from './previous-map.js'\n\nexport interface FilePosition {\n  /**\n   * URL for the source file.\n   */\n  url: string\n\n  /**\n   * Absolute path to the source file.\n   */\n  file?: string\n\n  /**\n   * Line of inclusive start position in source file.\n   */\n  line: number\n\n  /**\n   * Column of inclusive start position in source file.\n   */\n  column: number\n\n  /**\n   * Line of exclusive end position in source file.\n   */\n  endLine?: number\n\n  /**\n   * Column of exclusive end position in source file.\n   */\n  endColumn?: number\n\n  /**\n   * Source code.\n   */\n  source?: string\n}\n\n/**\n * Represents the source CSS.\n *\n * ```js\n * const root  = postcss.parse(css, { from: file })\n * const input = root.source.input\n * ```\n */\nexport default class Input {\n  /**\n   * Input CSS source.\n   *\n   * ```js\n   * const input = postcss.parse('a{}', { from: file }).input\n   * input.css //=> \"a{}\"\n   * ```\n   */\n  css: string\n\n  /**\n   * The input source map passed from a compilation step before PostCSS\n   * (for example, from Sass compiler).\n   *\n   * ```js\n   * root.source.input.map.consumer().sources //=> ['a.sass']\n   * ```\n   */\n  map: PreviousMap\n\n  /**\n   * The absolute path to the CSS source file defined\n   * with the `from` option.\n   *\n   * ```js\n   * const root = postcss.parse(css, { from: 'a.css' })\n   * root.source.input.file //=> '/home/ai/a.css'\n   * ```\n   */\n  file?: string\n\n  /**\n   * The unique ID of the CSS source. It will be created if `from` option\n   * is not provided (because PostCSS does not know the file path).\n   *\n   * ```js\n   * const root = postcss.parse(css)\n   * root.source.input.file //=> undefined\n   * root.source.input.id   //=> \"<input css 8LZeVF>\"\n   * ```\n   */\n  id?: string\n\n  /**\n   * The flag to indicate whether or not the source code has Unicode BOM.\n   */\n  hasBOM: boolean\n\n  /**\n   * @param css  Input CSS source.\n   * @param opts Process options.\n   */\n  constructor(css: string, opts?: ProcessOptions)\n\n  /**\n   * The CSS source identifier. Contains `Input#file` if the user\n   * set the `from` option, or `Input#id` if they did not.\n   *\n   * ```js\n   * const root = postcss.parse(css, { from: 'a.css' })\n   * root.source.input.from //=> \"/home/ai/a.css\"\n   *\n   * const root = postcss.parse(css)\n   * root.source.input.from //=> \"<input css 1>\"\n   * ```\n   */\n  get from(): string\n\n  /**\n   * Reads the input source map and returns a symbol position\n   * in the input source (e.g., in a Sass file that was compiled\n   * to CSS before being passed to PostCSS). Optionally takes an\n   * end position, exclusive.\n   *\n   * ```js\n   * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }\n   * root.source.input.origin(1, 1, 1, 4)\n   * //=> { file: 'a.css', line: 3, column: 1, endLine: 3, endColumn: 4 }\n   * ```\n   *\n   * @param line      Line for inclusive start position in input CSS.\n   * @param column    Column for inclusive start position in input CSS.\n   * @param endLine   Line for exclusive end position in input CSS.\n   * @param endColumn Column for exclusive end position in input CSS.\n   *\n   * @return Position in input source.\n   */\n  origin(\n    line: number,\n    column: number,\n    endLine?: number,\n    endColumn?: number\n  ): FilePosition | false\n\n  /**\n   * Converts source offset to line and column.\n   *\n   * @param offset Source offset.\n   */\n  fromOffset(offset: number): { line: number; col: number } | null\n\n  /**\n   * Returns `CssSyntaxError` with information about the error and its position.\n   */\n  error(\n    message: string,\n    line: number,\n    column: number,\n    opts?: { plugin?: CssSyntaxError['plugin'] }\n  ): CssSyntaxError\n  error(\n    message: string,\n    offset: number,\n    opts?: { plugin?: CssSyntaxError['plugin'] }\n  ): CssSyntaxError\n  error(\n    message: string,\n    start:\n      | {\n          offset: number\n        }\n      | {\n          line: number\n          column: number\n        },\n    end:\n      | {\n          offset: number\n        }\n      | {\n          line: number\n          column: number\n        },\n    opts?: { plugin?: CssSyntaxError['plugin'] }\n  ): CssSyntaxError\n}\n"}},"input.js":{"file":{"contents":"'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof start.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n"}},"lazy-result.d.ts":{"file":{"contents":"import Result, { Message, ResultOptions } from './result.js'\nimport { SourceMap } from './postcss.js'\nimport Processor from './processor.js'\nimport Warning from './warning.js'\nimport Root from './root.js'\n\n/**\n * A Promise proxy for the result of PostCSS transformations.\n *\n * A `LazyResult` instance is returned by `Processor#process`.\n *\n * ```js\n * const lazy = postcss([autoprefixer]).process(css)\n * ```\n */\nexport default class LazyResult implements PromiseLike<Result> {\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls `onFulfilled` with a Result instance. If a plugin throws\n   * an error, the `onRejected` callback will be executed.\n   *\n   * It implements standard Promise API.\n   *\n   * ```js\n   * postcss([autoprefixer]).process(css, { from: cssPath }).then(result => {\n   *   console.log(result.css)\n   * })\n   * ```\n   */\n  then: Promise<Result>['then']\n\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls onRejected for each error thrown in any plugin.\n   *\n   * It implements standard Promise API.\n   *\n   * ```js\n   * postcss([autoprefixer]).process(css).then(result => {\n   *   console.log(result.css)\n   * }).catch(error => {\n   *   console.error(error)\n   * })\n   * ```\n   */\n  catch: Promise<Result>['catch']\n\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls onFinally on any error or when all plugins will finish work.\n   *\n   * It implements standard Promise API.\n   *\n   * ```js\n   * postcss([autoprefixer]).process(css).finally(() => {\n   *   console.log('processing ended')\n   * })\n   * ```\n   */\n  finally: Promise<Result>['finally']\n\n  /**\n   * @param processor Processor used for this transformation.\n   * @param css       CSS to parse and transform.\n   * @param opts      Options from the `Processor#process` or `Root#toResult`.\n   */\n  constructor(processor: Processor, css: string, opts: ResultOptions)\n\n  /**\n   * Returns the default string description of an object.\n   * Required to implement the Promise interface.\n   */\n  get [Symbol.toStringTag](): string\n\n  /**\n   * Returns a `Processor` instance, which will be used\n   * for CSS transformations.\n   */\n  get processor(): Processor\n\n  /**\n   * Options from the `Processor#process` call.\n   */\n  get opts(): ResultOptions\n\n  /**\n   * Processes input CSS through synchronous plugins, converts `Root`\n   * to a CSS string and returns `Result#css`.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get css(): string\n\n  /**\n   * An alias for the `css` property. Use it with syntaxes\n   * that generate non-CSS output.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get content(): string\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns `Result#map`.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get map(): SourceMap\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns `Result#root`.\n   *\n   * This property will only work with synchronous plugins. If the processor\n   * contains any asynchronous plugins it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get root(): Root\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns `Result#messages`.\n   *\n   * This property will only work with synchronous plugins. If the processor\n   * contains any asynchronous plugins it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get messages(): Message[]\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and calls `Result#warnings`.\n   *\n   * @return Warnings from plugins.\n   */\n  warnings(): Warning[]\n\n  /**\n   * Alias for the `LazyResult#css` property.\n   *\n   * ```js\n   * lazy + '' === lazy.css\n   * ```\n   *\n   * @return Output CSS.\n   */\n  toString(): string\n\n  /**\n   * Run plugin in sync way and return `Result`.\n   *\n   * @return Result with output content.\n   */\n  sync(): Result\n\n  /**\n   * Run plugin in async way and return `Result`.\n   *\n   * @return Result with output content.\n   */\n  async(): Promise<Result>\n}\n"}},"lazy-result.js":{"file":{"contents":"'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n"}},"list.d.ts":{"file":{"contents":"export type List = {\n  /**\n   * Safely splits values.\n   *\n   * ```js\n   * Once (root, { list }) {\n   *   list.split('1px calc(10% + 1px)', [' ', '\\n', '\\t']) //=> ['1px', 'calc(10% + 1px)']\n   * }\n   * ```\n   *\n   * @param string separated values.\n   * @param separators array of separators.\n   * @param last boolean indicator.\n   * @return Split values.\n   */\n  split(string: string, separators: string[], last: boolean): string[]\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * ```js\n   * Once (root, { list }) {\n   *   list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   * }\n   * ```\n   *\n   * @param str Space-separated values.\n   * @return Split values.\n   */\n  space(str: string): string[]\n\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * ```js\n   * Once (root, { list }) {\n   *   list.comma('black, linear-gradient(white, black)')\n   *   //=> ['black', 'linear-gradient(white, black)']\n   * }\n   * ```\n   *\n   * @param str Comma-separated values.\n   * @return Split values.\n   */\n  comma(str: string): string[]\n}\n\ndeclare const list: List\n\nexport default list\n"}},"list.js":{"file":{"contents":"'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n"}},"map-generator.js":{"file":{"contents":"'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            let fromUrl = this.usesFileUrls\n              ? this.toFileUrl(from)\n              : this.toUrl(this.path(from))\n            this.map.setSourceContent(fromUrl, node.source.input.css)\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  toFileUrl(path) {\n    if (pathToFileURL) {\n      return pathToFileURL(path).toString()\n    } else {\n      throw new Error(\n        '`map.absolute` option is not available in this PostCSS build'\n      )\n    }\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from)\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        let childless =\n          node.type === 'decl' || (node.type === 'atrule' && !node.nodes)\n        if (!childless || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n"}},"no-work-result.d.ts":{"file":{"contents":"import Result, { Message, ResultOptions } from './result.js'\nimport { SourceMap } from './postcss.js'\nimport Processor from './processor.js'\nimport Warning from './warning.js'\nimport Root from './root.js'\nimport LazyResult from './lazy-result.js'\n\n/**\n * A Promise proxy for the result of PostCSS transformations.\n * This lazy result instance doesn't parse css unless `NoWorkResult#root` or `Result#root`\n * are accessed. See the example below for details.\n * A `NoWork` instance is returned by `Processor#process` ONLY when no plugins defined.\n *\n * ```js\n * const noWorkResult = postcss().process(css) // No plugins are defined.\n *                                             // CSS is not parsed\n * let root = noWorkResult.root // now css is parsed because we accessed the root\n * ```\n */\nexport default class NoWorkResult implements LazyResult {\n  then: Promise<Result>['then']\n  catch: Promise<Result>['catch']\n  finally: Promise<Result>['finally']\n  constructor(processor: Processor, css: string, opts: ResultOptions)\n  get [Symbol.toStringTag](): string\n  get processor(): Processor\n  get opts(): ResultOptions\n  get css(): string\n  get content(): string\n  get map(): SourceMap\n  get root(): Root\n  get messages(): Message[]\n  warnings(): Warning[]\n  toString(): string\n  sync(): Result\n  async(): Promise<Result>\n}\n"}},"no-work-result.js":{"file":{"contents":"'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n"}},"node.d.ts":{"file":{"contents":"import Declaration, { DeclarationProps } from './declaration.js'\nimport Comment, { CommentProps } from './comment.js'\nimport { Stringifier, Syntax } from './postcss.js'\nimport AtRule, { AtRuleProps } from './at-rule.js'\nimport Rule, { RuleProps } from './rule.js'\nimport Warning, { WarningOptions } from './warning.js'\nimport CssSyntaxError from './css-syntax-error.js'\nimport Result from './result.js'\nimport Input from './input.js'\nimport Root from './root.js'\nimport Document from './document.js'\nimport Container from './container.js'\n\nexport type ChildNode = AtRule | Rule | Declaration | Comment\n\nexport type AnyNode = AtRule | Rule | Declaration | Comment | Root | Document\n\nexport type ChildProps =\n  | AtRuleProps\n  | RuleProps\n  | DeclarationProps\n  | CommentProps\n\nexport interface Position {\n  /**\n   * Source offset in file. It starts from 0.\n   */\n  offset: number\n\n  /**\n   * Source line in file. In contrast to `offset` it starts from 1.\n   */\n  column: number\n\n  /**\n   * Source column in file.\n   */\n  line: number\n}\n\nexport interface Range {\n  /**\n   * Start position, inclusive.\n   */\n  start: Position\n\n  /**\n   * End position, exclusive.\n   */\n  end: Position\n}\n\nexport interface Source {\n  /**\n   * The file source of the node.\n   */\n  input: Input\n  /**\n   * The inclusive starting position of the node’s source.\n   */\n  start?: Position\n  /**\n   * The inclusive ending position of the node's source.\n   */\n  end?: Position\n}\n\nexport interface NodeProps {\n  source?: Source\n}\n\ninterface NodeErrorOptions {\n  /**\n   * Plugin name that created this error. PostCSS will set it automatically.\n   */\n  plugin?: string\n  /**\n   * A word inside a node's string, that should be highlighted as source\n   * of error.\n   */\n  word?: string\n  /**\n   * An index inside a node's string that should be highlighted as source\n   * of error.\n   */\n  index?: number\n  /**\n   * An ending index inside a node's string that should be highlighted as\n   * source of error.\n   */\n  endIndex?: number\n}\n\n/**\n * All node classes inherit the following common methods.\n *\n * You should not extend this classes to create AST for selector or value\n * parser.\n */\nexport default abstract class Node {\n  /**\n   * tring representing the node’s type. Possible values are `root`, `atrule`,\n   * `rule`, `decl`, or `comment`.\n   *\n   * ```js\n   * new Declaration({ prop: 'color', value: 'black' }).type //=> 'decl'\n   * ```\n   */\n  type: string\n\n  /**\n   * The node’s parent node.\n   *\n   * ```js\n   * root.nodes[0].parent === root\n   * ```\n   */\n  parent: Document | Container | undefined\n\n  /**\n   * The input source of the node.\n   *\n   * The property is used in source map generation.\n   *\n   * If you create a node manually (e.g., with `postcss.decl()`),\n   * that node will not have a `source` property and will be absent\n   * from the source map. For this reason, the plugin developer should\n   * consider cloning nodes to create new ones (in which case the new node’s\n   * source will reference the original, cloned node) or setting\n   * the `source` property manually.\n   *\n   * ```js\n   * decl.source.input.from //=> '/home/ai/a.sass'\n   * decl.source.start      //=> { line: 10, column: 2 }\n   * decl.source.end        //=> { line: 10, column: 12 }\n   * ```\n   *\n   * ```js\n   * // Bad\n   * const prefixed = postcss.decl({\n   *   prop: '-moz-' + decl.prop,\n   *   value: decl.value\n   * })\n   *\n   * // Good\n   * const prefixed = decl.clone({ prop: '-moz-' + decl.prop })\n   * ```\n   *\n   * ```js\n   * if (atrule.name === 'add-link') {\n   *   const rule = postcss.rule({ selector: 'a', source: atrule.source })\n   *   atrule.parent.insertBefore(atrule, rule)\n   * }\n   * ```\n   */\n  source?: Source\n\n  /**\n   * Information to generate byte-to-byte equal node string as it was\n   * in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text\n   *   and <code>*&#47;</code>.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans selectors, declaration values and at-rule parameters\n   * from comments and extra spaces, but it stores origin content in raws\n   * properties. As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * ```js\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   * ```\n   */\n  raws: any\n\n  /**\n   * @param defaults Value for node properties.\n   */\n  constructor(defaults?: object)\n\n  /**\n   * Returns a `CssSyntaxError` instance containing the original position\n   * of the node in the source, showing line and column numbers and also\n   * a small excerpt to facilitate debugging.\n   *\n   * If present, an input source map will be used to get the original position\n   * of the source, even from a previous compilation step\n   * (e.g., from Sass compilation).\n   *\n   * This method produces very useful error messages.\n   *\n   * ```js\n   * if (!variables[name]) {\n   *   throw decl.error(`Unknown variable ${name}`, { word: name })\n   *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black\n   *   //   color: $black\n   *   // a\n   *   //          ^\n   *   //   background: white\n   * }\n   * ```\n   *\n   * @param message Error description.\n   * @param opts    Options.\n   *\n   * @return Error object to throw it.\n   */\n  error(message: string, options?: NodeErrorOptions): CssSyntaxError\n\n  /**\n   * This method is provided as a convenience wrapper for `Result#warn`.\n   *\n   * ```js\n   *   Declaration: {\n   *     bad: (decl, { result }) => {\n   *       decl.warn(result, 'Deprecated property bad')\n   *     }\n   *   }\n   * ```\n   *\n   * @param result The `Result` instance that will receive the warning.\n   * @param text   Warning message.\n   * @param opts   Warning Options.\n   *\n   * @return Created warning object.\n   */\n  warn(result: Result, text: string, opts?: WarningOptions): Warning\n\n  /**\n   * Removes the node from its parent and cleans the parent properties\n   * from the node and its children.\n   *\n   * ```js\n   * if (decl.prop.match(/^-webkit-/)) {\n   *   decl.remove()\n   * }\n   * ```\n   *\n   * @return Node to make calls chain.\n   */\n  remove(): this\n\n  /**\n   * Returns a CSS string representing the node.\n   *\n   * ```js\n   * new Rule({ selector: 'a' }).toString() //=> \"a {}\"\n   * ```\n   *\n   * @param stringifier A syntax to use in string generation.\n   * @return CSS string of this node.\n   */\n  toString(stringifier?: Stringifier | Syntax): string\n\n  /**\n   * Assigns properties to the current node.\n   *\n   * ```js\n   * decl.assign({ prop: 'word-wrap', value: 'break-word' })\n   * ```\n   *\n   * @param overrides New properties to override the node.\n   * @return Current node to methods chain.\n   */\n  assign(overrides: object): this\n\n  /**\n   * Returns an exact clone of the node.\n   *\n   * The resulting cloned node and its (cloned) children will retain\n   * code style properties.\n   *\n   * ```js\n   * decl.raws.before    //=> \"\\n  \"\n   * const cloned = decl.clone({ prop: '-moz-' + decl.prop })\n   * cloned.raws.before  //=> \"\\n  \"\n   * cloned.toString()   //=> -moz-transform: scale(0)\n   * ```\n   *\n   * @param overrides New properties to override in the clone.\n   * @return Clone of the node.\n   */\n  clone(overrides?: object): this\n\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * before the current node.\n   *\n   * ```js\n   * decl.cloneBefore({ prop: '-moz-' + decl.prop })\n   * ```\n   *\n   * @param overrides Mew properties to override in the clone.\n   *\n   * @return New node\n   */\n  cloneBefore(overrides?: object): this\n\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * after the current node.\n   *\n   * @param overrides New properties to override in the clone.\n   * @return New node.\n   */\n  cloneAfter(overrides?: object): this\n\n  /**\n   * Inserts node(s) before the current node and removes the current node.\n   *\n   * ```js\n   * AtRule: {\n   *   mixin: atrule => {\n   *     atrule.replaceWith(mixinRules[atrule.params])\n   *   }\n   * }\n   * ```\n   *\n   * @param nodes Mode(s) to replace current one.\n   * @return Current node to methods chain.\n   */\n  replaceWith(\n    ...nodes: (ChildNode | ChildProps | ChildNode[] | ChildProps[])[]\n  ): this\n\n  /**\n   * Returns the next child of the node’s parent.\n   * Returns `undefined` if the current node is the last child.\n   *\n   * ```js\n   * if (comment.text === 'delete next') {\n   *   const next = comment.next()\n   *   if (next) {\n   *     next.remove()\n   *   }\n   * }\n   * ```\n   *\n   * @return Next node.\n   */\n  next(): ChildNode | undefined\n\n  /**\n   * Returns the previous child of the node’s parent.\n   * Returns `undefined` if the current node is the first child.\n   *\n   * ```js\n   * const annotation = decl.prev()\n   * if (annotation.type === 'comment') {\n   *   readAnnotation(annotation.text)\n   * }\n   * ```\n   *\n   * @return Previous node.\n   */\n  prev(): ChildNode | undefined\n\n  /**\n   * Insert new node before current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertBefore(node, add)`.\n   *\n   * ```js\n   * decl.before('content: \"\"')\n   * ```\n   *\n   * @param newNode New node.\n   * @return This node for methods chain.\n   */\n  before(newNode: Node | ChildProps | string | Node[]): this\n\n  /**\n   * Insert new node after current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertAfter(node, add)`.\n   *\n   * ```js\n   * decl.after('color: black')\n   * ```\n   *\n   * @param newNode New node.\n   * @return This node for methods chain.\n   */\n  after(newNode: Node | ChildProps | string | Node[]): this\n\n  /**\n   * Finds the Root instance of the node’s tree.\n   *\n   * ```js\n   * root.nodes[0].nodes[0].root() === root\n   * ```\n   *\n   * @return Root parent.\n   */\n  root(): Root\n\n  /**\n   * Returns a `Node#raws` value. If the node is missing\n   * the code style property (because the node was manually built or cloned),\n   * PostCSS will try to autodetect the code style property by looking\n   * at other nodes in the tree.\n   *\n   * ```js\n   * const root = postcss.parse('a { background: white }')\n   * root.nodes[0].append({ prop: 'color', value: 'black' })\n   * root.nodes[0].nodes[1].raws.before   //=> undefined\n   * root.nodes[0].nodes[1].raw('before') //=> ' '\n   * ```\n   *\n   * @param prop        Name of code style property.\n   * @param defaultType Name of default value, it can be missed\n   *                    if the value is the same as prop.\n   * @return {string} Code style value.\n   */\n  raw(prop: string, defaultType?: string): string\n\n  /**\n   * Clear the code style properties for the node and its children.\n   *\n   * ```js\n   * node.raws.before  //=> ' '\n   * node.cleanRaws()\n   * node.raws.before  //=> undefined\n   * ```\n   *\n   * @param keepBetween Keep the `raws.between` symbols.\n   */\n  cleanRaws(keepBetween?: boolean): void\n\n  /**\n   * Fix circular links on `JSON.stringify()`.\n   *\n   * @return Cleaned object.\n   */\n  toJSON(): object\n\n  /**\n   * Convert string index to line/column.\n   *\n   * @param index The symbol number in the node’s string.\n   * @return Symbol position in file.\n   */\n  positionInside(index: number): Position\n\n  /**\n   * Get the position for a word or an index inside the node.\n   *\n   * @param opts Options.\n   * @return Position.\n   */\n  positionBy(opts?: Pick<WarningOptions, 'word' | 'index'>): Position\n\n  /**\n   * Get the range for a word or start and end index inside the node.\n   * The start index is inclusive; the end index is exclusive.\n   *\n   * @param opts Options.\n   * @return Range.\n   */\n  rangeBy(opts?: Pick<WarningOptions, 'word' | 'index' | 'endIndex'>): Range\n}\n"}},"node.js":{"file":{"contents":"'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n"}},"parse.d.ts":{"file":{"contents":"import { Parser } from './postcss.js'\n\ndeclare const parse: Parser\n\nexport default parse\n"}},"parse.js":{"file":{"contents":"'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n"}},"parser.js":{"file":{"contents":"'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n"}},"postcss.d.ts":{"file":{"contents":"import { SourceMapGenerator, RawSourceMap } from 'source-map-js'\n\nimport Node, {\n  Position,\n  Source,\n  ChildNode,\n  NodeErrorOptions,\n  NodeProps,\n  ChildProps,\n  AnyNode\n} from './node.js'\nimport Declaration, { DeclarationProps } from './declaration.js'\nimport Container, { ContainerProps } from './container.js'\nimport Document, { DocumentProps } from './document.js'\nimport Warning, { WarningOptions } from './warning.js'\nimport Comment, { CommentProps } from './comment.js'\nimport AtRule, { AtRuleProps } from './at-rule.js'\nimport Input, { FilePosition } from './input.js'\nimport Result, { Message } from './result.js'\nimport Root, { RootProps } from './root.js'\nimport Rule, { RuleProps } from './rule.js'\nimport CssSyntaxError from './css-syntax-error.js'\nimport list, { List } from './list.js'\nimport LazyResult from './lazy-result.js'\nimport Processor from './processor.js'\n\nexport {\n  NodeErrorOptions,\n  DeclarationProps,\n  CssSyntaxError,\n  ContainerProps,\n  WarningOptions,\n  DocumentProps,\n  FilePosition,\n  CommentProps,\n  AtRuleProps,\n  Declaration,\n  ChildProps,\n  LazyResult,\n  ChildNode,\n  NodeProps,\n  Processor,\n  RuleProps,\n  RootProps,\n  Container,\n  Position,\n  Document,\n  AnyNode,\n  Warning,\n  Message,\n  Comment,\n  Source,\n  AtRule,\n  Result,\n  Input,\n  Node,\n  list,\n  Rule,\n  Root\n}\n\nexport type SourceMap = SourceMapGenerator & {\n  toJSON(): RawSourceMap\n}\n\nexport type Helpers = { result: Result; postcss: Postcss } & Postcss\n\ntype DocumentProcessor = (\n  document: Document,\n  helper: Helpers\n) => Promise<void> | void\ntype RootProcessor = (root: Root, helper: Helpers) => Promise<void> | void\ntype DeclarationProcessor = (\n  decl: Declaration,\n  helper: Helpers\n) => Promise<void> | void\ntype RuleProcessor = (rule: Rule, helper: Helpers) => Promise<void> | void\ntype AtRuleProcessor = (atRule: AtRule, helper: Helpers) => Promise<void> | void\ntype CommentProcessor = (\n  comment: Comment,\n  helper: Helpers\n) => Promise<void> | void\n\ninterface Processors {\n  /**\n   * Will be called on `Document` node.\n   *\n   * Will be called again on children changes.\n   */\n  Document?: DocumentProcessor\n\n  /**\n   * Will be called on `Document` node, when all children will be processed.\n   *\n   * Will be called again on children changes.\n   */\n  DocumentExit?: DocumentProcessor\n\n  /**\n   * Will be called on `Root` node once.\n   */\n  Once?: RootProcessor\n\n  /**\n   * Will be called on `Root` node once, when all children will be processed.\n   */\n  OnceExit?: RootProcessor\n\n  /**\n   * Will be called on `Root` node.\n   *\n   * Will be called again on children changes.\n   */\n  Root?: RootProcessor\n\n  /**\n   * Will be called on `Root` node, when all children will be processed.\n   *\n   * Will be called again on children changes.\n   */\n  RootExit?: RootProcessor\n\n  /**\n   * Will be called on all `Declaration` nodes after listeners\n   * for `Declaration` event.\n   *\n   * Will be called again on node or children changes.\n   */\n  Declaration?: DeclarationProcessor | { [prop: string]: DeclarationProcessor }\n\n  /**\n   * Will be called on all `Declaration` nodes.\n   *\n   * Will be called again on node or children changes.\n   */\n  DeclarationExit?:\n    | DeclarationProcessor\n    | { [prop: string]: DeclarationProcessor }\n\n  /**\n   * Will be called on all `Rule` nodes.\n   *\n   * Will be called again on node or children changes.\n   */\n  Rule?: RuleProcessor\n\n  /**\n   * Will be called on all `Rule` nodes, when all children will be processed.\n   *\n   * Will be called again on node or children changes.\n   */\n  RuleExit?: RuleProcessor\n\n  /**\n   * Will be called on all`AtRule` nodes.\n   *\n   * Will be called again on node or children changes.\n   */\n  AtRule?: AtRuleProcessor | { [name: string]: AtRuleProcessor }\n\n  /**\n   * Will be called on all `AtRule` nodes, when all children will be processed.\n   *\n   * Will be called again on node or children changes.\n   */\n  AtRuleExit?: AtRuleProcessor | { [name: string]: AtRuleProcessor }\n\n  /**\n   * Will be called on all `Comment` nodes.\n   *\n   * Will be called again on node or children changes.\n   */\n  Comment?: CommentProcessor\n\n  /**\n   * Will be called on all `Comment` nodes after listeners\n   * for `Comment` event.\n   *\n   * Will be called again on node or children changes.\n   */\n  CommentExit?: CommentProcessor\n\n  /**\n   * Will be called when all other listeners processed the document.\n   *\n   * This listener will not be called again.\n   */\n  Exit?: RootProcessor\n}\n\nexport interface Plugin extends Processors {\n  postcssPlugin: string\n  prepare?: (result: Result) => Processors\n}\n\nexport interface PluginCreator<PluginOptions> {\n  (opts?: PluginOptions): Plugin | Processor\n  postcss: true\n}\n\nexport interface Transformer extends TransformCallback {\n  postcssPlugin: string\n  postcssVersion: string\n}\n\nexport interface TransformCallback {\n  (root: Root, result: Result): Promise<void> | void\n}\n\nexport interface OldPlugin<T> extends Transformer {\n  (opts?: T): Transformer\n  postcss: Transformer\n}\n\nexport type AcceptedPlugin =\n  | Plugin\n  | PluginCreator<any>\n  | OldPlugin<any>\n  | TransformCallback\n  | {\n      postcss: TransformCallback | Processor\n    }\n  | Processor\n\nexport interface Parser<RootNode = Root | Document> {\n  (\n    css: string | { toString(): string },\n    opts?: Pick<ProcessOptions, 'map' | 'from'>\n  ): RootNode\n}\n\nexport interface Builder {\n  (part: string, node?: AnyNode, type?: 'start' | 'end'): void\n}\n\nexport interface Stringifier {\n  (node: AnyNode, builder: Builder): void\n}\n\nexport interface JSONHydrator {\n  (data: object[]): Node[]\n  (data: object): Node\n}\n\nexport interface Syntax {\n  /**\n   * Function to generate AST by string.\n   */\n  parse?: Parser\n\n  /**\n   * Class to generate string by AST.\n   */\n  stringify?: Stringifier\n}\n\nexport interface SourceMapOptions {\n  /**\n   * Indicates that the source map should be embedded in the output CSS\n   * as a Base64-encoded comment. By default, it is `true`.\n   * But if all previous maps are external, not inline, PostCSS will not embed\n   * the map even if you do not set this option.\n   *\n   * If you have an inline source map, the result.map property will be empty,\n   * as the source map will be contained within the text of `result.css`.\n   */\n  inline?: boolean\n\n  /**\n   * Source map content from a previous processing step (e.g., Sass).\n   *\n   * PostCSS will try to read the previous source map\n   * automatically (based on comments within the source CSS), but you can use\n   * this option to identify it manually.\n   *\n   * If desired, you can omit the previous map with prev: `false`.\n   */\n  prev?: string | boolean | object | ((file: string) => string)\n\n  /**\n   * Indicates that PostCSS should set the origin content (e.g., Sass source)\n   * of the source map. By default, it is true. But if all previous maps do not\n   * contain sources content, PostCSS will also leave it out even if you\n   * do not set this option.\n   */\n  sourcesContent?: boolean\n\n  /**\n   * Indicates that PostCSS should add annotation comments to the CSS.\n   * By default, PostCSS will always add a comment with a path\n   * to the source map. PostCSS will not add annotations to CSS files\n   * that do not contain any comments.\n   *\n   * By default, PostCSS presumes that you want to save the source map as\n   * `opts.to + '.map'` and will use this path in the annotation comment.\n   * A different path can be set by providing a string value for annotation.\n   *\n   * If you have set `inline: true`, annotation cannot be disabled.\n   */\n  annotation?: string | boolean | ((file: string, root: Root) => string)\n\n  /**\n   * Override `from` in map’s sources.\n   */\n  from?: string\n\n  /**\n   * Use absolute path in generated source map.\n   */\n  absolute?: boolean\n}\n\nexport interface ProcessOptions {\n  /**\n   * The path of the CSS source file. You should always set `from`,\n   * because it is used in source map generation and syntax error messages.\n   */\n  from?: string\n\n  /**\n   * The path where you'll put the output CSS file. You should always set `to`\n   * to generate correct source maps.\n   */\n  to?: string\n\n  /**\n   * Function to generate AST by string.\n   */\n  parser?: Syntax | Parser\n\n  /**\n   * Class to generate string by AST.\n   */\n  stringifier?: Syntax | Stringifier\n\n  /**\n   * Object with parse and stringify.\n   */\n  syntax?: Syntax\n\n  /**\n   * Source map options\n   */\n  map?: SourceMapOptions | boolean\n}\n\nexport interface Postcss {\n  /**\n   * Create a new `Processor` instance that will apply `plugins`\n   * as CSS processors.\n   *\n   * ```js\n   * let postcss = require('postcss')\n   *\n   * postcss(plugins).process(css, { from, to }).then(result => {\n   *   console.log(result.css)\n   * })\n   * ```\n   *\n   * @param plugins PostCSS plugins.\n   * @return Processor to process multiple CSS.\n   */\n  (plugins?: AcceptedPlugin[]): Processor\n  (...plugins: AcceptedPlugin[]): Processor\n\n  /**\n   * Default function to convert a node tree into a CSS string.\n   */\n  stringify: Stringifier\n\n  /**\n   * Parses source css and returns a new `Root` or `Document` node,\n   * which contains the source CSS nodes.\n   *\n   * ```js\n   * // Simple CSS concatenation with source map support\n   * const root1 = postcss.parse(css1, { from: file1 })\n   * const root2 = postcss.parse(css2, { from: file2 })\n   * root1.append(root2).toResult().css\n   * ```\n   */\n  parse: Parser<Root>\n\n  /**\n   * Rehydrate a JSON AST (from `Node#toJSON`) back into the AST classes.\n   *\n   * ```js\n   * const json = root.toJSON()\n   * // save to file, send by network, etc\n   * const root2  = postcss.fromJSON(json)\n   * ```\n   */\n  fromJSON: JSONHydrator\n\n  /**\n   * Contains the `list` module.\n   */\n  list: List\n\n  /**\n   * Creates a new `Comment` node.\n   *\n   * @param defaults Properties for the new node.\n   * @return New comment node\n   */\n  comment(defaults?: CommentProps): Comment\n\n  /**\n   * Creates a new `AtRule` node.\n   *\n   * @param defaults Properties for the new node.\n   * @return New at-rule node.\n   */\n  atRule(defaults?: AtRuleProps): AtRule\n\n  /**\n   * Creates a new `Declaration` node.\n   *\n   * @param defaults Properties for the new node.\n   * @return New declaration node.\n   */\n  decl(defaults?: DeclarationProps): Declaration\n\n  /**\n   * Creates a new `Rule` node.\n   *\n   * @param default Properties for the new node.\n   * @return New rule node.\n   */\n  rule(defaults?: RuleProps): Rule\n\n  /**\n   * Creates a new `Root` node.\n   *\n   * @param defaults Properties for the new node.\n   * @return New root node.\n   */\n  root(defaults?: RootProps): Root\n\n  /**\n   * Creates a new `Document` node.\n   *\n   * @param defaults Properties for the new node.\n   * @return New document node.\n   */\n  document(defaults?: DocumentProps): Document\n\n  CssSyntaxError: typeof CssSyntaxError\n  Declaration: typeof Declaration\n  Container: typeof Container\n  Comment: typeof Comment\n  Warning: typeof Warning\n  AtRule: typeof AtRule\n  Result: typeof Result\n  Input: typeof Input\n  Rule: typeof Rule\n  Root: typeof Root\n  Node: typeof Node\n}\n\nexport const stringify: Stringifier\nexport const parse: Parser<Root>\nexport const fromJSON: JSONHydrator\n\nexport const comment: Postcss['comment']\nexport const atRule: Postcss['atRule']\nexport const decl: Postcss['decl']\nexport const rule: Postcss['rule']\nexport const root: Postcss['root']\n\ndeclare const postcss: Postcss\n\nexport default postcss\n"}},"postcss.js":{"file":{"contents":"'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n"}},"postcss.mjs":{"file":{"contents":"import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n"}},"previous-map.d.ts":{"file":{"contents":"import { SourceMapConsumer } from 'source-map-js'\n\nimport { ProcessOptions } from './postcss.js'\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * ```js\n * const root = parse(css, { from: 'a.sass.css' })\n * root.input.map //=> PreviousMap\n * ```\n */\nexport default class PreviousMap {\n  /**\n   * Was source map inlined by data-uri to input CSS.\n   */\n  inline: boolean\n\n  /**\n   * `sourceMappingURL` content.\n   */\n  annotation?: string\n\n  /**\n   * Source map file content.\n   */\n  text?: string\n\n  /**\n   * The directory with source map file, if source map is in separated file.\n   */\n  root?: string\n\n  /**\n   * The CSS source identifier. Contains `Input#file` if the user\n   * set the `from` option, or `Input#id` if they did not.\n   */\n  file?: string\n\n  /**\n   * Path to source map file.\n   */\n  mapFile?: string\n\n  /**\n   * @param css  Input CSS source.\n   * @param opts Process options.\n   */\n  constructor(css: string, opts?: ProcessOptions)\n\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return Object with source map information.\n   */\n  consumer(): SourceMapConsumer\n\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return Is `sourcesContent` present.\n   */\n  withContent(): boolean\n}\n"}},"previous-map.js":{"file":{"contents":"'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n"}},"processor.d.ts":{"file":{"contents":"import {\n  AcceptedPlugin,\n  Plugin,\n  ProcessOptions,\n  Transformer,\n  TransformCallback\n} from './postcss.js'\nimport LazyResult from './lazy-result.js'\nimport Result from './result.js'\nimport Root from './root.js'\nimport NoWorkResult from './no-work-result.js'\n\n/**\n * Contains plugins to process CSS. Create one `Processor` instance,\n * initialize its plugins, and then use that instance on numerous CSS files.\n *\n * ```js\n * const processor = postcss([autoprefixer, postcssNested])\n * processor.process(css1).then(result => console.log(result.css))\n * processor.process(css2).then(result => console.log(result.css))\n * ```\n */\nexport default class Processor {\n  /**\n   * Current PostCSS version.\n   *\n   * ```js\n   * if (result.processor.version.split('.')[0] !== '6') {\n   *   throw new Error('This plugin works only with PostCSS 6')\n   * }\n   * ```\n   */\n  version: string\n\n  /**\n   * Plugins added to this processor.\n   *\n   * ```js\n   * const processor = postcss([autoprefixer, postcssNested])\n   * processor.plugins.length //=> 2\n   * ```\n   */\n  plugins: (Plugin | Transformer | TransformCallback)[]\n\n  /**\n   * @param plugins PostCSS plugins\n   */\n  constructor(plugins?: AcceptedPlugin[])\n\n  /**\n   * Adds a plugin to be used as a CSS processor.\n   *\n   * PostCSS plugin can be in 4 formats:\n   * * A plugin in `Plugin` format.\n   * * A plugin creator function with `pluginCreator.postcss = true`.\n   *   PostCSS will call this function without argument to get plugin.\n   * * A function. PostCSS will pass the function a @{link Root}\n   *   as the first argument and current `Result` instance\n   *   as the second.\n   * * Another `Processor` instance. PostCSS will copy plugins\n   *   from that instance into this one.\n   *\n   * Plugins can also be added by passing them as arguments when creating\n   * a `postcss` instance (see [`postcss(plugins)`]).\n   *\n   * Asynchronous plugins should return a `Promise` instance.\n   *\n   * ```js\n   * const processor = postcss()\n   *   .use(autoprefixer)\n   *   .use(postcssNested)\n   * ```\n   *\n   * @param plugin PostCSS plugin or `Processor` with plugins.\n   * @return Current processor to make methods chain.\n   */\n  use(plugin: AcceptedPlugin): this\n\n  /**\n   * Parses source CSS and returns a `LazyResult` Promise proxy.\n   * Because some plugins can be asynchronous it doesn’t make\n   * any transformations. Transformations will be applied\n   * in the `LazyResult` methods.\n   *\n   * ```js\n   * processor.process(css, { from: 'a.css', to: 'a.out.css' })\n   *   .then(result => {\n   *      console.log(result.css)\n   *   })\n   * ```\n   *\n   * @param css String with input CSS or any object with a `toString()` method,\n   *            like a Buffer. Optionally, senda `Result` instance\n   *            and the processor will take the `Root` from it.\n   * @param opts Options.\n   * @return Promise proxy.\n   */\n  process(\n    css: string | { toString(): string } | Result | LazyResult | Root,\n    options?: ProcessOptions\n  ): LazyResult | NoWorkResult\n}\n"}},"processor.js":{"file":{"contents":"'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.21'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n"}},"result.d.ts":{"file":{"contents":"import {\n  ProcessOptions,\n  Plugin,\n  SourceMap,\n  TransformCallback,\n  Root,\n  Document,\n  Node,\n  Warning,\n  WarningOptions\n} from './postcss.js'\nimport Processor from './processor.js'\n\nexport interface Message {\n  /**\n   * Message type.\n   */\n  type: string\n\n  /**\n   * Source PostCSS plugin name.\n   */\n  plugin?: string\n\n  [others: string]: any\n}\n\nexport interface ResultOptions extends ProcessOptions {\n  /**\n   * The CSS node that was the source of the warning.\n   */\n  node?: Node\n\n  /**\n   * Name of plugin that created this warning. `Result#warn` will fill it\n   * automatically with `Plugin#postcssPlugin` value.\n   */\n  plugin?: string\n}\n\n/**\n * Provides the result of the PostCSS transformations.\n *\n * A Result instance is returned by `LazyResult#then`\n * or `Root#toResult` methods.\n *\n * ```js\n * postcss([autoprefixer]).process(css).then(result => {\n *  console.log(result.css)\n * })\n * ```\n *\n * ```js\n * const result2 = postcss.parse(css).toResult()\n * ```\n */\nexport default class Result {\n  /**\n   * The Processor instance used for this transformation.\n   *\n   * ```js\n   * for (const plugin of result.processor.plugins) {\n   *   if (plugin.postcssPlugin === 'postcss-bad') {\n   *     throw 'postcss-good is incompatible with postcss-bad'\n   *   }\n   * })\n   * ```\n   */\n  processor: Processor\n\n  /**\n   * Contains messages from plugins (e.g., warnings or custom messages).\n   * Each message should have type and plugin properties.\n   *\n   * ```js\n   * AtRule: {\n   *   import: (atRule, { result }) {\n   *     const importedFile = parseImport(atRule)\n   *     result.messages.push({\n   *       type: 'dependency',\n   *       plugin: 'postcss-import',\n   *       file: importedFile,\n   *       parent: result.opts.from\n   *     })\n   *   }\n   * }\n   * ```\n   */\n  messages: Message[]\n\n  /**\n   * Root node after all transformations.\n   *\n   * ```js\n   * root.toResult().root === root\n   * ```\n   */\n  root: Root | Document\n\n  /**\n   * Options from the `Processor#process` or `Root#toResult` call\n   * that produced this Result instance.]\n   *\n   * ```js\n   * root.toResult(opts).opts === opts\n   * ```\n   */\n  opts: ResultOptions\n\n  /**\n   * A CSS string representing of `Result#root`.\n   *\n   * ```js\n   * postcss.parse('a{}').toResult().css //=> \"a{}\"\n   * ```\n   */\n  css: string\n\n  /**\n   * An instance of `SourceMapGenerator` class from the `source-map` library,\n   * representing changes to the `Result#root` instance.\n   *\n   * ```js\n   * result.map.toJSON() //=> { version: 3, file: 'a.css', … }\n   * ```\n   *\n   * ```js\n   * if (result.map) {\n   *   fs.writeFileSync(result.opts.to + '.map', result.map.toString())\n   * }\n   * ```\n   */\n  map: SourceMap\n\n  /**\n   * Last runned PostCSS plugin.\n   */\n  lastPlugin: Plugin | TransformCallback\n\n  /**\n   * @param processor Processor used for this transformation.\n   * @param root      Root node after all transformations.\n   * @param opts      Options from the `Processor#process` or `Root#toResult`.\n   */\n  constructor(processor: Processor, root: Root | Document, opts: ResultOptions)\n\n  /**\n   * An alias for the `Result#css` property.\n   * Use it with syntaxes that generate non-CSS output.\n   *\n   * ```js\n   * result.css === result.content\n   * ```\n   */\n  get content(): string\n\n  /**\n   * Returns for `Result#css` content.\n   *\n   * ```js\n   * result + '' === result.css\n   * ```\n   *\n   * @return String representing of `Result#root`.\n   */\n  toString(): string\n\n  /**\n   * Creates an instance of `Warning` and adds it to `Result#messages`.\n   *\n   * ```js\n   * if (decl.important) {\n   *   result.warn('Avoid !important', { node: decl, word: '!important' })\n   * }\n   * ```\n   *\n   * @param text Warning message.\n   * @param opts Warning options.\n   * @return Created warning.\n   */\n  warn(message: string, options?: WarningOptions): Warning\n\n  /**\n   * Returns warnings from plugins. Filters `Warning` instances\n   * from `Result#messages`.\n   *\n   * ```js\n   * result.warnings().forEach(warn => {\n   *   console.warn(warn.toString())\n   * })\n   * ```\n   *\n   * @return Warnings from plugins.\n   */\n  warnings(): Warning[]\n}\n"}},"result.js":{"file":{"contents":"'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n"}},"root.d.ts":{"file":{"contents":"import Container, { ContainerProps } from './container.js'\nimport Document from './document.js'\nimport { ProcessOptions } from './postcss.js'\nimport Result from './result.js'\n\ninterface RootRaws extends Record<string, any> {\n  /**\n   * The space symbols after the last child to the end of file.\n   */\n  after?: string\n\n  /**\n   * Non-CSS code before `Root`, when `Root` is inside `Document`.\n   *\n   * **Experimental:** some aspects of this node could change within minor\n   * or patch version releases.\n   */\n  codeBefore?: string\n\n  /**\n   * Non-CSS code after `Root`, when `Root` is inside `Document`.\n   *\n   * **Experimental:** some aspects of this node could change within minor\n   * or patch version releases.\n   */\n  codeAfter?: string\n\n  /**\n   * Is the last child has an (optional) semicolon.\n   */\n  semicolon?: boolean\n}\n\nexport interface RootProps extends ContainerProps {\n  /**\n   * Information used to generate byte-to-byte equal node string\n   * as it was in the origin input.\n   * */\n  raws?: RootRaws\n}\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * ```js\n * const root = postcss.parse('a{color:black} b{z-index:2}')\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n * ```\n */\nexport default class Root extends Container {\n  type: 'root'\n  parent: Document | undefined\n  raws: RootRaws\n\n  /**\n   * Returns a `Result` instance representing the root’s CSS.\n   *\n   * ```js\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * root1.append(root2)\n   * const result = root1.toResult({ to: 'all.css', map: true })\n   * ```\n   *\n   * @param opts Options.\n   * @return Result with current root’s CSS.\n   */\n  toResult(options?: ProcessOptions): Result\n\n  constructor(defaults?: RootProps)\n  assign(overrides: object | RootProps): this\n}\n"}},"root.js":{"file":{"contents":"'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n"}},"rule.d.ts":{"file":{"contents":"import Container, { ContainerProps } from './container.js'\n\ninterface RuleRaws extends Record<string, unknown> {\n  /**\n   * The space symbols before the node. It also stores `*`\n   * and `_` symbols before the declaration (IE hack).\n   */\n  before?: string\n\n  /**\n   * The space symbols after the last child of the node to the end of the node.\n   */\n  after?: string\n\n  /**\n   * The symbols between the selector and `{` for rules.\n   */\n  between?: string\n\n  /**\n   * Contains `true` if the last child has an (optional) semicolon.\n   */\n  semicolon?: boolean\n\n  /**\n   * Contains `true` if there is semicolon after rule.\n   */\n  ownSemicolon?: string\n\n  /**\n   * The rule’s selector with comments.\n   */\n  selector?: {\n    value: string\n    raw: string\n  }\n}\n\nexport interface RuleProps extends ContainerProps {\n  /** Selector or selectors of the rule. */\n  selector?: string\n  /** Selectors of the rule represented as an array of strings. */\n  selectors?: string[]\n  /** Information used to generate byte-to-byte equal node string as it was in the origin input. */\n  raws?: RuleRaws\n}\n\n/**\n * Represents a CSS rule: a selector followed by a declaration block.\n *\n * ```js\n * Once (root, { Rule }) {\n *   let a = new Rule({ selector: 'a' })\n *   a.append(…)\n *   root.append(a)\n * }\n * ```\n *\n * ```js\n * const root = postcss.parse('a{}')\n * const rule = root.first\n * rule.type       //=> 'rule'\n * rule.toString() //=> 'a{}'\n * ```\n */\nexport default class Rule extends Container {\n  type: 'rule'\n  parent: Container | undefined\n  raws: RuleRaws\n\n  /**\n   * The rule’s full selector represented as a string.\n   *\n   * ```js\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   * rule.selector //=> 'a, b'\n   * ```\n   */\n  selector: string\n\n  /**\n   * An array containing the rule’s individual selectors.\n   * Groups of selectors are split at commas.\n   *\n   * ```js\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   *\n   * rule.selector  //=> 'a, b'\n   * rule.selectors //=> ['a', 'b']\n   *\n   * rule.selectors = ['a', 'strong']\n   * rule.selector //=> 'a, strong'\n   * ```\n   */\n  selectors: string[]\n\n  constructor(defaults?: RuleProps)\n  assign(overrides: object | RuleProps): this\n  clone(overrides?: Partial<RuleProps>): this\n  cloneBefore(overrides?: Partial<RuleProps>): this\n  cloneAfter(overrides?: Partial<RuleProps>): this\n}\n"}},"rule.js":{"file":{"contents":"'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n"}},"stringifier.d.ts":{"file":{"contents":"import {\n  Document,\n  Root,\n  Comment,\n  Declaration,\n  Builder,\n  AnyNode,\n  Rule,\n  AtRule,\n  Container\n} from './postcss.js'\n\nexport default class Stringifier {\n  builder: Builder\n  constructor(builder: Builder)\n  stringify(node: AnyNode, semicolon?: boolean): void\n  document(node: Document): void\n  root(node: Root): void\n  comment(node: Comment): void\n  decl(node: Declaration, semicolon?: boolean): void\n  rule(node: Rule): void\n  atrule(node: AtRule, semicolon?: boolean): void\n  body(node: Container): void\n  block(node: AnyNode, start: string): void\n  raw(node: AnyNode, own: string | null, detect?: string): string\n  rawSemicolon(root: Root): boolean | undefined\n  rawEmptyBody(root: Root): string | undefined\n  rawIndent(root: Root): string | undefined\n  rawBeforeComment(root: Root, node: Comment): string | undefined\n  rawBeforeDecl(root: Root, node: Declaration): string | undefined\n  rawBeforeRule(root: Root): string | undefined\n  rawBeforeClose(root: Root): string | undefined\n  rawBeforeOpen(root: Root): string | undefined\n  rawColon(root: Root): string | undefined\n  beforeAfter(node: AnyNode, detect: 'before' | 'after'): string\n  rawValue(node: AnyNode, prop: string): string\n}\n"}},"stringifier.js":{"file":{"contents":"'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n"}},"stringify.d.ts":{"file":{"contents":"import { Stringifier } from './postcss.js'\n\ndeclare const stringify: Stringifier\n\nexport default stringify\n"}},"stringify.js":{"file":{"contents":"'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n"}},"symbols.js":{"file":{"contents":"'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n"}},"terminal-highlight.js":{"file":{"contents":"'use strict'\n\nlet pico = require('picocolors')\n\nlet tokenizer = require('./tokenize')\n\nlet Input\n\nfunction registerInput(dependant) {\n  Input = dependant\n}\n\nconst HIGHLIGHT_THEME = {\n  'brackets': pico.cyan,\n  'at-word': pico.cyan,\n  'comment': pico.gray,\n  'string': pico.green,\n  'class': pico.yellow,\n  'hash': pico.magenta,\n  'call': pico.cyan,\n  '(': pico.cyan,\n  ')': pico.cyan,\n  '{': pico.yellow,\n  '}': pico.yellow,\n  '[': pico.yellow,\n  ']': pico.yellow,\n  ':': pico.yellow,\n  ';': pico.yellow\n}\n\nfunction getTokenType([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight(css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1]\n        .split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nterminalHighlight.registerInput = registerInput\n\nmodule.exports = terminalHighlight\n"}},"tokenize.js":{"file":{"contents":"'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n"}},"warn-once.js":{"file":{"contents":"/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n"}},"warning.d.ts":{"file":{"contents":"import { RangePosition } from './css-syntax-error.js'\nimport Node from './node.js'\n\nexport interface WarningOptions {\n  /**\n   * CSS node that caused the warning.\n   */\n  node?: Node\n\n  /**\n   * Word in CSS source that caused the warning.\n   */\n  word?: string\n\n  /**\n   * Start index, inclusive, in CSS node string that caused the warning.\n   */\n  index?: number\n\n  /**\n   * End index, exclusive, in CSS node string that caused the warning.\n   */\n  endIndex?: number\n\n  /**\n   * Start position, inclusive, in CSS node string that caused the warning.\n   */\n  start?: RangePosition\n\n  /**\n   * End position, exclusive, in CSS node string that caused the warning.\n   */\n  end?: RangePosition\n\n  /**\n   * Name of the plugin that created this warning. `Result#warn` fills\n   * this property automatically.\n   */\n  plugin?: string\n}\n\n/**\n * Represents a plugin’s warning. It can be created using `Node#warn`.\n *\n * ```js\n * if (decl.important) {\n *   decl.warn(result, 'Avoid !important', { word: '!important' })\n * }\n * ```\n */\nexport default class Warning {\n  /**\n   * Type to filter warnings from `Result#messages`.\n   * Always equal to `\"warning\"`.\n   */\n  type: 'warning'\n\n  /**\n   * The warning message.\n   *\n   * ```js\n   * warning.text //=> 'Try to avoid !important'\n   * ```\n   */\n  text: string\n\n  /**\n   * The name of the plugin that created this warning.\n   * When you call `Node#warn` it will fill this property automatically.\n   *\n   * ```js\n   * warning.plugin //=> 'postcss-important'\n   * ```\n   */\n  plugin: string\n\n  /**\n   * Contains the CSS node that caused the warning.\n   *\n   * ```js\n   * warning.node.toString() //=> 'color: white !important'\n   * ```\n   */\n  node: Node\n\n  /**\n   * Line for inclusive start position in the input file with this warning’s source.\n   *\n   * ```js\n   * warning.line //=> 5\n   * ```\n   */\n  line: number\n\n  /**\n   * Column for inclusive start position in the input file with this warning’s source.\n   *\n   * ```js\n   * warning.column //=> 6\n   * ```\n   */\n  column: number\n\n  /**\n   * Line for exclusive end position in the input file with this warning’s source.\n   *\n   * ```js\n   * warning.endLine //=> 6\n   * ```\n   */\n  endLine?: number\n\n  /**\n   * Column for exclusive end position in the input file with this warning’s source.\n   *\n   * ```js\n   * warning.endColumn //=> 4\n   * ```\n   */\n  endColumn?: number\n\n  /**\n   * @param text Warning message.\n   * @param opts Warning options.\n   */\n  constructor(text: string, opts?: WarningOptions)\n\n  /**\n   * Returns a warning position and message.\n   *\n   * ```js\n   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n   * ```\n   *\n   * @return Warning position and message.\n   */\n  toString(): string\n}\n"}},"warning.js":{"file":{"contents":"'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n"}}}},"LICENSE":{"file":{"contents":"The MIT License (MIT)\n\nCopyright 2013 Andrey Sitnik <andrey@sitnik.ru>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"}},"package.json":{"file":{"contents":"{\n  \"name\": \"postcss\",\n  \"version\": \"8.4.21\",\n  \"description\": \"Tool for transforming styles with JS plugins\",\n  \"engines\": {\n    \"node\": \"^10 || ^12 || >=14\"\n  },\n  \"exports\": {\n    \".\": {\n      \"require\": \"./lib/postcss.js\",\n      \"import\": \"./lib/postcss.mjs\",\n      \"types\": \"./lib/postcss.d.ts\"\n    },\n    \"./lib/at-rule\": \"./lib/at-rule.js\",\n    \"./lib/comment\": \"./lib/comment.js\",\n    \"./lib/container\": \"./lib/container.js\",\n    \"./lib/css-syntax-error\": \"./lib/css-syntax-error.js\",\n    \"./lib/declaration\": \"./lib/declaration.js\",\n    \"./lib/fromJSON\": \"./lib/fromJSON.js\",\n    \"./lib/input\": \"./lib/input.js\",\n    \"./lib/lazy-result\": \"./lib/lazy-result.js\",\n    \"./lib/no-work-result\": \"./lib/no-work-result.js\",\n    \"./lib/list\": \"./lib/list.js\",\n    \"./lib/map-generator\": \"./lib/map-generator.js\",\n    \"./lib/node\": \"./lib/node.js\",\n    \"./lib/parse\": \"./lib/parse.js\",\n    \"./lib/parser\": \"./lib/parser.js\",\n    \"./lib/postcss\": \"./lib/postcss.js\",\n    \"./lib/previous-map\": \"./lib/previous-map.js\",\n    \"./lib/processor\": \"./lib/processor.js\",\n    \"./lib/result\": \"./lib/result.js\",\n    \"./lib/root\": \"./lib/root.js\",\n    \"./lib/rule\": \"./lib/rule.js\",\n    \"./lib/stringifier\": \"./lib/stringifier.js\",\n    \"./lib/stringify\": \"./lib/stringify.js\",\n    \"./lib/symbols\": \"./lib/symbols.js\",\n    \"./lib/terminal-highlight\": \"./lib/terminal-highlight.js\",\n    \"./lib/tokenize\": \"./lib/tokenize.js\",\n    \"./lib/warn-once\": \"./lib/warn-once.js\",\n    \"./lib/warning\": \"./lib/warning.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"./lib/postcss.js\",\n  \"types\": \"./lib/postcss.d.ts\",\n  \"keywords\": [\n    \"css\",\n    \"postcss\",\n    \"rework\",\n    \"preprocessor\",\n    \"parser\",\n    \"source map\",\n    \"transform\",\n    \"manipulation\",\n    \"transpiler\"\n  ],\n  \"funding\": [\n    {\n      \"type\": \"opencollective\",\n      \"url\": \"https://opencollective.com/postcss/\"\n    },\n    {\n      \"type\": \"tidelift\",\n      \"url\": \"https://tidelift.com/funding/github/npm/postcss\"\n    }\n  ],\n  \"author\": \"Andrey Sitnik <andrey@sitnik.ru>\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://postcss.org/\",\n  \"repository\": \"postcss/postcss\",\n  \"bugs\": {\n    \"url\": \"https://github.com/postcss/postcss/issues\"\n  },\n  \"dependencies\": {\n    \"nanoid\": \"^3.3.4\",\n    \"picocolors\": \"^1.0.0\",\n    \"source-map-js\": \"^1.0.2\"\n  },\n  \"browser\": {\n    \"./lib/terminal-highlight\": false,\n    \"source-map-js\": false,\n    \"path\": false,\n    \"url\": false,\n    \"fs\": false\n  }\n}\n"}},"README.md":{"file":{"contents":"# PostCSS [![Gitter][chat-img]][chat]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     alt=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"https://postcss.org/logo.svg\">\n\n[chat-img]: https://img.shields.io/badge/Gitter-Join_the_PostCSS_chat-brightgreen.svg\n[chat]:     https://gitter.im/postcss/postcss\n\nPostCSS is a tool for transforming styles with JS plugins.\nThese plugins can lint your CSS, support variables and mixins,\ntranspile future CSS syntax, inline images, and more.\n\nPostCSS is used by industry leaders including Wikipedia, Twitter, Alibaba,\nand JetBrains. The [Autoprefixer] PostCSS plugin is one of the most popular\nCSS processors.\n\nPostCSS takes a CSS file and provides an API to analyze and modify its rules\n(by transforming them into an [Abstract Syntax Tree]).\nThis API can then be used by [plugins] to do a lot of useful things,\ne.g., to find errors automatically, or to insert vendor prefixes.\n\n**Support / Discussion:** [Gitter](https://gitter.im/postcss/postcss)<br>\n**Twitter account:**      [@postcss](https://twitter.com/postcss)<br>\n**VK.com page:**          [postcss](https://vk.com/postcss)<br>\n**中文翻译**:              [`docs/README-cn.md`](./docs/README-cn.md)\n\nFor PostCSS commercial support (consulting, improving the front-end culture\nof your company, PostCSS plugins), contact [Evil Martians]\nat <postcss@evilmartians.com>.\n\n[Abstract Syntax Tree]: https://en.wikipedia.org/wiki/Abstract_syntax_tree\n[Evil Martians]:        https://evilmartians.com/?utm_source=postcss\n[Autoprefixer]:         https://github.com/postcss/autoprefixer\n[plugins]:              https://github.com/postcss/postcss#plugins\n\n<a href=\"https://evilmartians.com/?utm_source=postcss\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n\n## Docs\nRead full docs **[here](https://postcss.org/)**.\n"}}}}