{"directory":{"HISTORY.md":{"file":{"contents":"0.5.0 / 2022-04-11\n==================\n\n  * Add `priority` option\n  * Fix `expires` option to reject invalid dates\n  * pref: improve default decode speed\n  * pref: remove slow string split in parse\n\n0.4.2 / 2022-02-02\n==================\n\n  * pref: read value only when assigning in parse\n  * pref: remove unnecessary regexp in parse\n\n0.4.1 / 2020-04-21\n==================\n\n  * Fix `maxAge` option to reject invalid values\n\n0.4.0 / 2019-05-15\n==================\n\n  * Add `SameSite=None` support\n\n0.3.1 / 2016-05-26\n==================\n\n  * Fix `sameSite: true` to work with draft-7 clients\n    - `true` now sends `SameSite=Strict` instead of `SameSite`\n\n0.3.0 / 2016-05-26\n==================\n\n  * Add `sameSite` option\n    - Replaces `firstPartyOnly` option, never implemented by browsers\n  * Improve error message when `encode` is not a function\n  * Improve error message when `expires` is not a `Date`\n\n0.2.4 / 2016-05-20\n==================\n\n  * perf: enable strict mode\n  * perf: use for loop in parse\n  * perf: use string concatination for serialization\n\n0.2.3 / 2015-10-25\n==================\n\n  * Fix cookie `Max-Age` to never be a floating point number\n\n0.2.2 / 2015-09-17\n==================\n\n  * Fix regression when setting empty cookie value\n    - Ease the new restriction, which is just basic header-level validation\n  * Fix typo in invalid value errors\n\n0.2.1 / 2015-09-17\n==================\n\n  * Throw on invalid values provided to `serialize`\n    - Ensures the resulting string is a valid HTTP header value\n\n0.2.0 / 2015-08-13\n==================\n\n  * Add `firstPartyOnly` option\n  * Throw better error for invalid argument to parse\n  * perf: hoist regular expression\n\n0.1.5 / 2015-09-17\n==================\n\n  * Fix regression when setting empty cookie value\n    - Ease the new restriction, which is just basic header-level validation\n  * Fix typo in invalid value errors\n\n0.1.4 / 2015-09-17\n==================\n\n  * Throw better error for invalid argument to parse\n  * Throw on invalid values provided to `serialize`\n    - Ensures the resulting string is a valid HTTP header value\n\n0.1.3 / 2015-05-19\n==================\n\n  * Reduce the scope of try-catch deopt\n  * Remove argument reassignments\n\n0.1.2 / 2014-04-16\n==================\n\n  * Remove unnecessary files from npm package\n\n0.1.1 / 2014-02-23\n==================\n\n  * Fix bad parse when cookie value contained a comma\n  * Fix support for `maxAge` of `0`\n\n0.1.0 / 2013-05-01\n==================\n\n  * Add `decode` option\n  * Add `encode` option\n\n0.0.6 / 2013-04-08\n==================\n\n  * Ignore cookie parts missing `=`\n\n0.0.5 / 2012-10-29\n==================\n\n  * Return raw cookie value if value unescape errors\n\n0.0.4 / 2012-06-21\n==================\n\n  * Use encode/decodeURIComponent for cookie encoding/decoding\n    - Improve server/client interoperability\n\n0.0.3 / 2012-06-06\n==================\n\n  * Only escape special characters per the cookie RFC\n\n0.0.2 / 2012-06-01\n==================\n\n  * Fix `maxAge` option to not throw error\n\n0.0.1 / 2012-05-28\n==================\n\n  * Add more tests\n\n0.0.0 / 2012-05-28\n==================\n\n  * Initial release\n"}},"index.js":{"file":{"contents":"/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n"}},"LICENSE":{"file":{"contents":"(The MIT License)\n\nCopyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\nCopyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"}},"package.json":{"file":{"contents":"{\n  \"name\": \"cookie\",\n  \"description\": \"HTTP server cookie parsing and serialization\",\n  \"version\": \"0.5.0\",\n  \"author\": \"Roman Shtylman <shtylman@gmail.com>\",\n  \"contributors\": [\n    \"Douglas Christopher Wilson <doug@somethingdoug.com>\"\n  ],\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"cookie\",\n    \"cookies\"\n  ],\n  \"repository\": \"jshttp/cookie\",\n  \"devDependencies\": {\n    \"beautify-benchmark\": \"0.2.4\",\n    \"benchmark\": \"2.1.4\",\n    \"eslint\": \"7.32.0\",\n    \"eslint-plugin-markdown\": \"2.2.1\",\n    \"mocha\": \"9.2.2\",\n    \"nyc\": \"15.1.0\",\n    \"safe-buffer\": \"5.2.1\",\n    \"top-sites\": \"1.1.97\"\n  },\n  \"files\": [\n    \"HISTORY.md\",\n    \"LICENSE\",\n    \"README.md\",\n    \"SECURITY.md\",\n    \"index.js\"\n  ],\n  \"engines\": {\n    \"node\": \">= 0.6\"\n  },\n  \"scripts\": {\n    \"bench\": \"node benchmark/index.js\",\n    \"lint\": \"eslint .\",\n    \"test\": \"mocha --reporter spec --bail --check-leaks test/\",\n    \"test-ci\": \"nyc --reporter=lcov --reporter=text npm test\",\n    \"test-cov\": \"nyc --reporter=html --reporter=text npm test\",\n    \"update-bench\": \"node scripts/update-benchmark.js\",\n    \"version\": \"node scripts/version-history.js && git add HISTORY.md\"\n  }\n}\n"}},"README.md":{"file":{"contents":"# cookie\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][github-actions-ci-image]][github-actions-ci-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nBasic HTTP cookie parser and serializer for HTTP servers.\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install cookie\n```\n\n## API\n\n```js\nvar cookie = require('cookie');\n```\n\n### cookie.parse(str, options)\n\nParse an HTTP `Cookie` header string and returning an object of all cookie name-value pairs.\nThe `str` argument is the string representing a `Cookie` header value and `options` is an\noptional object containing additional parsing options.\n\n```js\nvar cookies = cookie.parse('foo=bar; equation=E%3Dmc%5E2');\n// { foo: 'bar', equation: 'E=mc^2' }\n```\n\n#### Options\n\n`cookie.parse` accepts these properties in the options object.\n\n##### decode\n\nSpecifies a function that will be used to decode a cookie's value. Since the value of a cookie\nhas a limited character set (and must be a simple string), this function can be used to decode\na previously-encoded cookie value into a JavaScript string or other object.\n\nThe default function is the global `decodeURIComponent`, which will decode any URL-encoded\nsequences into their byte representations.\n\n**note** if an error is thrown from this function, the original, non-decoded cookie value will\nbe returned as the cookie's value.\n\n### cookie.serialize(name, value, options)\n\nSerialize a cookie name-value pair into a `Set-Cookie` header string. The `name` argument is the\nname for the cookie, the `value` argument is the value to set the cookie to, and the `options`\nargument is an optional object containing additional serialization options.\n\n```js\nvar setCookie = cookie.serialize('foo', 'bar');\n// foo=bar\n```\n\n#### Options\n\n`cookie.serialize` accepts these properties in the options object.\n\n##### domain\n\nSpecifies the value for the [`Domain` `Set-Cookie` attribute][rfc-6265-5.2.3]. By default, no\ndomain is set, and most clients will consider the cookie to apply to only the current domain.\n\n##### encode\n\nSpecifies a function that will be used to encode a cookie's value. Since value of a cookie\nhas a limited character set (and must be a simple string), this function can be used to encode\na value into a string suited for a cookie's value.\n\nThe default function is the global `encodeURIComponent`, which will encode a JavaScript string\ninto UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range.\n\n##### expires\n\nSpecifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute][rfc-6265-5.2.1].\nBy default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and\nwill delete it on a condition like exiting a web browser application.\n\n**note** the [cookie storage model specification][rfc-6265-5.3] states that if both `expires` and\n`maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,\nso if both are set, they should point to the same date and time.\n\n##### httpOnly\n\nSpecifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute][rfc-6265-5.2.6]. When truthy,\nthe `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not allow client-side\nJavaScript to see the cookie in `document.cookie`.\n\n##### maxAge\n\nSpecifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute][rfc-6265-5.2.2].\nThe given number will be converted to an integer by rounding down. By default, no maximum age is set.\n\n**note** the [cookie storage model specification][rfc-6265-5.3] states that if both `expires` and\n`maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,\nso if both are set, they should point to the same date and time.\n\n##### path\n\nSpecifies the value for the [`Path` `Set-Cookie` attribute][rfc-6265-5.2.4]. By default, the path\nis considered the [\"default path\"][rfc-6265-5.1.4].\n\n##### priority\n\nSpecifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].\n\n  - `'low'` will set the `Priority` attribute to `Low`.\n  - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n  - `'high'` will set the `Priority` attribute to `High`.\n\nMore information about the different priority levels can be found in\n[the specification][rfc-west-cookie-priority-00-4.1].\n\n**note** This is an attribute that has not yet been fully standardized, and may change in the future.\nThis also means many clients may ignore this attribute until they understand it.\n\n##### sameSite\n\nSpecifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][rfc-6265bis-09-5.4.7].\n\n  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n  - `false` will not set the `SameSite` attribute.\n  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n  - `'none'` will set the `SameSite` attribute to `None` for an explicit cross-site cookie.\n  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in\n[the specification][rfc-6265bis-09-5.4.7].\n\n**note** This is an attribute that has not yet been fully standardized, and may change in the future.\nThis also means many clients may ignore this attribute until they understand it.\n\n##### secure\n\nSpecifies the `boolean` value for the [`Secure` `Set-Cookie` attribute][rfc-6265-5.2.5]. When truthy,\nthe `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not send the cookie back to\nthe server in the future if the browser does not have an HTTPS connection.\n\n## Example\n\nThe following example uses this module in conjunction with the Node.js core HTTP server\nto prompt a user for their name and display it back on future visits.\n\n```js\nvar cookie = require('cookie');\nvar escapeHtml = require('escape-html');\nvar http = require('http');\nvar url = require('url');\n\nfunction onRequest(req, res) {\n  // Parse the query string\n  var query = url.parse(req.url, true, true).query;\n\n  if (query && query.name) {\n    // Set a new cookie with the name\n    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {\n      httpOnly: true,\n      maxAge: 60 * 60 * 24 * 7 // 1 week\n    }));\n\n    // Redirect back after setting cookie\n    res.statusCode = 302;\n    res.setHeader('Location', req.headers.referer || '/');\n    res.end();\n    return;\n  }\n\n  // Parse the cookies on the request\n  var cookies = cookie.parse(req.headers.cookie || '');\n\n  // Get the visitor name set in the cookie\n  var name = cookies.name;\n\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n\n  if (name) {\n    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');\n  } else {\n    res.write('<p>Hello, new visitor!</p>');\n  }\n\n  res.write('<form method=\"GET\">');\n  res.write('<input placeholder=\"enter your name\" name=\"name\"> <input type=\"submit\" value=\"Set Name\">');\n  res.end('</form>');\n}\n\nhttp.createServer(onRequest).listen(3000);\n```\n\n## Testing\n\n```sh\n$ npm test\n```\n\n## Benchmark\n\n```\n$ npm run bench\n\n> cookie@0.4.2 bench\n> node benchmark/index.js\n\n  node@16.14.0\n  v8@9.4.146.24-node.20\n  uv@1.43.0\n  zlib@1.2.11\n  brotli@1.0.9\n  ares@1.18.1\n  modules@93\n  nghttp2@1.45.1\n  napi@8\n  llhttp@6.0.4\n  openssl@1.1.1m+quic\n  cldr@40.0\n  icu@70.1\n  tz@2021a3\n  unicode@14.0\n  ngtcp2@0.1.0-DEV\n  nghttp3@0.1.0-DEV\n\n> node benchmark/parse-top.js\n\n  cookie.parse - top sites\n\n  15 tests completed.\n\n  parse accounts.google.com x 2,421,245 ops/sec ±0.80% (188 runs sampled)\n  parse apple.com           x 2,684,710 ops/sec ±0.59% (189 runs sampled)\n  parse cloudflare.com      x 2,231,418 ops/sec ±0.76% (186 runs sampled)\n  parse docs.google.com     x 2,316,357 ops/sec ±1.28% (187 runs sampled)\n  parse drive.google.com    x 2,363,543 ops/sec ±0.49% (189 runs sampled)\n  parse en.wikipedia.org    x   839,414 ops/sec ±0.53% (189 runs sampled)\n  parse linkedin.com        x   553,797 ops/sec ±0.63% (190 runs sampled)\n  parse maps.google.com     x 1,314,779 ops/sec ±0.72% (189 runs sampled)\n  parse microsoft.com       x   153,783 ops/sec ±0.53% (190 runs sampled)\n  parse play.google.com     x 2,249,574 ops/sec ±0.59% (187 runs sampled)\n  parse plus.google.com     x 2,258,682 ops/sec ±0.60% (188 runs sampled)\n  parse sites.google.com    x 2,247,069 ops/sec ±0.68% (189 runs sampled)\n  parse support.google.com  x 1,456,840 ops/sec ±0.70% (187 runs sampled)\n  parse www.google.com      x 1,046,028 ops/sec ±0.58% (188 runs sampled)\n  parse youtu.be            x   937,428 ops/sec ±1.47% (190 runs sampled)\n  parse youtube.com         x   963,878 ops/sec ±0.59% (190 runs sampled)\n\n> node benchmark/parse.js\n\n  cookie.parse - generic\n\n  6 tests completed.\n\n  simple      x 2,745,604 ops/sec ±0.77% (185 runs sampled)\n  decode      x   557,287 ops/sec ±0.60% (188 runs sampled)\n  unquote     x 2,498,475 ops/sec ±0.55% (189 runs sampled)\n  duplicates  x   868,591 ops/sec ±0.89% (187 runs sampled)\n  10 cookies  x   306,745 ops/sec ±0.49% (190 runs sampled)\n  100 cookies x    22,414 ops/sec ±2.38% (182 runs sampled)\n```\n\n## References\n\n- [RFC 6265: HTTP State Management Mechanism][rfc-6265]\n- [Same-site Cookies][rfc-6265bis-09-5.4.7]\n\n[rfc-west-cookie-priority-00-4.1]: https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1\n[rfc-6265bis-09-5.4.7]: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7\n[rfc-6265]: https://tools.ietf.org/html/rfc6265\n[rfc-6265-5.1.4]: https://tools.ietf.org/html/rfc6265#section-5.1.4\n[rfc-6265-5.2.1]: https://tools.ietf.org/html/rfc6265#section-5.2.1\n[rfc-6265-5.2.2]: https://tools.ietf.org/html/rfc6265#section-5.2.2\n[rfc-6265-5.2.3]: https://tools.ietf.org/html/rfc6265#section-5.2.3\n[rfc-6265-5.2.4]: https://tools.ietf.org/html/rfc6265#section-5.2.4\n[rfc-6265-5.2.5]: https://tools.ietf.org/html/rfc6265#section-5.2.5\n[rfc-6265-5.2.6]: https://tools.ietf.org/html/rfc6265#section-5.2.6\n[rfc-6265-5.3]: https://tools.ietf.org/html/rfc6265#section-5.3\n\n## License\n\n[MIT](LICENSE)\n\n[coveralls-image]: https://badgen.net/coveralls/c/github/jshttp/cookie/master\n[coveralls-url]: https://coveralls.io/r/jshttp/cookie?branch=master\n[github-actions-ci-image]: https://img.shields.io/github/workflow/status/jshttp/cookie/ci/master?label=ci\n[github-actions-ci-url]: https://github.com/jshttp/cookie/actions/workflows/ci.yml\n[node-version-image]: https://badgen.net/npm/node/cookie\n[node-version-url]: https://nodejs.org/en/download\n[npm-downloads-image]: https://badgen.net/npm/dm/cookie\n[npm-url]: https://npmjs.org/package/cookie\n[npm-version-image]: https://badgen.net/npm/v/cookie\n"}},"SECURITY.md":{"file":{"contents":"# Security Policies and Procedures\n\n## Reporting a Bug\n\nThe `cookie` team and community take all security bugs seriously. Thank\nyou for improving the security of the project. We appreciate your efforts and\nresponsible disclosure and will make every effort to acknowledge your\ncontributions.\n\nReport security bugs by emailing the current owner(s) of `cookie`. This\ninformation can be found in the npm registry using the command\n`npm owner ls cookie`.\nIf unsure or unable to get the information from the above, open an issue\nin the [project issue tracker](https://github.com/jshttp/cookie/issues)\nasking for the current contact information.\n\nTo ensure the timely response to your report, please ensure that the entirety\nof the report is contained within the email body and not solely behind a web\nlink or an attachment.\n\nAt least one owner will acknowledge your email within 48 hours, and will send a\nmore detailed response within 48 hours indicating the next steps in handling\nyour report. After the initial reply to your report, the owners will\nendeavor to keep you informed of the progress towards a fix and full\nannouncement, and may ask for additional information or guidance.\n"}}}}